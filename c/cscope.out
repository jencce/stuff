cscope 15 $HOME/c               0000791831
	@/usr/include/FlexLexer.h

47 #i‚de‡
__FLEX_LEXER_H


49 
	#__FLEX_LEXER_H


	)

51 
	~<io°ªam
>

52 #i‚de‡
FLEX_STD


53 
	#FLEX_STD
 
°d
::

	)

58 
yy_buf„r_°©e
;

59 
	tyy_°©e_ty≥
;

61 ˛as†
	cFÀxLexî
 {

62 
public
:

63 
vútuÆ
 ~
FÀxLexî
() { }

65 c⁄° * 
YYText
(Ëc⁄° {  
yyãxt
; }

66 
YYLíg
(Ëc⁄° {  
yyÀng
; }

68 
vútuÆ
 

69 
yy_swôch_to_buf„r
–
yy_buf„r_°©e
* 
√w_buf„r
 ) = 0;

70 
vútuÆ
 
yy_buf„r_°©e
*

71 
yy_¸óã_buf„r
–
FLEX_STD
 
i°ªam
* 
s
, 
size
 ) = 0;

72 
vútuÆ
 
yy_dñëe_buf„r
–
yy_buf„r_°©e
* 
b
 ) = 0;

73 
vútuÆ
 
yyª°¨t
–
FLEX_STD
 
i°ªam
* 
s
 ) = 0;

75 
vútuÆ
 
yyÀx
() = 0;

78 
yyÀx
–
FLEX_STD
 
i°ªam
* 
√w_ö
, FLEX_STD 
o°ªam
* 
√w_out
 = 0 )

80 
swôch_°ªams
–
√w_ö
, 
√w_out
 );

81  
yyÀx
();

86 
vútuÆ
 
swôch_°ªams
–
FLEX_STD
 
i°ªam
* 
√w_ö
 = 0,

87 
FLEX_STD
 
o°ªam
* 
√w_out
 = 0 ) = 0;

89 
löío
(Ëc⁄° {  
yylöío
; }

91 
debug
(Ëc⁄° {  
yy_Êex_debug
; }

92 
£t_debug
–
Êag
 ) { 
yy_Êex_debug
 = flag; }

94 
¥Ÿe˘ed
:

95 * 
yyãxt
;

96 
yyÀng
;

97 
yylöío
;

98 
yy_Êex_debug
;

104 #i‡
deföed
(
yyFÀxLexî
Ë|| ! deföed(
yyFÀxLexîOn˚
)

108 
	#yyFÀxLexîOn˚


	)

112 ˛as†
	cyyFÀxLexî
 : 
public
 
FÀxLexî
 {

113 
public
:

116 
yyFÀxLexî
–
FLEX_STD
 
i°ªam
* 
¨g_yyö
 = 0, FLEX_STD 
o°ªam
* 
¨g_yyout
 = 0 );

118 
vútuÆ
 ~
yyFÀxLexî
();

120 
yy_swôch_to_buf„r
–
yy_buf„r_°©e
* 
√w_buf„r
 );

121 
yy_buf„r_°©e
* 
yy_¸óã_buf„r
–
FLEX_STD
 
i°ªam
* 
s
, 
size
 );

122 
yy_dñëe_buf„r
–
yy_buf„r_°©e
* 
b
 );

123 
yyª°¨t
–
FLEX_STD
 
i°ªam
* 
s
 );

125 
yypush_buf„r_°©e
–
yy_buf„r_°©e
* 
√w_buf„r
 );

126 
yyp›_buf„r_°©e
();

128 
vútuÆ
 
yyÀx
();

129 
vútuÆ
 
swôch_°ªams
–
FLEX_STD
 
i°ªam
* 
√w_ö
, FLEX_STD 
o°ªam
* 
√w_out
 = 0 );

130 
vútuÆ
 
yywøp
();

132 
¥Ÿe˘ed
:

133 
vútuÆ
 
LexîI≈ut
–* 
buf
, 
max_size
 );

134 
vútuÆ
 
LexîOuçut
–c⁄° * 
buf
, 
size
 );

135 
vútuÆ
 
LexîEº‹
–c⁄° * 
msg
 );

137 
yyu≈ut
–
c
, * 
buf_±r
 );

138 
yyöput
();

140 
yy_lﬂd_buf„r_°©e
();

141 
yy_öô_buf„r
–
yy_buf„r_°©e
* 
b
, 
FLEX_STD
 
i°ªam
* 
s
 );

142 
yy_Êush_buf„r
–
yy_buf„r_°©e
* 
b
 );

144 
yy_°¨t_°ack_±r
;

145 
yy_°¨t_°ack_dïth
;

146 * 
yy_°¨t_°ack
;

148 
yy_push_°©e
–
√w_°©e
 );

149 
yy_p›_°©e
();

150 
yy_t›_°©e
();

152 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
();

153 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
–yy_°©e_ty≥ 
cuºít_°©e
 );

154 
yy_gë_√xt_buf„r
();

156 
FLEX_STD
 
i°ªam
* 
yyö
;

157 
FLEX_STD
 
o°ªam
* 
yyout
;

160 
yy_hﬁd_ch¨
;

163 
yy_n_ch¨s
;

166 * 
yy_c_buf_p
;

168 
yy_öô
;

169 
yy_°¨t
;

173 
yy_did_buf„r_swôch_⁄_eof
;

176 
size_t
 
yy_buf„r_°ack_t›
;

177 
size_t
 
yy_buf„r_°ack_max
;

178 
yy_buf„r_°©e
 ** 
yy_buf„r_°ack
;

179 
yyísuª_buf„r_°ack
();

184 
yy_°©e_ty≥
 
yy_œ°_ac˚±ög_°©e
;

185 * 
yy_œ°_ac˚±ög_˝os
;

187 
yy_°©e_ty≥
* 
yy_°©e_buf
;

188 
yy_°©e_ty≥
* 
yy_°©e_±r
;

190 * 
yy_fuŒ_m©ch
;

191 * 
yy_fuŒ_°©e
;

192 
yy_fuŒ_Õ
;

194 
yy_Õ
;

195 
yy_lookög_f‹_åaû_begö
;

197 
yy_m‹e_Êag
;

198 
yy_m‹e_Àn
;

199 
yy_m‹e_off£t
;

200 
yy_¥ev_m‹e_off£t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/a.out.h

1 #i‚de‡
__A_OUT_GNU_H__


2 
	#__A_OUT_GNU_H__


	)

4 
	~<bôs/a.out.h
>

6 
	#__GNU_EXEC_MACROS__


	)

8 
	sexec


10 
	ma_öfo
;

11 
	ma_ãxt
;

12 
	ma_d©a
;

13 
	ma_bss
;

14 
	ma_syms
;

15 
	ma_íåy
;

16 
	ma_åsize
;

17 
	ma_drsize
;

20 
	emachöe_ty≥


22 
	mM_OLDSUN2
 = 0,

23 
	mM_68010
 = 1,

24 
	mM_68020
 = 2,

25 
	mM_SPARC
 = 3,

26 
	mM_386
 = 100,

27 
	mM_MIPS1
 = 151,

28 
	mM_MIPS2
 = 152

31 
	#N_MAGIC
(
exec
Ë(”xec).
a_öfo
 & 0xffff)

	)

32 
	#N_MACHTYPE
(
exec
Ë((
machöe_ty≥
)((”xec).
a_öfo
 >> 16Ë& 0xff))

	)

33 
	#N_FLAGS
(
exec
Ë((”xec).
a_öfo
 >> 24Ë& 0xff)

	)

34 
	#N_SET_INFO
(
exec
, 
magic
, 
ty≥
, 
Êags
) \

35 ((
exec
).
a_öfo
 = ((
magic
) & 0xffff) \

36 | ((()(
ty≥
) & 0xff) << 16) \

37 | (((
Êags
Ë& 0xffË<< 24))

	)

38 
	#N_SET_MAGIC
(
exec
, 
magic
) \

39 ((
exec
).
a_öfo
 = (”xec).a_öfÿ& 0xffff0000Ë| ((
magic
Ë& 0xffff))

	)

40 
	#N_SET_MACHTYPE
(
exec
, 
machty≥
) \

41 ((
exec
).
a_öfo
 = \

42 ((
exec
).
a_öfo
&0xff00ffffË| (((()(
machty≥
))&0xffË<< 16))

	)

43 
	#N_SET_FLAGS
(
exec
, 
Êags
) \

44 ((
exec
).
a_öfo
 = \

45 ((
exec
).
a_öfo
&0x00ffffffË| (((
Êags
Ë& 0xffË<< 24))

	)

48 
	#OMAGIC
 0407

	)

50 
	#NMAGIC
 0410

	)

52 
	#ZMAGIC
 0413

	)

55 
	#QMAGIC
 0314

	)

57 
	#CMAGIC
 0421

	)

59 
	#N_TRSIZE
(
a
Ë(◊).
a_åsize
)

	)

60 
	#N_DRSIZE
(
a
Ë(◊).
a_drsize
)

	)

61 
	#N_SYMSIZE
(
a
Ë(◊).
a_syms
)

	)

62 
	#N_BADMAG
(
x
) \

63 (
	`N_MAGIC
(
x
Ë!
OMAGIC
 && N_MAGIC(xË!
NMAGIC
 \

64 && 
	`N_MAGIC
(
x
Ë!
ZMAGIC
 && N_MAGIC(xË!
QMAGIC
)

	)

65 
	#_N_HDROFF
(
x
Ë(1024 -  (
exec
))

	)

66 
	#N_TXTOFF
(
x
) \

67 (
	`N_MAGIC
(
x
Ë=
ZMAGIC
 ? 
	`_N_HDROFF
((x)Ë+  (
exec
) : \

68 (
	`N_MAGIC
(
x
Ë=
QMAGIC
 ? 0 :  (
exec
)))

	)

69 
	#N_DATOFF
(
x
Ë(
	`N_TXTOFF
(xË+ (x).
a_ãxt
)

	)

70 
	#N_TRELOFF
(
x
Ë(
	`N_DATOFF
(xË+ (x).
a_d©a
)

	)

71 
	#N_DRELOFF
(
x
Ë(
	`N_TRELOFF
(xË+ 
	`N_TRSIZE
(x))

	)

72 
	#N_SYMOFF
(
x
Ë(
	`N_DRELOFF
(xË+ 
	`N_DRSIZE
(x))

	)

73 
	#N_STROFF
(
x
Ë(
	`N_SYMOFF
(xË+ 
	`N_SYMSIZE
(x))

	)

76 
	#N_TXTADDR
(
x
Ë(
	`N_MAGIC
(xË=
QMAGIC
 ? 4096 : 0)

	)

79 
	#SEGMENT_SIZE
 1024

	)

81 
	#_N_SEGMENT_ROUND
(
x
Ë(((xË+ 
SEGMENT_SIZE
 - 1Ë& ~(SEGMENT_SIZE - 1))

	)

82 
	#_N_TXTENDADDR
(
x
Ë(
	`N_TXTADDR
(x)+(x).
a_ãxt
)

	)

84 
	#N_DATADDR
(
x
) \

85 (
	`N_MAGIC
(
x
)==
OMAGIC
? (
	`_N_TXTENDADDR
(x)) \

86 : (
	`_N_SEGMENT_ROUND
 (
	`_N_TXTENDADDR
(
x
))))

	)

87 
	#N_BSSADDR
(
x
Ë(
	`N_DATADDR
(xË+ (x).
a_d©a
)

	)

89 #i‡!
deföed
 (
N_NLIST_DECLARED
)

90 
	s∆i°


94 *
	mn_«me
;

95 
∆i°
 *
	mn_√xt
;

96 
	mn_°rx
;

97 } 
	mn_un
;

98 
	mn_ty≥
;

99 
	mn_Ÿhî
;

100 
	mn_desc
;

101 
	mn_vÆue
;

105 
	#N_UNDF
 0

	)

106 
	#N_ABS
 2

	)

107 
	#N_TEXT
 4

	)

108 
	#N_DATA
 6

	)

109 
	#N_BSS
 8

	)

110 
	#N_FN
 15

	)

111 
	#N_EXT
 1

	)

112 
	#N_TYPE
 036

	)

113 
	#N_STAB
 0340

	)

114 
	#N_INDR
 0xa

	)

115 
	#N_SETA
 0x14

	)

116 
	#N_SETT
 0x16

	)

117 
	#N_SETD
 0x18

	)

118 
	#N_SETB
 0x1A

	)

119 
	#N_SETV
 0x1C

	)

121 #i‡!
deföed
 (
N_RELOCATION_INFO_DECLARED
)

127 
	sªloˇti⁄_öfo


129 
	mr_addªss
;

130 
	mr_symbﬁnum
:24;

131 
	mr_p¸ñ
:1;

132 
	mr_Àngth
:2;

133 
	mr_exã∫
:1;

134 
	mr_∑d
:4;

	@/usr/include/aio.h

23 #i‚de‡
_AIO_H


24 
	#_AIO_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<f˙é.h
>

28 
	~<sig«l.h
>

29 
	~<time.h
>

30 
	~<sys/ty≥s.h
>

32 
__BEGIN_DECLS


35 
	saiocb


37 
	maio_fûdes
;

38 
	maio_lio_›code
;

39 
	maio_ªq¥io
;

40 vﬁ©ûê*
	maio_buf
;

41 
size_t
 
	maio_nbyãs
;

42 
sigevít
 
	maio_sigevít
;

45 
aiocb
 *
	m__√xt_¥io
;

46 
	m__abs_¥io
;

47 
	m__pﬁicy
;

48 
	m__îr‹_code
;

49 
__ssize_t
 
	m__ªtu∫_vÆue
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	maio_off£t
;

53 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

55 
__off64_t
 
	maio_off£t
;

57 
	m__unu£d
[32];

62 #ifde‡
__USE_LARGEFILE64


63 
	saiocb64


65 
	maio_fûdes
;

66 
	maio_lio_›code
;

67 
	maio_ªq¥io
;

68 vﬁ©ûê*
	maio_buf
;

69 
size_t
 
	maio_nbyãs
;

70 
sigevít
 
	maio_sigevít
;

73 
aiocb
 *
	m__√xt_¥io
;

74 
	m__abs_¥io
;

75 
	m__pﬁicy
;

76 
	m__îr‹_code
;

77 
__ssize_t
 
	m__ªtu∫_vÆue
;

79 
__off64_t
 
	maio_off£t
;

80 
	m__unu£d
[32];

85 #ifde‡
__USE_GNU


88 
	saioöô


90 
	maio_thªads
;

91 
	maio_num
;

92 
	maio_locks
;

93 
	maio_u£dba
;

94 
	maio_debug
;

95 
	maio_numu£rs
;

96 
	maio_idÀ_time
;

98 
	maio_ª£rved
;

106 
	mAIO_CANCELED
,

107 
	#AIO_CANCELED
 
AIO_CANCELED


	)

108 
	mAIO_NOTCANCELED
,

109 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

110 
	mAIO_ALLDONE


111 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

118 
	mLIO_READ
,

119 
	#LIO_READ
 
LIO_READ


	)

120 
	mLIO_WRITE
,

121 
	#LIO_WRITE
 
LIO_WRITE


	)

122 
	mLIO_NOP


123 
	#LIO_NOP
 
LIO_NOP


	)

130 
	mLIO_WAIT
,

131 
	#LIO_WAIT
 
LIO_WAIT


	)

132 
	mLIO_NOWAIT


133 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

138 #ifde‡
__USE_GNU


139 
	$aio_öô
 (
__c⁄°
 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #i‚de‡
__USE_FILE_OFFSET64


145 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

150 
	$lio_li°io
 (
__mode
,

151 
aiocb
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

152 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

153 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
	$aio_îr‹
 (
__c⁄°
 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

158 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

162 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

169 
	$aio_su•íd
 (
__c⁄°
 
aiocb
 *__c⁄° 
__li°
[], 
__√¡
,

170 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

171 
	`__n⁄nuŒ
 ((1));

175 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

176 
__THROW
 
	`__n⁄nuŒ
 ((2));

178 #ifde‡
__REDIRECT_NTH


179 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

180 
	`__n⁄nuŒ
 ((1));

181 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

182 
	`__n⁄nuŒ
 ((1));

184 
	`__REDIRECT_NTH
 (
lio_li°io
,

185 (
__mode
,

186 
aiocb
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

187 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

188 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

190 
	`__REDIRECT_NTH
 (
aio_îr‹
, (
__c⁄°
 
aiocb
 *
__aiocbp
),

191 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

192 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

193 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

195 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

196 (
__fûdes
, 
aiocb
 *
__aiocbp
),

197 
aio_ˇn˚l64
);

199 
	`__REDIRECT_NTH
 (
aio_su•íd
,

200 (
__c⁄°
 
aiocb
 *__c⁄° 
__li°
[], 
__√¡
,

201 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
),

202 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

204 
	`__REDIRECT_NTH
 (
aio_fsync
,

205 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

206 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

209 
	#aio_ªad
 
aio_ªad64


	)

210 
	#aio_wrôe
 
aio_wrôe64


	)

211 
	#lio_li°io
 
lio_li°io64


	)

212 
	#aio_îr‹
 
aio_îr‹64


	)

213 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

214 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

215 
	#aio_su•íd
 
aio_su•íd64


	)

216 
	#aio_fsync
 
aio_fsync64


	)

220 #ifde‡
__USE_LARGEFILE64


221 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$lio_li°io64
 (
__mode
,

225 
aiocb64
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

226 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

227 
__THROW
 
	`__n⁄nuŒ
 ((2));

229 
	$aio_îr‹64
 (
__c⁄°
 
aiocb64
 *
__aiocbp
)

230 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

236 
	$aio_su•íd64
 (
__c⁄°
 
aiocb64
 *__c⁄° 
__li°
[], 
__√¡
,

237 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

238 
__THROW
 
	`__n⁄nuŒ
 ((1));

240 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2));

244 
__END_DECLS


	@/usr/include/aliases.h

19 #i‚de‡
_ALIASES_H


20 
	#_ALIASES_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

27 
__BEGIN_DECLS


30 
	sÆü£¡


32 *
	mÆüs_«me
;

33 
size_t
 
	mÆüs_membîs_Àn
;

34 **
	mÆüs_membîs
;

35 
	mÆüs_loˇl
;

40 
	$£èlü£¡
 (Ë
__THROW
;

43 
	$ídÆü£¡
 (Ë
__THROW
;

46 
Æü£¡
 *
	$gëÆü£¡
 (Ë
__THROW
;

49 
	$gëÆü£¡_r
 (
Æü£¡
 *
__ª°ri˘
 
__ªsu…_buf
,

50 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

51 
Æü£¡
 **
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

54 
Æü£¡
 *
	$gëÆüsby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

57 
	$gëÆüsby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

58 
Æü£¡
 *
__ª°ri˘
 
__ªsu…_buf
,

59 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

60 
Æü£¡
 **
__ª°ri˘
 
__ªsu…
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/ar.h

20 #i‚de‡
_AR_H


21 
	#_AR_H
 1

	)

23 
	~<sys/cdefs.h
>

29 
	#ARMAG
 "!<¨ch>\n"

	)

30 
	#SARMAG
 8

	)

32 
	#ARFMAG
 "`\n"

	)

34 
__BEGIN_DECLS


36 
	s¨_hdr


38 
	m¨_«me
[16];

39 
	m¨_d©e
[12];

40 
	m¨_uid
[6], 
	m¨_gid
[6];

41 
	m¨_mode
[8];

42 
	m¨_size
[10];

43 
	m¨_fmag
[2];

46 
	g__END_DECLS


	@/usr/include/argp.h

22 #i‚de‡
_ARGP_H


23 
	#_ARGP_H


	)

25 
	~<°dio.h
>

26 
	~<˘y≥.h
>

27 
	~<gë›t.h
>

28 
	~<limôs.h
>

30 
	#__√ed_îr‹_t


	)

31 
	~<î∫o.h
>

33 #i‚de‡
__c⁄°


34 
	#__c⁄°
 c⁄°

	)

37 #i‚de‡
__THROW


38 
	#__THROW


	)

40 #i‚de‡
__NTH


41 
	#__NTH
(
f˘
Ëf˘ 
__THROW


	)

44 #i‚de‡
__©åibuã__


46 #i‡
__GNUC__
 < 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 < 5Ë|| 
__STRICT_ANSI__


47 
	#__©åibuã__
(
S≥c
Ë

	)

51 #i‡
__GNUC__
 < 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 < 7Ë|| 
__STRICT_ANSI__


52 
	#__f‹m©__
 
f‹m©


	)

53 
	#__¥ötf__
 
¥ötf


	)

59 #i‚de‡
__ª°ri˘


60 #i‡! (2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
))

61 #i‡
deföed
 
ª°ri˘
 || 199901L <
__STDC_VERSION__


62 
	#__ª°ri˘
 
ª°ri˘


	)

64 
	#__ª°ri˘


	)

69 #i‚de‡
__îr‹_t_deföed


70 
	tîr‹_t
;

71 
	#__îr‹_t_deföed


	)

74 #ifde‡ 
__˝lu•lus


83 
	s¨gp_›ti⁄


87 
__c⁄°
 *
«me
;

91 
key
;

95 
__c⁄°
 *
¨g
;

98 
Êags
;

104 
__c⁄°
 *
doc
;

113 
group
;

117 
	#OPTION_ARG_OPTIONAL
 0x1

	)

120 
	#OPTION_HIDDEN
 0x2

	)

125 
	#OPTION_ALIAS
 0x4

	)

137 
	#OPTION_DOC
 0x8

	)

146 
	#OPTION_NO_USAGE
 0x10

	)

148 
¨gp
;

149 
¨gp_°©e
;

150 
¨gp_chûd
;

153 
îr‹_t
 (*
	t¨gp_∑r£r_t
Ë(
	t__key
, *
	t__¨g
,

154 
	t¨gp_°©e
 *
	t__°©e
);

161 
	#ARGP_ERR_UNKNOWN
 
E2BIG


	)

189 
	#ARGP_KEY_ARG
 0

	)

195 
	#ARGP_KEY_ARGS
 0x1000006

	)

197 
	#ARGP_KEY_END
 0x1000001

	)

203 
	#ARGP_KEY_NO_ARGS
 0x1000002

	)

207 
	#ARGP_KEY_INIT
 0x1000003

	)

209 
	#ARGP_KEY_FINI
 0x1000007

	)

212 
	#ARGP_KEY_SUCCESS
 0x1000004

	)

214 
	#ARGP_KEY_ERROR
 0x1000005

	)

222 
	s¨gp


226 
__c⁄°
 
¨gp_›ti⁄
 *
›ti⁄s
;

235 
¨gp_∑r£r_t
 
∑r£r
;

242 
__c⁄°
 *
¨gs_doc
;

247 
__c⁄°
 *
doc
;

255 
__c⁄°
 
¨gp_chûd
 *
chûdªn
;

267 *(*
hñp_fûãr
Ë(
__key
, 
__c⁄°
 *
__ãxt
, *
__öput
);

272 c⁄° *
¨gp_domaö
;

276 
	#ARGP_KEY_HELP_PRE_DOC
 0x2000001

	)

277 
	#ARGP_KEY_HELP_POST_DOC
 0x2000002

	)

278 
	#ARGP_KEY_HELP_HEADER
 0x2000003

	)

279 
	#ARGP_KEY_HELP_EXTRA
 0x2000004

	)

283 
	#ARGP_KEY_HELP_DUP_ARGS_NOTE
 0x2000005

	)

284 
	#ARGP_KEY_HELP_ARGS_DOC
 0x2000006

	)

288 
	s¨gp_chûd


291 
__c⁄°
 
¨gp
 *argp;

294 
Êags
;

300 
__c⁄°
 *
hódî
;

308 
group
;

313 
	s¨gp_°©e


316 
__c⁄°
 
¨gp
 *
roŸ_¨gp
;

319 
¨gc
;

320 **
¨gv
;

323 
√xt
;

326 
Êags
;

332 
¨g_num
;

337 
quŸed
;

340 *
öput
;

343 **
chûd_öputs
;

346 *
hook
;

350 *
«me
;

353 
FILE
 *
îr_°ªam
;

354 
FILE
 *
out_°ªam
;

356 *
p°©e
;

366 
	#ARGP_PARSE_ARGV0
 0x01

	)

372 
	#ARGP_NO_ERRS
 0x02

	)

384 
	#ARGP_NO_ARGS
 0x04

	)

388 
	#ARGP_IN_ORDER
 0x08

	)

392 
	#ARGP_NO_HELP
 0x10

	)

395 
	#ARGP_NO_EXIT
 0x20

	)

398 
	#ARGP_LONG_ONLY
 0x40

	)

401 
	#ARGP_SILENT
 (
ARGP_NO_EXIT
 | 
ARGP_NO_ERRS
 | 
ARGP_NO_HELP
)

	)

410 
îr‹_t
 
¨gp_∑r£
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

411 
__¨gc
, **
__ª°ri˘
 
__¨gv
,

412 
__Êags
, *
__ª°ri˘
 
__¨g_ödex
,

413 *
__ª°ri˘
 
__öput
);

414 
îr‹_t
 
__¨gp_∑r£
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

415 
__¨gc
, **
__ª°ri˘
 
__¨gv
,

416 
__Êags
, *
__ª°ri˘
 
__¨g_ödex
,

417 *
__ª°ri˘
 
__öput
);

425 
__c⁄°
 *
¨gp_¥ogøm_vîsi⁄
;

432 (*
¨gp_¥ogøm_vîsi⁄_hook
Ë(
FILE
 *
__ª°ri˘
 
__°ªam
,

433 
¨gp_°©e
 *
__ª°ri˘


434 
__°©e
);

441 
__c⁄°
 *
¨gp_¥ogøm_bug_addªss
;

446 
îr‹_t
 
¨gp_îr_exô_°©us
;

449 
	#ARGP_HELP_USAGE
 0x01

	)

450 
	#ARGP_HELP_SHORT_USAGE
 0x02

	)

451 
	#ARGP_HELP_SEE
 0x04

	)

452 
	#ARGP_HELP_LONG
 0x08

	)

453 
	#ARGP_HELP_PRE_DOC
 0x10

	)

454 
	#ARGP_HELP_POST_DOC
 0x20

	)

455 
	#ARGP_HELP_DOC
 (
ARGP_HELP_PRE_DOC
 | 
ARGP_HELP_POST_DOC
)

	)

456 
	#ARGP_HELP_BUG_ADDR
 0x40

	)

457 
	#ARGP_HELP_LONG_ONLY
 0x80

	)

461 
	#ARGP_HELP_EXIT_ERR
 0x100

	)

462 
	#ARGP_HELP_EXIT_OK
 0x200

	)

466 
	#ARGP_HELP_STD_ERR
 \

467 (
ARGP_HELP_SEE
 | 
ARGP_HELP_EXIT_ERR
)

	)

470 
	#ARGP_HELP_STD_USAGE
 \

471 (
ARGP_HELP_SHORT_USAGE
 | 
ARGP_HELP_SEE
 | 
ARGP_HELP_EXIT_ERR
)

	)

473 
	#ARGP_HELP_STD_HELP
 \

474 (
ARGP_HELP_SHORT_USAGE
 | 
ARGP_HELP_LONG
 | 
ARGP_HELP_EXIT_OK
 \

475 | 
ARGP_HELP_DOC
 | 
ARGP_HELP_BUG_ADDR
)

	)

479 
¨gp_hñp
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

480 
FILE
 *
__ª°ri˘
 
__°ªam
,

481 
__Êags
, *
__ª°ri˘
 
__«me
);

482 
__¨gp_hñp
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

483 
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êags
,

484 *
__«me
);

496 
¨gp_°©e_hñp
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

497 
FILE
 *
__ª°ri˘
 
__°ªam
,

498 
__Êags
);

499 
__¨gp_°©e_hñp
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

500 
FILE
 *
__ª°ri˘
 
__°ªam
,

501 
__Êags
);

504 
¨gp_ußge
 (
__c⁄°
 
¨gp_°©e
 *
__°©e
);

505 
__¨gp_ußge
 (
__c⁄°
 
¨gp_°©e
 *
__°©e
);

510 
¨gp_îr‹
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

511 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

512 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3)));

513 
__¨gp_îr‹
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

514 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

515 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3)));

525 
¨gp_Áûuª
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

526 
__°©us
, 
__î∫um
,

527 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

528 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 4, 5)));

529 
__¨gp_Áûuª
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

530 
__°©us
, 
__î∫um
,

531 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

532 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 4, 5)));

535 
_›ti⁄_is_sh‹t
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

536 
__›ti⁄_is_sh‹t
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

540 
_›ti⁄_is_íd
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

541 
__›ti⁄_is_íd
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

545 *
_¨gp_öput
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

546 
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
)

547 
__THROW
;

548 *
__¨gp_öput
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

549 
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
)

550 
__THROW
;

552 #ifde‡
__USE_EXTERN_INLINES


554 #i‡!
_LIBC


555 
	#__¨gp_ußge
 
¨gp_ußge


	)

556 
	#__¨gp_°©e_hñp
 
¨gp_°©e_hñp


	)

557 
	#__›ti⁄_is_sh‹t
 
_›ti⁄_is_sh‹t


	)

558 
	#__›ti⁄_is_íd
 
_›ti⁄_is_íd


	)

561 #i‚de‡
ARGP_EI


562 
	#ARGP_EI
 
__exã∫_ölöe


	)

565 
ARGP_EI
 

566 
__¨gp_ußge
 (
__c⁄°
 
¨gp_°©e
 *
__°©e
)

568 
__¨gp_°©e_hñp
 (
__°©e
, 
°dîr
, 
ARGP_HELP_STD_USAGE
);

571 
ARGP_EI
 

572 
__NTH
 (
__›ti⁄_is_sh‹t
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
))

574 i‡(
	g__›t
->
	gÊags
 & 
	gOPTION_DOC
)

578 
	g__key
 = 
__›t
->
key
;

579  
	g__key
 > 0 && __key <
UCHAR_MAX
 && 
i•röt
 (
__key
);

583 
ARGP_EI
 

584 
__NTH
 (
__›ti⁄_is_íd
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
))

586  !
	g__›t
->
	gkey
 && !__›t->
	g«me
 && !__›t->
	gdoc
 && !__›t->
	ggroup
;

589 #i‡!
_LIBC


590 #unde‡
__¨gp_ußge


591 #unde‡
__¨gp_°©e_hñp


592 #unde‡
__›ti⁄_is_sh‹t


593 #unde‡
__›ti⁄_is_íd


597 #ifde‡ 
__˝lu•lus


	@/usr/include/argz.h

20 #i‚de‡
_ARGZ_H


21 
	#_ARGZ_H
 1

	)

23 
	~<„©uªs.h
>

25 
	#__√ed_îr‹_t


	)

26 
	~<î∫o.h
>

27 
	~<°rög.h
>

29 #i‚de‡
__c⁄°


30 
	#__c⁄°
 c⁄°

	)

33 #i‚de‡
__îr‹_t_deföed


34 
	tîr‹_t
;

38 
__BEGIN_DECLS


43 
îr‹_t
 
	$__¨gz_¸óã
 (*
__c⁄°
 
__¨gv
[], **
__ª°ri˘
 
__¨gz
,

44 
size_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

45 
îr‹_t
 
	$¨gz_¸óã
 (*
__c⁄°
 
__¨gv
[], **
__ª°ri˘
 
__¨gz
,

46 
size_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

52 
îr‹_t
 
	$__¨gz_¸óã_£p
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

53 
__£p
, **
__ª°ri˘
 
__¨gz
,

54 
size_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

55 
îr‹_t
 
	$¨gz_¸óã_£p
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

56 
__£p
, **
__ª°ri˘
 
__¨gz
,

57 
size_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

60 
size_t
 
	$__¨gz_cou¡
 (
__c⁄°
 *
__¨gz
, 
size_t
 
__Àn
)

61 
__THROW
 
__©åibuã_puª__
;

62 
size_t
 
	$¨gz_cou¡
 (
__c⁄°
 *
__¨gz
, 
size_t
 
__Àn
)

63 
__THROW
 
__©åibuã_puª__
;

67 
	$__¨gz_exåa˘
 (
__c⁄°
 *
__ª°ri˘
 
__¨gz
, 
size_t
 
__Àn
,

68 **
__ª°ri˘
 
__¨gv
Ë
__THROW
;

69 
	$¨gz_exåa˘
 (
__c⁄°
 *
__ª°ri˘
 
__¨gz
, 
size_t
 
__Àn
,

70 **
__ª°ri˘
 
__¨gv
Ë
__THROW
;

74 
	$__¨gz_°rögify
 (*
__¨gz
, 
size_t
 
__Àn
, 
__£p
Ë
__THROW
;

75 
	$¨gz_°rögify
 (*
__¨gz
, 
size_t
 
__Àn
, 
__£p
Ë
__THROW
;

78 
îr‹_t
 
	$__¨gz_≠≥nd
 (**
__ª°ri˘
 
__¨gz
,

79 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

80 
__c⁄°
 *
__ª°ri˘
 
__buf
, 
size_t
 
_buf_Àn
)

81 
__THROW
;

82 
îr‹_t
 
	$¨gz_≠≥nd
 (**
__ª°ri˘
 
__¨gz
,

83 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

84 
__c⁄°
 *
__ª°ri˘
 
__buf
, 
size_t
 
__buf_Àn
)

85 
__THROW
;

88 
îr‹_t
 
	$__¨gz_add
 (**
__ª°ri˘
 
__¨gz
,

89 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

90 
__c⁄°
 *
__ª°ri˘
 
__°r
Ë
__THROW
;

91 
îr‹_t
 
	$¨gz_add
 (**
__ª°ri˘
 
__¨gz
,

92 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

93 
__c⁄°
 *
__ª°ri˘
 
__°r
Ë
__THROW
;

97 
îr‹_t
 
	$__¨gz_add_£p
 (**
__ª°ri˘
 
__¨gz
,

98 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

99 
__c⁄°
 *
__ª°ri˘
 
__°rög
, 
__dñim
)

100 
__THROW
;

101 
îr‹_t
 
	$¨gz_add_£p
 (**
__ª°ri˘
 
__¨gz
,

102 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

103 
__c⁄°
 *
__ª°ri˘
 
__°rög
, 
__dñim
)

104 
__THROW
;

107 
	$__¨gz_dñëe
 (**
__ª°ri˘
 
__¨gz
,

108 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

109 *
__ª°ri˘
 
__íåy
Ë
__THROW
;

110 
	$¨gz_dñëe
 (**
__ª°ri˘
 
__¨gz
,

111 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

112 *
__ª°ri˘
 
__íåy
Ë
__THROW
;

120 
îr‹_t
 
	$__¨gz_ö£π
 (**
__ª°ri˘
 
__¨gz
,

121 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

122 *
__ª°ri˘
 
__bef‹e
,

123 
__c⁄°
 *
__ª°ri˘
 
__íåy
Ë
__THROW
;

124 
îr‹_t
 
	$¨gz_ö£π
 (**
__ª°ri˘
 
__¨gz
,

125 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

126 *
__ª°ri˘
 
__bef‹e
,

127 
__c⁄°
 *
__ª°ri˘
 
__íåy
Ë
__THROW
;

132 
îr‹_t
 
	`__¨gz_ª∂a˚
 (**
__ª°ri˘
 
__¨gz
,

133 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

134 
__c⁄°
 *
__ª°ri˘
 
__°r
,

135 
__c⁄°
 *
__ª°ri˘
 
__wôh
,

136 *
__ª°ri˘
 
__ª∂a˚_cou¡
);

137 
îr‹_t
 
	`¨gz_ª∂a˚
 (**
__ª°ri˘
 
__¨gz
,

138 
size_t
 *
__ª°ri˘
 
__¨gz_Àn
,

139 
__c⁄°
 *
__ª°ri˘
 
__°r
,

140 
__c⁄°
 *
__ª°ri˘
 
__wôh
,

141 *
__ª°ri˘
 
__ª∂a˚_cou¡
);

157 *
	$__¨gz_√xt
 (
__c⁄°
 *
__ª°ri˘
 
__¨gz
, 
size_t
 
__¨gz_Àn
,

158 
__c⁄°
 *
__ª°ri˘
 
__íåy
Ë
__THROW
;

159 *
	$¨gz_√xt
 (
__c⁄°
 *
__ª°ri˘
 
__¨gz
, 
size_t
 
__¨gz_Àn
,

160 
__c⁄°
 *
__ª°ri˘
 
__íåy
Ë
__THROW
;

162 #ifde‡
__USE_EXTERN_INLINES


163 
__exã∫_ölöe
 *

164 
	`__NTH
 (
	$__¨gz_√xt
 (
__c⁄°
 *
__¨gz
, 
size_t
 
__¨gz_Àn
,

165 
__c⁄°
 *
__íåy
))

167 i‡(
__íåy
)

169 i‡(
__íåy
 < 
__¨gz
 + 
__¨gz_Àn
)

170 
__íåy
 = 
	`°rchr
 (__entry, '\0') + 1;

172  
__íåy
 >
__¨gz
 + 
__¨gz_Àn
 ? (*Ë
NULL
 : (*) __entry;

175  
__¨gz_Àn
 > 0 ? (*Ë
__¨gz
 : 0;

176 
	}
}

177 
__exã∫_ölöe
 *

178 
__NTH
 (
	$¨gz_√xt
 (
__c⁄°
 *
__¨gz
, 
size_t
 
__¨gz_Àn
,

179 
__c⁄°
 *
__íåy
))

181  
	`__¨gz_√xt
 (
__¨gz
, 
__¨gz_Àn
, 
__íåy
);

182 
	}
}

185 
	g__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/autosprintf.h

19 #i‚de‡
_AUTOSPRINTF_H


20 
	#_AUTOSPRINTF_H


	)

22 #i‚de‡
__©åibuã__


24 #i‡
__GNUC__
 < 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 < 5Ë|| 
__STRICT_ANSI__


25 
	#__©åibuã__
(
S≥c
Ë

	)

29 #i‡
__GNUC__
 < 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 < 7)

30 
	#__f‹m©__
 
f‹m©


	)

31 
	#__¥ötf__
 
¥ötf


	)

35 
	~<°rög
>

36 
	~<io°ªam
>

38 
«me•a˚
 
	ggnu


42 ˛as†
	cauto•rötf


44 
	gpublic
:

46 
auto•rötf
 (c⁄° *
f‹m©
, ...)

47 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3)));

49 
auto•rötf
 (c⁄°áuto•rötf& 
§c
);

51 ~
auto•rötf
 ();

53 
›î©‹
 * () const;

54 
›î©‹
 
	g°d
::
°rög
 () const;

56 
‰õnd
 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<< (
°d
::o°ªam& 
°ªam
, c⁄° 
	gauto•rötf
& 
	gtmp
)

58 
	g°ªam
 << (
	gtmp
.
	g°r
 ?Åmp.str : "(error ináutosprintf)");

59  
	g°ªam
;

61 
	g¥iv©e
:

62 *
°r
;

	@/usr/include/byteswap.h

19 #i‚de‡
_BYTESWAP_H


20 
	#_BYTESWAP_H
 1

	)

23 
	~<bôs/byãsw≠.h
>

30 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

33 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

35 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/complex.h

23 #i‚de‡
_COMPLEX_H


24 
	#_COMPLEX_H
 1

	)

26 
	~<„©uªs.h
>

29 
	~<bôs/m©hdef.h
>

31 
	g__BEGIN_DECLS


36 #i‡
__GNUC_PREREQ
 (2, 7) && !__GNUC_PREREQ (2, 97)

37 
	#_Com∂ex
 
__com∂ex__


	)

40 
	#com∂ex
 
_Com∂ex


	)

45 
	#_Com∂ex_I
 (
__exãnsi⁄__
 1.0
iF
)

	)

49 #unde‡
I


50 
	#I
 
_Com∂ex_I


	)

57 
	#__MATHCALL
(
fun˘i⁄
, 
¨gs
) \

58 
	`__MATHDECL
 (
_MdoubÀ_com∂ex_
,
fun˘i⁄
, 
¨gs
)

	)

59 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
¨gs
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
), 
¨gs
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
Ë
	)
name

67 
	~<bôs/cm©hˇŒs.h
>

68 #unde‡
_MdoubÀ_


69 #unde‡
__MATH_PRECNAME


72 #i‚de‡
_MÊﬂt_


73 
	#_MÊﬂt_
 

	)

75 
	#_MdoubÀ_
 
_MÊﬂt_


	)

76 #ifde‡
__STDC__


77 
	#__MATH_PRECNAME
(
«me
Ë«me##
f


	)

79 
	#__MATH_PRECNAME
(
«me
Ë«mê
f


	)

81 
	~<bôs/cm©hˇŒs.h
>

82 #unde‡
_MdoubÀ_


83 #unde‡
__MATH_PRECNAME


87 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

88 && (!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

89 || 
deföed
 
__LDBL_COMPAT
)

90 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


91 #unde‡
__MATHDECL_1


92 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
¨gs
) \

93 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
), 
¨gs
, fun˘i⁄)

	)

96 #i‚de‡
_Ml⁄g_doubÀ_


97 
	#_Ml⁄g_doubÀ_
 

	)

99 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

100 #ifde‡
__STDC__


101 
	#__MATH_PRECNAME
(
«me
Ë«me##
l


	)

103 
	#__MATH_PRECNAME
(
«me
Ë«mê
l


	)

105 
	~<bôs/cm©hˇŒs.h
>

107 #unde‡
_MdoubÀ_


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATHDECL_1


110 #unde‡
__MATHDECL


111 #unde‡
__MATHCALL


113 
__END_DECLS


	@/usr/include/cpio.h

21 #i‚de‡
_CPIO_H


22 
	#_CPIO_H
 1

	)

47 
	#MAGIC
 "070707"

	)

51 
	#C_IRUSR
 000400

	)

52 
	#C_IWUSR
 000200

	)

53 
	#C_IXUSR
 000100

	)

54 
	#C_IRGRP
 000040

	)

55 
	#C_IWGRP
 000020

	)

56 
	#C_IXGRP
 000010

	)

57 
	#C_IROTH
 000004

	)

58 
	#C_IWOTH
 000002

	)

59 
	#C_IXOTH
 000001

	)

61 
	#C_ISUID
 004000

	)

62 
	#C_ISGID
 002000

	)

63 
	#C_ISVTX
 001000

	)

65 
	#C_ISBLK
 060000

	)

66 
	#C_ISCHR
 020000

	)

67 
	#C_ISDIR
 040000

	)

68 
	#C_ISFIFO
 010000

	)

69 
	#C_ISSOCK
 0140000

	)

70 
	#C_ISLNK
 0120000

	)

71 
	#C_ISCTG
 0110000

	)

72 
	#C_ISREG
 0100000

	)

	@/usr/include/crypt.h

25 #i‚de‡
_CRYPT_H


26 
	#_CRYPT_H
 1

	)

28 
	~<„©uªs.h
>

30 
__BEGIN_DECLS


33 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

34 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

37 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

41 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

43 #ifde‡
__USE_GNU


46 
	s¸y±_d©a


48 
keysched
[16 * 8];

49 
sb0
[32768];

50 
sb1
[32768];

51 
sb2
[32768];

52 
sb3
[32768];

54 
¸y±_3_buf
[14];

55 
cuºít_ß…
[2];

56 
cuºít_ß…bôs
;

57 
dúe˘i⁄
, 
öôülized
;

60 *
	$¸y±_r
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
,

61 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

62 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

64 
	$£tkey_r
 (
__c⁄°
 *
__key
,

65 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

66 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

68 
	$í¸y±_r
 (*
__libc_block
, 
__edÊag
,

69 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

70 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

73 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/curses.h

37 #i‚de‡
__NCURSES_H


38 
	#__NCURSES_H


	)

40 
	#CURSES
 1

	)

41 
	#CURSES_H
 1

	)

44 
	#NCURSES_VERSION_MAJOR
 5

	)

45 
	#NCURSES_VERSION_MINOR
 9

	)

46 
	#NCURSES_VERSION_PATCH
 20110404

	)

49 #unde‡
NCURSES_VERSION


50 
	#NCURSES_VERSION
 "5.9"

	)

55 
	#NCURSES_MOUSE_VERSION
 1

	)

60 
	~<ncur£s_dŒ.h
>

65 #i‚de‡
NCURSES_ENABLE_STDBOOL_H


66 
	#NCURSES_ENABLE_STDBOOL_H
 1

	)

73 #ifde‡
NCURSES_NOMACROS


74 #i‚de‡
NCURSES_ATTR_T


75 
	#NCURSES_ATTR_T
 
©å_t


	)

79 #i‚de‡
NCURSES_ATTR_T


80 
	#NCURSES_ATTR_T
 

	)

87 #unde‡
NCURSES_CONST


88 
	#NCURSES_CONST
 c⁄°

	)

90 #unde‡
NCURSES_INLINE


91 
	#NCURSES_INLINE
 
ölöe


	)

96 #unde‡
NCURSES_COLOR_T


97 
	#NCURSES_COLOR_T
 

	)

102 #i‚de‡
NCURSES_OPAQUE


103 
	#NCURSES_OPAQUE
 0

	)

109 #i‚de‡
NCURSES_REENTRANT


110 
	#NCURSES_REENTRANT
 0

	)

116 #unde‡
NCURSES_INTEROP_FUNCS


117 
	#NCURSES_INTEROP_FUNCS
 0

	)

122 #unde‡
NCURSES_SIZE_T


123 
	#NCURSES_SIZE_T
 

	)

128 #unde‡
NCURSES_TPARM_VARARGS


129 
	#NCURSES_TPARM_VARARGS
 1

	)

136 #unde‡
NCURSES_CH_T


137 
	#NCURSES_CH_T
 
chty≥


	)

139 #i‡0 && 
deföed
(
_LP64
)

140 
	tchty≥
;

141 
	tmmask_t
;

143 
	tchty≥
;

144 
	tmmask_t
;

150 
	~<°dio.h
>

156 #unde‡
NCURSES_WIDECHAR


157 #i‡
deföed
(
_XOPEN_SOURCE_EXTENDED
Ë|| deföed(
_XPG5
)

158 
	#NCURSES_WIDECHAR


	)

161 
	~<°d¨g.h
>

162 #ifde‡
NCURSES_WIDECHAR


163 
	~<°ddef.h
>

178 #unde‡
TRUE


179 
	#TRUE
 1

	)

181 #unde‡
FALSE


182 
	#FALSE
 0

	)

184 
	tNCURSES_BOOL
;

186 #i‡
deföed
(
__˝lu•lus
)

189 
	#NCURSES_BOOL
 
boﬁ


	)

193 #i‡
NCURSES_ENABLE_STDBOOL_H


194 
	~<°dboﬁ.h
>

196 
	#NCURSES_BOOL
 
boﬁ


	)

199 #unde‡
boﬁ


200 
	#boﬁ
 
NCURSES_BOOL


	)

205 #ifde‡
__˝lu•lus


207 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

209 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë—y≥)(vÆue)

	)

216 
	#WA_ATTRIBUTES
 
A_ATTRIBUTES


	)

217 
	#WA_NORMAL
 
A_NORMAL


	)

218 
	#WA_STANDOUT
 
A_STANDOUT


	)

219 
	#WA_UNDERLINE
 
A_UNDERLINE


	)

220 
	#WA_REVERSE
 
A_REVERSE


	)

221 
	#WA_BLINK
 
A_BLINK


	)

222 
	#WA_DIM
 
A_DIM


	)

223 
	#WA_BOLD
 
A_BOLD


	)

224 
	#WA_ALTCHARSET
 
A_ALTCHARSET


	)

225 
	#WA_INVIS
 
A_INVIS


	)

226 
	#WA_PROTECT
 
A_PROTECT


	)

227 
	#WA_HORIZONTAL
 
A_HORIZONTAL


	)

228 
	#WA_LEFT
 
A_LEFT


	)

229 
	#WA_LOW
 
A_LOW


	)

230 
	#WA_RIGHT
 
A_RIGHT


	)

231 
	#WA_TOP
 
A_TOP


	)

232 
	#WA_VERTICAL
 
A_VERTICAL


	)

235 
	#COLOR_BLACK
 0

	)

236 
	#COLOR_RED
 1

	)

237 
	#COLOR_GREEN
 2

	)

238 
	#COLOR_YELLOW
 3

	)

239 
	#COLOR_BLUE
 4

	)

240 
	#COLOR_MAGENTA
 5

	)

241 
	#COLOR_CYAN
 6

	)

242 
	#COLOR_WHITE
 7

	)

246 #i‡0 || 
NCURSES_REENTRANT


247 
NCURSES_WRAPPED_VAR
(
chty≥
*, 
acs_m≠
);

248 
	#acs_m≠
 
	`NCURSES_PUBLIC_VAR
(
	`acs_m≠
())

	)

250 
NCURSES_EXPORT_VAR
(
chty≥
Ë
acs_m≠
[];

253 
	#NCURSES_ACS
(
c
Ë(
acs_m≠
[
	`NCURSES_CAST
(,c)])

	)

256 
	#ACS_ULCORNER
 
	`NCURSES_ACS
('l'Ë

	)

257 
	#ACS_LLCORNER
 
	`NCURSES_ACS
('m'Ë

	)

258 
	#ACS_URCORNER
 
	`NCURSES_ACS
('k'Ë

	)

259 
	#ACS_LRCORNER
 
	`NCURSES_ACS
('j'Ë

	)

260 
	#ACS_LTEE
 
	`NCURSES_ACS
('t'Ë

	)

261 
	#ACS_RTEE
 
	`NCURSES_ACS
('u'Ë

	)

262 
	#ACS_BTEE
 
	`NCURSES_ACS
('v'Ë

	)

263 
	#ACS_TTEE
 
	`NCURSES_ACS
('w'Ë

	)

264 
	#ACS_HLINE
 
	`NCURSES_ACS
('q'Ë

	)

265 
	#ACS_VLINE
 
	`NCURSES_ACS
('x'Ë

	)

266 
	#ACS_PLUS
 
	`NCURSES_ACS
('n'Ë

	)

267 
	#ACS_S1
 
	`NCURSES_ACS
('o'Ë

	)

268 
	#ACS_S9
 
	`NCURSES_ACS
('s'Ë

	)

269 
	#ACS_DIAMOND
 
	`NCURSES_ACS
('`'Ë

	)

270 
	#ACS_CKBOARD
 
	`NCURSES_ACS
('a'Ë

	)

271 
	#ACS_DEGREE
 
	`NCURSES_ACS
('f'Ë

	)

272 
	#ACS_PLMINUS
 
	`NCURSES_ACS
('g'Ë

	)

273 
	#ACS_BULLET
 
	`NCURSES_ACS
('~'Ë

	)

275 
	#ACS_LARROW
 
	`NCURSES_ACS
(','Ë

	)

276 
	#ACS_RARROW
 
	`NCURSES_ACS
('+'Ë

	)

277 
	#ACS_DARROW
 
	`NCURSES_ACS
('.'Ë

	)

278 
	#ACS_UARROW
 
	`NCURSES_ACS
('-'Ë

	)

279 
	#ACS_BOARD
 
	`NCURSES_ACS
('h'Ë

	)

280 
	#ACS_LANTERN
 
	`NCURSES_ACS
('i'Ë

	)

281 
	#ACS_BLOCK
 
	`NCURSES_ACS
('0'Ë

	)

287 
	#ACS_S3
 
	`NCURSES_ACS
('p'Ë

	)

288 
	#ACS_S7
 
	`NCURSES_ACS
('r'Ë

	)

289 
	#ACS_LEQUAL
 
	`NCURSES_ACS
('y'Ë

	)

290 
	#ACS_GEQUAL
 
	`NCURSES_ACS
('z'Ë

	)

291 
	#ACS_PI
 
	`NCURSES_ACS
('{'Ë

	)

292 
	#ACS_NEQUAL
 
	`NCURSES_ACS
('|'Ë

	)

293 
	#ACS_STERLING
 
	`NCURSES_ACS
('}'Ë

	)

301 
	#ACS_BSSB
 
ACS_ULCORNER


	)

302 
	#ACS_SSBB
 
ACS_LLCORNER


	)

303 
	#ACS_BBSS
 
ACS_URCORNER


	)

304 
	#ACS_SBBS
 
ACS_LRCORNER


	)

305 
	#ACS_SBSS
 
ACS_RTEE


	)

306 
	#ACS_SSSB
 
ACS_LTEE


	)

307 
	#ACS_SSBS
 
ACS_BTEE


	)

308 
	#ACS_BSSS
 
ACS_TTEE


	)

309 
	#ACS_BSBS
 
ACS_HLINE


	)

310 
	#ACS_SBSB
 
ACS_VLINE


	)

311 
	#ACS_SSSS
 
ACS_PLUS


	)

313 #unde‡
ERR


314 
	#ERR
 (-1)

	)

316 #unde‡
OK


317 
	#OK
 (0)

	)

320 
	#_SUBWIN
 0x01

	)

321 
	#_ENDLINE
 0x02

	)

322 
	#_FULLWIN
 0x04

	)

323 
	#_SCROLLWIN
 0x08

	)

324 
	#_ISPAD
 0x10

	)

325 
	#_HASMOVED
 0x20

	)

326 
	#_WRAPPED
 0x40

	)

332 
	#_NOCHANGE
 -1

	)

338 
	#_NEWINDEX
 -1

	)

340 
s¸ìn
 
	tSCREEN
;

341 
_wö_°
 
	tWINDOW
;

343 
chty≥
 
	t©å_t
;

345 #ifde‡
NCURSES_WIDECHAR


348 #ifde‡
mbÀn


349 #unde‡
mbÀn


351 
	~<libutf8.h
>

355 
	~<wch¨.h
>

359 
	twch¨_t
;

363 
	twöt_t
;

372 
	#CCHARW_MAX
 5

	)

375 
©å_t
 
	g©å
;

376 
wch¨_t
 
	gch¨s
[
CCHARW_MAX
];

378 #unde‡
NCURSES_EXT_COLORS


379 
	#NCURSES_EXT_COLORS
 20110404

	)

380 
	gext_cﬁ‹
;

383 
	tcch¨_t
;

387 #i‡!
NCURSES_OPAQUE


388 
	gld©
;

390 
	s_wö_°


392 
NCURSES_SIZE_T
 
	g_cury
, 
	g_curx
;

395 
NCURSES_SIZE_T
 
	g_maxy
, 
	g_maxx
;

396 
NCURSES_SIZE_T
 
	g_begy
, 
	g_begx
;

398 
	g_Êags
;

401 
©å_t
 
	g_©ås
;

402 
chty≥
 
	g_bkgd
;

405 
boﬁ
 
	g_nŸimeout
;

406 
boﬁ
 
	g_˛ór
;

407 
boﬁ
 
	g_Àaveok
;

408 
boﬁ
 
	g_s¸ﬁl
;

409 
boﬁ
 
	g_idlok
;

410 
boﬁ
 
	g_idcok
;

411 
boﬁ
 
	g_immed
;

412 
boﬁ
 
	g_sync
;

413 
boﬁ
 
	g_u£_key∑d
;

414 
	g_dñay
;

416 
ld©
 *
	g_löe
;

419 
NCURSES_SIZE_T
 
	g_ªgt›
;

420 
NCURSES_SIZE_T
 
	g_ªgbŸtom
;

423 
	g_∑rx
;

424 
	g_∑ry
;

425 
WINDOW
 *
	g_∑ª¡
;

428 
	spd©


430 
NCURSES_SIZE_T
 
	g_∑d_y
, 
	g_∑d_x
;

431 
NCURSES_SIZE_T
 
	g_∑d_t›
, 
	g_∑d_À·
;

432 
NCURSES_SIZE_T
 
	g_∑d_bŸtom
, 
	g_∑d_right
;

433 } 
	g_∑d
;

435 
NCURSES_SIZE_T
 
	g_yoff£t
;

437 #ifde‡
NCURSES_WIDECHAR


438 
cch¨_t
 
	g_bkg∫d
;

440 
	g_cﬁ‹
;

450 #ifde‡
NCURSES_WGETCH_EVENTS


451 #i‡!
deföed
(
__BEOS__
Ë|| deföed(
__HAIKU__
)

453 
	#NCURSES_EVENT_VERSION
 1

	)

459 
	#_NC_EVENT_TIMEOUT_MSEC
 1

	)

460 
	#_NC_EVENT_FILE
 2

	)

461 
	#_NC_EVENT_FILE_READABLE
 2

	)

463 
	#_NC_EVENT_FILE_WRITABLE
 4

	)

464 
	#_NC_EVENT_FILE_EXCEPTION
 8

	)

469 
	gty≥
;

472 
	gtimeout_m£c
;

475 
	gÊags
;

476 
	gfd
;

477 
	gªsu…
;

478 } 
	g„v
;

479 } 
	gd©a
;

480 } 
	t_nc_evít
;

484 
	gcou¡
;

485 
	gªsu…_Êags
;

486 
_nc_evít
 *
	gevíts
[1];

487 } 
	t_nc_evíéi°
;

489 
NCURSES_EXPORT
(Ë
wgëch_evíts
 (
WINDOW
 *, 
_nc_evíéi°
 *);

490 
NCURSES_EXPORT
(Ë
wgën°r_evíts
 (
WINDOW
 *,*,,
_nc_evíéi°
 *);

502 #i‡!(
deföed
(
__GNUC__
Ë|| deföed(
__GNUG__
Ë|| deföed(
__©åibuã__
))

503 
	#__©åibuã__
(
p
Ë

	)

514 #i‚de‡
GCC_PRINTFLIKE


515 #i‡
deföed
(
GCC_PRINTF
Ë&& !deföed(
¥ötf
)

516 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,fmt,v¨)))

	)

518 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë

	)

522 #i‚de‡
GCC_SCANFLIKE


523 #i‡
deföed
(
GCC_SCANF
Ë&& !deföed(
sˇnf
)

524 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
sˇnf
,fmt,v¨)))

	)

526 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë

	)

530 #i‚def 
GCC_NORETURN


531 
	#GCC_NORETURN


	)

534 #i‚def 
GCC_UNUSED


535 
	#GCC_UNUSED


	)

542 (*
	gNCURSES_OUTC
)();

551 
NCURSES_EXPORT
(Ë
addch
 (c⁄° 
chty≥
);

552 
NCURSES_EXPORT
(Ë
addchn°r
 (c⁄° 
chty≥
 *, );

553 
NCURSES_EXPORT
(Ë
addch°r
 (c⁄° 
chty≥
 *);

554 
NCURSES_EXPORT
(Ë
addn°r
 (const *, );

555 
NCURSES_EXPORT
(Ë
add°r
 (const *);

556 
NCURSES_EXPORT
(Ë
©åoff
 (
NCURSES_ATTR_T
);

557 
NCURSES_EXPORT
(Ë
©å⁄
 (
NCURSES_ATTR_T
);

558 
NCURSES_EXPORT
(Ë
©å£t
 (
NCURSES_ATTR_T
);

559 
NCURSES_EXPORT
(Ë
©å_gë
 (
©å_t
 *, *, *);

560 
NCURSES_EXPORT
(Ë
©å_off
 (
©å_t
, *);

561 
NCURSES_EXPORT
(Ë
©å_⁄
 (
©å_t
, *);

562 
NCURSES_EXPORT
(Ë
©å_£t
 (
©å_t
, , *);

563 
NCURSES_EXPORT
(Ë
baudøã
 ();

564 
NCURSES_EXPORT
(Ë
bìp
 ();

565 
NCURSES_EXPORT
(Ë
bkgd
 (
chty≥
);

566 
NCURSES_EXPORT
(Ë
bkgd£t
 (
chty≥
);

567 
NCURSES_EXPORT
(Ë
b‹dî
 (
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

568 
NCURSES_EXPORT
(Ë
box
 (
WINDOW
 *, 
chty≥
, chtype);

569 
NCURSES_EXPORT
(
boﬁ
Ë
ˇn_ch™ge_cﬁ‹
 ();

570 
NCURSES_EXPORT
(Ë
cbªak
 ();

571 
NCURSES_EXPORT
(Ë
chg©
 (, 
©å_t
, , const *);

572 
NCURSES_EXPORT
(Ë
˛ór
 ();

573 
NCURSES_EXPORT
(Ë
˛órok
 (
WINDOW
 *,
boﬁ
);

574 
NCURSES_EXPORT
(Ë
˛πobŸ
 ();

575 
NCURSES_EXPORT
(Ë
˛π€ﬁ
 ();

576 
NCURSES_EXPORT
(Ë
cﬁ‹_c⁄ã¡
 (,*,*,*);

577 
NCURSES_EXPORT
(Ë
cﬁ‹_£t
 (,*);

578 
NCURSES_EXPORT
(Ë
COLOR_PAIR
 ();

579 
NCURSES_EXPORT
(Ë
c›ywö
 (c⁄° 
WINDOW
*,WINDOW*,,,,,,,);

580 
NCURSES_EXPORT
(Ë
curs_£t
 ();

581 
NCURSES_EXPORT
(Ë
def_¥og_mode
 ();

582 
NCURSES_EXPORT
(Ë
def_shñl_mode
 ();

583 
NCURSES_EXPORT
(Ë
dñay_ouçut
 ();

584 
NCURSES_EXPORT
(Ë
dñch
 ();

585 
NCURSES_EXPORT
(Ë
dñs¸ìn
 (
SCREEN
 *);

586 
NCURSES_EXPORT
(Ë
dñwö
 (
WINDOW
 *);

587 
NCURSES_EXPORT
(Ë
dñëñn
 ();

588 
NCURSES_EXPORT
(
WINDOW
 *Ë
dîwö
 (WINDOW *,,,,);

589 
NCURSES_EXPORT
(Ë
doupd©e
 ();

590 
NCURSES_EXPORT
(
WINDOW
 *Ë
dupwö
 (WINDOW *);

591 
NCURSES_EXPORT
(Ë
echo
 ();

592 
NCURSES_EXPORT
(Ë
echoch¨
 (c⁄° 
chty≥
);

593 
NCURSES_EXPORT
(Ë
îa£
 ();

594 
NCURSES_EXPORT
(Ë
ídwö
 ();

595 
NCURSES_EXPORT
(Ë
îa£ch¨
 ();

596 
NCURSES_EXPORT
(Ë
fûãr
 ();

597 
NCURSES_EXPORT
(Ë
Êash
 ();

598 
NCURSES_EXPORT
(Ë
Êushöp
 ();

599 
NCURSES_EXPORT
(
chty≥
Ë
gëbkgd
 (
WINDOW
 *);

600 
NCURSES_EXPORT
(Ë
gëch
 ();

601 
NCURSES_EXPORT
(Ë
gën°r
 (*, );

602 
NCURSES_EXPORT
(Ë
gë°r
 (*);

603 
NCURSES_EXPORT
(
WINDOW
 *Ë
gëwö
 (
FILE
 *);

604 
NCURSES_EXPORT
(Ë
hÆfdñay
 ();

605 
NCURSES_EXPORT
(
boﬁ
Ë
has_cﬁ‹s
 ();

606 
NCURSES_EXPORT
(
boﬁ
Ë
has_ic
 ();

607 
NCURSES_EXPORT
(
boﬁ
Ë
has_û
 ();

608 
NCURSES_EXPORT
(Ë
hlöe
 (
chty≥
, );

609 
NCURSES_EXPORT
(Ë
idcok
 (
WINDOW
 *, 
boﬁ
);

610 
NCURSES_EXPORT
(Ë
idlok
 (
WINDOW
 *, 
boﬁ
);

611 
NCURSES_EXPORT
(Ë
immedok
 (
WINDOW
 *, 
boﬁ
);

612 
NCURSES_EXPORT
(
chty≥
Ë
öch
 ();

613 
NCURSES_EXPORT
(Ë
öchn°r
 (
chty≥
 *, );

614 
NCURSES_EXPORT
(Ë
öch°r
 (
chty≥
 *);

615 
NCURSES_EXPORT
(
WINDOW
 *Ë
öôs¸
 ();

616 
NCURSES_EXPORT
(Ë
öô_cﬁ‹
 (,,,);

617 
NCURSES_EXPORT
(Ë
öô_∑ú
 (,,);

618 
NCURSES_EXPORT
(Ë
ön°r
 (*, );

619 
NCURSES_EXPORT
(Ë
ösch
 (
chty≥
);

620 
NCURSES_EXPORT
(Ë
ösdñ 
 ();

621 
NCURSES_EXPORT
(Ë
ö£π 
 ();

622 
NCURSES_EXPORT
(Ë
ö¢°r
 (const *, );

623 
NCURSES_EXPORT
(Ë
ös°r
 (const *);

624 
NCURSES_EXPORT
(Ë
ö°r
 (*);

625 
NCURSES_EXPORT
(Ë
öåÊush
 (
WINDOW
 *,
boﬁ
);

626 
NCURSES_EXPORT
(
boﬁ
Ë
i£ndwö
 ();

627 
NCURSES_EXPORT
(
boﬁ
Ë
is_löëouched
 (
WINDOW
 *,);

628 
NCURSES_EXPORT
(
boﬁ
Ë
is_wötouched
 (
WINDOW
 *);

629 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
key«me
 ();

630 
NCURSES_EXPORT
(Ë
key∑d
 (
WINDOW
 *,
boﬁ
);

631 
NCURSES_EXPORT
(Ë
kûlch¨
 ();

632 
NCURSES_EXPORT
(Ë
Àaveok
 (
WINDOW
 *,
boﬁ
);

633 
NCURSES_EXPORT
(*Ë
l⁄g«me
 ();

634 
NCURSES_EXPORT
(Ë
mëa
 (
WINDOW
 *,
boﬁ
);

635 
NCURSES_EXPORT
(Ë
move
 (, );

636 
NCURSES_EXPORT
(Ë
mvaddch
 (, , c⁄° 
chty≥
);

637 
NCURSES_EXPORT
(Ë
mvaddchn°r
 (, , c⁄° 
chty≥
 *, );

638 
NCURSES_EXPORT
(Ë
mvaddch°r
 (, , c⁄° 
chty≥
 *);

639 
NCURSES_EXPORT
(Ë
mvaddn°r
 (, , const *, );

640 
NCURSES_EXPORT
(Ë
mvadd°r
 (, , const *);

641 
NCURSES_EXPORT
(Ë
mvchg©
 (, , , 
©å_t
, , const *);

642 
NCURSES_EXPORT
(Ë
mvcur
 (,,,);

643 
NCURSES_EXPORT
(Ë
mvdñch
 (, );

644 
NCURSES_EXPORT
(Ë
mvdîwö
 (
WINDOW
 *, , );

645 
NCURSES_EXPORT
(Ë
mvgëch
 (, );

646 
NCURSES_EXPORT
(Ë
mvgën°r
 (, , *, );

647 
NCURSES_EXPORT
(Ë
mvgë°r
 (, , *);

648 
NCURSES_EXPORT
(Ë
mvhlöe
 (, , 
chty≥
, );

649 
NCURSES_EXPORT
(
chty≥
Ë
mvöch
 (, );

650 
NCURSES_EXPORT
(Ë
mvöchn°r
 (, , 
chty≥
 *, );

651 
NCURSES_EXPORT
(Ë
mvöch°r
 (, , 
chty≥
 *);

652 
NCURSES_EXPORT
(Ë
mvön°r
 (, , *, );

653 
NCURSES_EXPORT
(Ë
mvösch
 (, , 
chty≥
);

654 
NCURSES_EXPORT
(Ë
mvö¢°r
 (, , const *, );

655 
NCURSES_EXPORT
(Ë
mvös°r
 (, , const *);

656 
NCURSES_EXPORT
(Ë
mvö°r
 (, , *);

657 
NCURSES_EXPORT
(Ë
mv¥ötw
 (,, const *,...)

658 
GCC_PRINTFLIKE
(3,4);

659 
NCURSES_EXPORT
(Ë
mvsˇnw
 (,, 
NCURSES_CONST
 *,...)

660 
GCC_SCANFLIKE
(3,4);

661 
NCURSES_EXPORT
(Ë
mvvlöe
 (, , 
chty≥
, );

662 
NCURSES_EXPORT
(Ë
mvwaddch
 (
WINDOW
 *, , , c⁄° 
chty≥
);

663 
NCURSES_EXPORT
(Ë
mvwaddchn°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *, );

664 
NCURSES_EXPORT
(Ë
mvwaddch°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *);

665 
NCURSES_EXPORT
(Ë
mvwaddn°r
 (
WINDOW
 *, , , const *, );

666 
NCURSES_EXPORT
(Ë
mvwadd°r
 (
WINDOW
 *, , , const *);

667 
NCURSES_EXPORT
(Ë
mvwchg©
 (
WINDOW
 *, , , , 
©å_t
, , const *);

668 
NCURSES_EXPORT
(Ë
mvwdñch
 (
WINDOW
 *, , );

669 
NCURSES_EXPORT
(Ë
mvwgëch
 (
WINDOW
 *, , );

670 
NCURSES_EXPORT
(Ë
mvwgën°r
 (
WINDOW
 *, , , *, );

671 
NCURSES_EXPORT
(Ë
mvwgë°r
 (
WINDOW
 *, , , *);

672 
NCURSES_EXPORT
(Ë
mvwhlöe
 (
WINDOW
 *, , , 
chty≥
, );

673 
NCURSES_EXPORT
(Ë
mvwö
 (
WINDOW
 *,,);

674 
NCURSES_EXPORT
(
chty≥
Ë
mvwöch
 (
WINDOW
 *, , );

675 
NCURSES_EXPORT
(Ë
mvwöchn°r
 (
WINDOW
 *, , , 
chty≥
 *, );

676 
NCURSES_EXPORT
(Ë
mvwöch°r
 (
WINDOW
 *, , , 
chty≥
 *);

677 
NCURSES_EXPORT
(Ë
mvwön°r
 (
WINDOW
 *, , , *, );

678 
NCURSES_EXPORT
(Ë
mvwösch
 (
WINDOW
 *, , , 
chty≥
);

679 
NCURSES_EXPORT
(Ë
mvwö¢°r
 (
WINDOW
 *, , , const *, );

680 
NCURSES_EXPORT
(Ë
mvwös°r
 (
WINDOW
 *, , , const *);

681 
NCURSES_EXPORT
(Ë
mvwö°r
 (
WINDOW
 *, , , *);

682 
NCURSES_EXPORT
(Ë
mvw¥ötw
 (
WINDOW
*,,, const *,...)

683 
GCC_PRINTFLIKE
(4,5);

684 
NCURSES_EXPORT
(Ë
mvwsˇnw
 (
WINDOW
 *,,, 
NCURSES_CONST
 *,...)

685 
GCC_SCANFLIKE
(4,5);

686 
NCURSES_EXPORT
(Ë
mvwvlöe
 (
WINDOW
 *,, , 
chty≥
, );

687 
NCURSES_EXPORT
(Ë
«pms
 ();

688 
NCURSES_EXPORT
(
WINDOW
 *Ë
√w∑d
 (,);

689 
NCURSES_EXPORT
(
SCREEN
 *Ë
√wãrm
 (
NCURSES_CONST
 *,
FILE
 *,FILE *);

690 
NCURSES_EXPORT
(
WINDOW
 *Ë
√wwö
 (,,,);

691 
NCURSES_EXPORT
(Ë
∆
 ();

692 
NCURSES_EXPORT
(Ë
nocbªak
 ();

693 
NCURSES_EXPORT
(Ë
nodñay
 (
WINDOW
 *,
boﬁ
);

694 
NCURSES_EXPORT
(Ë
n€cho
 ();

695 
NCURSES_EXPORT
(Ë
n⁄l
 ();

696 
NCURSES_EXPORT
(Ë
noqiÊush
 ();

697 
NCURSES_EXPORT
(Ë
n‹aw
 ();

698 
NCURSES_EXPORT
(Ë
nŸimeout
 (
WINDOW
 *,
boﬁ
);

699 
NCURSES_EXPORT
(Ë
ovîœy
 (c⁄° 
WINDOW
*,WINDOW *);

700 
NCURSES_EXPORT
(Ë
ovîwrôe
 (c⁄° 
WINDOW
*,WINDOW *);

701 
NCURSES_EXPORT
(Ë
∑ú_c⁄ã¡
 (,*,*);

702 
NCURSES_EXPORT
(Ë
PAIR_NUMBER
 ();

703 
NCURSES_EXPORT
(Ë
≥choch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

704 
NCURSES_EXPORT
(Ë
≤ouåe‰esh
 (
WINDOW
*,,,,,,);

705 
NCURSES_EXPORT
(Ë
¥e‰esh
 (
WINDOW
 *,,,,,,);

706 
NCURSES_EXPORT
(Ë
¥ötw
 (const *,...)

707 
GCC_PRINTFLIKE
(1,2);

708 
NCURSES_EXPORT
(Ë
putwö
 (
WINDOW
 *, 
FILE
 *);

709 
NCURSES_EXPORT
(Ë
qiÊush
 ();

710 
NCURSES_EXPORT
(Ë
øw
 ();

711 
NCURSES_EXPORT
(Ë
ªdøwwö
 (
WINDOW
 *);

712 
NCURSES_EXPORT
(Ë
ª‰esh
 ();

713 
NCURSES_EXPORT
(Ë
ª£ây
 ();

714 
NCURSES_EXPORT
(Ë
ª£t_¥og_mode
 ();

715 
NCURSES_EXPORT
(Ë
ª£t_shñl_mode
 ();

716 
NCURSES_EXPORT
(Ë
rùofÊöe
 (, (*)(
WINDOW
 *, ));

717 
NCURSES_EXPORT
(Ë
ßvëty
 ();

718 
NCURSES_EXPORT
(Ë
sˇnw
 (
NCURSES_CONST
 *,...)

719 
GCC_SCANFLIKE
(1,2);

720 
NCURSES_EXPORT
(Ë
s¸_dump
 (const *);

721 
NCURSES_EXPORT
(Ë
s¸_öô
 (const *);

722 
NCURSES_EXPORT
(Ë
s¸l
 ();

723 
NCURSES_EXPORT
(Ë
s¸ﬁl
 (
WINDOW
 *);

724 
NCURSES_EXPORT
(Ë
s¸ﬁlok
 (
WINDOW
 *,
boﬁ
);

725 
NCURSES_EXPORT
(Ë
s¸_ª°‹e
 (const *);

726 
NCURSES_EXPORT
(Ë
s¸_£t
 (const *);

727 
NCURSES_EXPORT
(Ë
£ts¸ªg
 (,);

728 
NCURSES_EXPORT
(
SCREEN
 *Ë
£t_ãrm
 (SCREEN *);

729 
NCURSES_EXPORT
(Ë
¶k_©åoff
 (c⁄° 
chty≥
);

730 
NCURSES_EXPORT
(Ë
¶k_©å_off
 (c⁄° 
©å_t
, *);

731 
NCURSES_EXPORT
(Ë
¶k_©å⁄
 (c⁄° 
chty≥
);

732 
NCURSES_EXPORT
(Ë
¶k_©å_⁄
 (
©å_t
,*);

733 
NCURSES_EXPORT
(Ë
¶k_©å£t
 (c⁄° 
chty≥
);

734 
NCURSES_EXPORT
(
©å_t
Ë
¶k_©å
 ();

735 
NCURSES_EXPORT
(Ë
¶k_©å_£t
 (c⁄° 
©å_t
,,*);

736 
NCURSES_EXPORT
(Ë
¶k_˛ór
 ();

737 
NCURSES_EXPORT
(Ë
¶k_cﬁ‹
 ();

738 
NCURSES_EXPORT
(Ë
¶k_öô
 ();

739 
NCURSES_EXPORT
(*Ë
¶k_œbñ
 ();

740 
NCURSES_EXPORT
(Ë
¶k_nouåe‰esh
 ();

741 
NCURSES_EXPORT
(Ë
¶k_ª‰esh
 ();

742 
NCURSES_EXPORT
(Ë
¶k_ª°‹e
 ();

743 
NCURSES_EXPORT
(Ë
¶k_£t
 (,const *,);

744 
NCURSES_EXPORT
(Ë
¶k_touch
 ();

745 
NCURSES_EXPORT
(Ë
°™dout
 ();

746 
NCURSES_EXPORT
(Ë
°™díd
 ();

747 
NCURSES_EXPORT
(Ë
°¨t_cﬁ‹
 ();

748 
NCURSES_EXPORT
(
WINDOW
 *Ë
sub∑d
 (WINDOW *, , , , );

749 
NCURSES_EXPORT
(
WINDOW
 *Ë
subwö
 (WINDOW *, , , , );

750 
NCURSES_EXPORT
(Ë
syncok
 (
WINDOW
 *, 
boﬁ
);

751 
NCURSES_EXPORT
(
chty≥
Ë
ãrm©ås
 ();

752 
NCURSES_EXPORT
(*Ë
ãrm«me
 ();

753 
NCURSES_EXPORT
(Ë
timeout
 ();

754 
NCURSES_EXPORT
(Ë
touchlöe
 (
WINDOW
 *, , );

755 
NCURSES_EXPORT
(Ë
touchwö
 (
WINDOW
 *);

756 
NCURSES_EXPORT
(Ë
ty≥ahód
 ();

757 
NCURSES_EXPORT
(Ë
ungëch
 ();

758 
NCURSES_EXPORT
(Ë
u¡ouchwö
 (
WINDOW
 *);

759 
NCURSES_EXPORT
(Ë
u£_ív
 (
boﬁ
);

760 
NCURSES_EXPORT
(Ë
vid©å
 (
chty≥
);

761 
NCURSES_EXPORT
(Ë
vidputs
 (
chty≥
, 
NCURSES_OUTC
);

762 
NCURSES_EXPORT
(Ë
vlöe
 (
chty≥
, );

763 
NCURSES_EXPORT
(Ë
vw¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

764 
NCURSES_EXPORT
(Ë
vw_¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

765 
NCURSES_EXPORT
(Ë
vwsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

766 
NCURSES_EXPORT
(Ë
vw_sˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

767 
NCURSES_EXPORT
(Ë
waddch
 (
WINDOW
 *, c⁄° 
chty≥
);

768 
NCURSES_EXPORT
(Ë
waddchn°r
 (
WINDOW
 *,c⁄° 
chty≥
 *,);

769 
NCURSES_EXPORT
(Ë
waddch°r
 (
WINDOW
 *,c⁄° 
chty≥
 *);

770 
NCURSES_EXPORT
(Ë
waddn°r
 (
WINDOW
 *,const *,);

771 
NCURSES_EXPORT
(Ë
wadd°r
 (
WINDOW
 *,const *);

772 
NCURSES_EXPORT
(Ë
w©å⁄
 (
WINDOW
 *, );

773 
NCURSES_EXPORT
(Ë
w©åoff
 (
WINDOW
 *, );

774 
NCURSES_EXPORT
(Ë
w©å£t
 (
WINDOW
 *, );

775 
NCURSES_EXPORT
(Ë
w©å_gë
 (
WINDOW
 *, 
©å_t
 *, *, *);

776 
NCURSES_EXPORT
(Ë
w©å_⁄
 (
WINDOW
 *, 
©å_t
, *);

777 
NCURSES_EXPORT
(Ë
w©å_off
 (
WINDOW
 *, 
©å_t
, *);

778 
NCURSES_EXPORT
(Ë
w©å_£t
 (
WINDOW
 *, 
©å_t
, , *);

779 
NCURSES_EXPORT
(Ë
wbkgd
 (
WINDOW
 *, 
chty≥
);

780 
NCURSES_EXPORT
(Ë
wbkgd£t
 (
WINDOW
 *,
chty≥
);

781 
NCURSES_EXPORT
(Ë
wb‹dî
 (
WINDOW
 *,
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

782 
NCURSES_EXPORT
(Ë
wchg©
 (
WINDOW
 *, , 
©å_t
, , const *);

783 
NCURSES_EXPORT
(Ë
w˛ór
 (
WINDOW
 *);

784 
NCURSES_EXPORT
(Ë
w˛πobŸ
 (
WINDOW
 *);

785 
NCURSES_EXPORT
(Ë
w˛π€ﬁ
 (
WINDOW
 *);

786 
NCURSES_EXPORT
(Ë
wcﬁ‹_£t
 (
WINDOW
*,,*);

787 
NCURSES_EXPORT
(Ë
wcursyncup
 (
WINDOW
 *);

788 
NCURSES_EXPORT
(Ë
wdñch
 (
WINDOW
 *);

789 
NCURSES_EXPORT
(Ë
wdñëñn
 (
WINDOW
 *);

790 
NCURSES_EXPORT
(Ë
wechoch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

791 
NCURSES_EXPORT
(Ë
wîa£
 (
WINDOW
 *);

792 
NCURSES_EXPORT
(Ë
wgëch
 (
WINDOW
 *);

793 
NCURSES_EXPORT
(Ë
wgën°r
 (
WINDOW
 *,*,);

794 
NCURSES_EXPORT
(Ë
wgë°r
 (
WINDOW
 *, *);

795 
NCURSES_EXPORT
(Ë
whlöe
 (
WINDOW
 *, 
chty≥
, );

796 
NCURSES_EXPORT
(
chty≥
Ë
wöch
 (
WINDOW
 *);

797 
NCURSES_EXPORT
(Ë
wöchn°r
 (
WINDOW
 *, 
chty≥
 *, );

798 
NCURSES_EXPORT
(Ë
wöch°r
 (
WINDOW
 *, 
chty≥
 *);

799 
NCURSES_EXPORT
(Ë
wön°r
 (
WINDOW
 *, *, );

800 
NCURSES_EXPORT
(Ë
wösch
 (
WINDOW
 *, 
chty≥
);

801 
NCURSES_EXPORT
(Ë
wösdñ 
 (
WINDOW
 *,);

802 
NCURSES_EXPORT
(Ë
wö£π 
 (
WINDOW
 *);

803 
NCURSES_EXPORT
(Ë
wö¢°r
 (
WINDOW
 *, const *,);

804 
NCURSES_EXPORT
(Ë
wös°r
 (
WINDOW
 *, const *);

805 
NCURSES_EXPORT
(Ë
wö°r
 (
WINDOW
 *, *);

806 
NCURSES_EXPORT
(Ë
wmove
 (
WINDOW
 *,,);

807 
NCURSES_EXPORT
(Ë
wnouåe‰esh
 (
WINDOW
 *);

808 
NCURSES_EXPORT
(Ë
w¥ötw
 (
WINDOW
 *, const *,...)

809 
GCC_PRINTFLIKE
(2,3);

810 
NCURSES_EXPORT
(Ë
wªdøw 
 (
WINDOW
 *,,);

811 
NCURSES_EXPORT
(Ë
wª‰esh
 (
WINDOW
 *);

812 
NCURSES_EXPORT
(Ë
wsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,...)

813 
GCC_SCANFLIKE
(2,3);

814 
NCURSES_EXPORT
(Ë
ws¸l
 (
WINDOW
 *,);

815 
NCURSES_EXPORT
(Ë
w£ts¸ªg
 (
WINDOW
 *,,);

816 
NCURSES_EXPORT
(Ë
w°™dout
 (
WINDOW
 *);

817 
NCURSES_EXPORT
(Ë
w°™díd
 (
WINDOW
 *);

818 
NCURSES_EXPORT
(Ë
wsyncdown
 (
WINDOW
 *);

819 
NCURSES_EXPORT
(Ë
wsyncup
 (
WINDOW
 *);

820 
NCURSES_EXPORT
(Ë
wtimeout
 (
WINDOW
 *,);

821 
NCURSES_EXPORT
(Ë
wtouch 
 (
WINDOW
 *,,,);

822 
NCURSES_EXPORT
(Ë
wvlöe
 (
WINDOW
 *,
chty≥
,);

827 
NCURSES_EXPORT
(Ë
tigëÊag
 (
NCURSES_CONST
 *);

828 
NCURSES_EXPORT
(Ë
tigënum
 (
NCURSES_CONST
 *);

829 
NCURSES_EXPORT
(*Ë
tigë°r
 (
NCURSES_CONST
 *);

830 
NCURSES_EXPORT
(Ë
puç
 (const *);

832 #i‡
NCURSES_TPARM_VARARGS


833 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ...);

835 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ,,,,,,,,);

836 
NCURSES_EXPORT
(*Ë
ç¨m_v¨¨gs
 (
NCURSES_CONST
 *, ...);

839 
NCURSES_EXPORT
(*Ë
tù¨m
 (const *, ...);

844 
NCURSES_EXPORT
(Ë
gë©ås
 (c⁄° 
WINDOW
 *);

845 
NCURSES_EXPORT
(Ë
gëcurx
 (c⁄° 
WINDOW
 *);

846 
NCURSES_EXPORT
(Ë
gëcury
 (c⁄° 
WINDOW
 *);

847 
NCURSES_EXPORT
(Ë
gëbegx
 (c⁄° 
WINDOW
 *);

848 
NCURSES_EXPORT
(Ë
gëbegy
 (c⁄° 
WINDOW
 *);

849 
NCURSES_EXPORT
(Ë
gëmaxx
 (c⁄° 
WINDOW
 *);

850 
NCURSES_EXPORT
(Ë
gëmaxy
 (c⁄° 
WINDOW
 *);

851 
NCURSES_EXPORT
(Ë
gë∑rx
 (c⁄° 
WINDOW
 *);

852 
NCURSES_EXPORT
(Ë
gë∑ry
 (c⁄° 
WINDOW
 *);

857 #i‚de‡
NCURSES_WIDECHAR


858 
	#vid_©å
(
a
,
∑ú
,
›ts
Ë
	`vid©å
◊)

	)

865 #unde‡
NCURSES_EXT_FUNCS


866 
	#NCURSES_EXT_FUNCS
 20110404

	)

867 (*
	gNCURSES_WINDOW_CB
)(
	tWINDOW
 *, *);

868 (*
	gNCURSES_SCREEN_CB
)(
	tSCREEN
 *, *);

869 
NCURSES_EXPORT
(
boﬁ
Ë
is_ãrm_ªsized
 (, );

870 
NCURSES_EXPORT
(*Ë
keybound
 (, );

871 
NCURSES_EXPORT
(c⁄° *Ë
cur£s_vîsi⁄
 ();

872 
NCURSES_EXPORT
(Ë
assume_deÁu…_cﬁ‹s
 (, );

873 
NCURSES_EXPORT
(Ë
deföe_key
 (const *, );

874 
NCURSES_EXPORT
(Ë
gë_escdñay
 ();

875 
NCURSES_EXPORT
(Ë
key_deföed
 (const *);

876 
NCURSES_EXPORT
(Ë
keyok
 (, 
boﬁ
);

877 
NCURSES_EXPORT
(Ë
ªsize_ãrm
 (, );

878 
NCURSES_EXPORT
(Ë
ªsizëîm
 (, );

879 
NCURSES_EXPORT
(Ë
£t_escdñay
 ();

880 
NCURSES_EXPORT
(Ë
£t_èbsize
 ();

881 
NCURSES_EXPORT
(Ë
u£_deÁu…_cﬁ‹s
 ();

882 
NCURSES_EXPORT
(Ë
u£_exãnded_«mes
 (
boﬁ
);

883 
NCURSES_EXPORT
(Ë
u£_Àgacy_codög
 ();

884 
NCURSES_EXPORT
(Ë
u£_s¸ìn
 (
SCREEN
 *, 
NCURSES_SCREEN_CB
, *);

885 
NCURSES_EXPORT
(Ë
u£_wödow
 (
WINDOW
 *, 
NCURSES_WINDOW_CB
, *);

886 
NCURSES_EXPORT
(Ë
wªsize
 (
WINDOW
 *, , );

887 
NCURSES_EXPORT
(Ë
nofûãr
();

893 
NCURSES_EXPORT
(
WINDOW
 *Ë
wgë∑ª¡
 (const WINDOW *);

894 
NCURSES_EXPORT
(
boﬁ
Ë
is_˛óªd
 (c⁄° 
WINDOW
 *);

895 
NCURSES_EXPORT
(
boﬁ
Ë
is_idcok
 (c⁄° 
WINDOW
 *);

896 
NCURSES_EXPORT
(
boﬁ
Ë
is_idlok
 (c⁄° 
WINDOW
 *);

897 
NCURSES_EXPORT
(
boﬁ
Ë
is_immedok
 (c⁄° 
WINDOW
 *);

898 
NCURSES_EXPORT
(
boﬁ
Ë
is_key∑d
 (c⁄° 
WINDOW
 *);

899 
NCURSES_EXPORT
(
boﬁ
Ë
is_Àaveok
 (c⁄° 
WINDOW
 *);

900 
NCURSES_EXPORT
(
boﬁ
Ë
is_nodñay
 (c⁄° 
WINDOW
 *);

901 
NCURSES_EXPORT
(
boﬁ
Ë
is_nŸimeout
 (c⁄° 
WINDOW
 *);

902 
NCURSES_EXPORT
(
boﬁ
Ë
is_∑d
 (c⁄° 
WINDOW
 *);

903 
NCURSES_EXPORT
(
boﬁ
Ë
is_s¸ﬁlok
 (c⁄° 
WINDOW
 *);

904 
NCURSES_EXPORT
(
boﬁ
Ë
is_subwö
 (c⁄° 
WINDOW
 *);

905 
NCURSES_EXPORT
(
boﬁ
Ë
is_syncok
 (c⁄° 
WINDOW
 *);

906 
NCURSES_EXPORT
(Ë
wgës¸ªg
 (c⁄° 
WINDOW
 *, *, *);

909 
	#cur£s_vîsi⁄
(Ë
NCURSES_VERSION


	)

917 #unde‡
NCURSES_SP_FUNCS


918 
	#NCURSES_SP_FUNCS
 20110404

	)

919 
	#NCURSES_SP_NAME
(
«me
Ë«me##
_•


	)

922 
	#NCURSES_SP_OUTC
 
	`NCURSES_SP_NAME
(
NCURSES_OUTC
)

	)

923 (*
	gNCURSES_SP_OUTC
)(
	tSCREEN
*, );

925 
NCURSES_EXPORT
(
SCREEN
 *Ë
√w_¥es¸
 ();

927 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
baudøã
Ë(
SCREEN
*);

928 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
bìp
Ë(
SCREEN
*);

929 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
ˇn_ch™ge_cﬁ‹
Ë(
SCREEN
*);

930 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cbªak
Ë(
SCREEN
*);

931 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
curs_£t
Ë(
SCREEN
*, );

932 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cﬁ‹_c⁄ã¡
Ë(
SCREEN
*, , *, *, *);

933 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_¥og_mode
Ë(
SCREEN
*);

934 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_shñl_mode
Ë(
SCREEN
*);

935 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
dñay_ouçut
Ë(
SCREEN
*, );

936 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
doupd©e
Ë(
SCREEN
*);

937 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
echo
Ë(
SCREEN
*);

938 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ídwö
Ë(
SCREEN
*);

939 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
îa£ch¨
Ë(
SCREEN
*);

940 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
fûãr
Ë(
SCREEN
*);

941 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êash
Ë(
SCREEN
*);

942 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êushöp
Ë(
SCREEN
*);

943 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
gëwö
Ë(
SCREEN
*, 
FILE
 *);

944 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
hÆfdñay
Ë(
SCREEN
*, );

945 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_cﬁ‹s
Ë(
SCREEN
*);

946 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_ic
Ë(
SCREEN
*);

947 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_û
Ë(
SCREEN
*);

948 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_cﬁ‹
Ë(
SCREEN
*, , , , );

949 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_∑ú
Ë(
SCREEN
*, , , );

950 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öåÊush
Ë(
SCREEN
*, 
WINDOW
*, 
boﬁ
);

951 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
i£ndwö
Ë(
SCREEN
*);

952 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
key«me
Ë(
SCREEN
*, );

953 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
kûlch¨
Ë(
SCREEN
*);

954 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
l⁄g«me
Ë(
SCREEN
*);

955 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mvcur
Ë(
SCREEN
*, , , , );

956 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
«pms
Ë(
SCREEN
*, );

957 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√w∑d
Ë(
SCREEN
*, , );

958 
NCURSES_EXPORT
(
SCREEN
 *Ë
NCURSES_SP_NAME
(
√wãrm
Ë(SCREEN*, 
NCURSES_CONST
 *, 
FILE
 *, FILE *);

959 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√wwö
Ë(
SCREEN
*, , , , );

960 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∆
Ë(
SCREEN
*);

961 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nocbªak
Ë(
SCREEN
*);

962 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n€cho
Ë(
SCREEN
*);

963 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n⁄l
Ë(
SCREEN
*);

964 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
noqiÊush
Ë(
SCREEN
*);

965 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n‹aw
Ë(
SCREEN
*);

966 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∑ú_c⁄ã¡
Ë(
SCREEN
*, , *, *);

967 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
qiÊush
Ë(
SCREEN
*);

968 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
øw
Ë(
SCREEN
*);

969 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_¥og_mode
Ë(
SCREEN
*);

970 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_shñl_mode
Ë(
SCREEN
*);

971 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£ây
Ë(
SCREEN
*);

972 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
rùofÊöe
Ë(
SCREEN
*, , (*)(
WINDOW
 *, ));

973 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ßvëty
Ë(
SCREEN
*);

974 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_öô
Ë(
SCREEN
*, const *);

975 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_ª°‹e
Ë(
SCREEN
*, const *);

976 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_£t
Ë(
SCREEN
*, const *);

977 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©åoff
Ë(
SCREEN
*, c⁄° 
chty≥
);

978 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å⁄
Ë(
SCREEN
*, c⁄° 
chty≥
);

979 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å£t
Ë(
SCREEN
*, c⁄° 
chty≥
);

980 
NCURSES_EXPORT
(
©å_t
Ë
NCURSES_SP_NAME
(
¶k_©å
Ë(
SCREEN
*);

981 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å_£t
Ë(
SCREEN
*, c⁄° 
©å_t
, , *);

982 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_˛ór
Ë(
SCREEN
*);

983 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_cﬁ‹
Ë(
SCREEN
*, );

984 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_öô
Ë(
SCREEN
*, );

985 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
¶k_œbñ
Ë(
SCREEN
*, );

986 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_nouåe‰esh
Ë(
SCREEN
*);

987 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª‰esh
Ë(
SCREEN
*);

988 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª°‹e
Ë(
SCREEN
*);

989 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_£t
Ë(
SCREEN
*, , const *, );

990 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_touch
Ë(
SCREEN
*);

991 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
°¨t_cﬁ‹
Ë(
SCREEN
*);

992 
NCURSES_EXPORT
(
chty≥
Ë
NCURSES_SP_NAME
(
ãrm©ås
Ë(
SCREEN
*);

993 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ãrm«me
Ë(
SCREEN
*);

994 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ty≥ahód
Ë(
SCREEN
*, );

995 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëch
Ë(
SCREEN
*, );

996 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_ív
Ë(
SCREEN
*, 
boﬁ
);

997 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vid©å
Ë(
SCREEN
*, 
chty≥
);

998 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vidputs
Ë(
SCREEN
*, 
chty≥
, 
NCURSES_SP_OUTC
);

1000 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
keybound
Ë(
SCREEN
*, , );

1001 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
assume_deÁu…_cﬁ‹s
Ë(
SCREEN
*, , );

1002 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
deföe_key
Ë(
SCREEN
*, const *, );

1003 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gë_escdñay
Ë(
SCREEN
*);

1004 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
is_ãrm_ªsized
Ë(
SCREEN
*, , );

1005 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
key_deföed
Ë(
SCREEN
*, const *);

1006 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
keyok
Ë(
SCREEN
*, , 
boﬁ
);

1007 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nofûãr
Ë(
SCREEN
*);

1008 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsize_ãrm
Ë(
SCREEN
*, , );

1009 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsizëîm
Ë(
SCREEN
*, , );

1010 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_escdñay
Ë(
SCREEN
*, );

1011 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_èbsize
Ë(
SCREEN
*, );

1012 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_deÁu…_cﬁ‹s
Ë(
SCREEN
*);

1013 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_Àgacy_codög
Ë(
SCREEN
*, );

1016 #unde‡
NCURSES_SP_FUNCS


1017 
	#NCURSES_SP_FUNCS
 0

	)

1018 
	#NCURSES_SP_NAME
(
«me
Ë
	)
name

1019 
	#NCURSES_SP_OUTC
 
NCURSES_OUTC


	)

1024 
	#NCURSES_ATTR_SHIFT
 8

	)

1025 
	#NCURSES_BITS
(
mask
,
shi·
Ë((maskË<< ((shi·Ë+ 
NCURSES_ATTR_SHIFT
))

	)

1027 
	#A_NORMAL
 (1UL - 1UL)

	)

1028 
	#A_ATTRIBUTES
 
	`NCURSES_BITS
(~(1UL - 1UL),0)

	)

1029 
	#A_CHARTEXT
 (
	`NCURSES_BITS
(1UL,0Ë- 1UL)

	)

1030 
	#A_COLOR
 
	`NCURSES_BITS
(((1ULË<< 8Ë- 1UL,0)

	)

1031 
	#A_STANDOUT
 
	`NCURSES_BITS
(1UL,8)

	)

1032 
	#A_UNDERLINE
 
	`NCURSES_BITS
(1UL,9)

	)

1033 
	#A_REVERSE
 
	`NCURSES_BITS
(1UL,10)

	)

1034 
	#A_BLINK
 
	`NCURSES_BITS
(1UL,11)

	)

1035 
	#A_DIM
 
	`NCURSES_BITS
(1UL,12)

	)

1036 
	#A_BOLD
 
	`NCURSES_BITS
(1UL,13)

	)

1037 
	#A_ALTCHARSET
 
	`NCURSES_BITS
(1UL,14)

	)

1038 
	#A_INVIS
 
	`NCURSES_BITS
(1UL,15)

	)

1039 
	#A_PROTECT
 
	`NCURSES_BITS
(1UL,16)

	)

1040 
	#A_HORIZONTAL
 
	`NCURSES_BITS
(1UL,17)

	)

1041 
	#A_LEFT
 
	`NCURSES_BITS
(1UL,18)

	)

1042 
	#A_LOW
 
	`NCURSES_BITS
(1UL,19)

	)

1043 
	#A_RIGHT
 
	`NCURSES_BITS
(1UL,20)

	)

1044 
	#A_TOP
 
	`NCURSES_BITS
(1UL,21)

	)

1045 
	#A_VERTICAL
 
	`NCURSES_BITS
(1UL,22)

	)

1057 
	#gëyx
(
wö
,
y
,
x
Ë(y = 
	`gëcury
(wö), x = 
	`gëcurx
(wö))

	)

1058 
	#gëbegyx
(
wö
,
y
,
x
Ë(y = 
	`gëbegy
(wö), x = 
	`gëbegx
(wö))

	)

1059 
	#gëmaxyx
(
wö
,
y
,
x
Ë(y = 
	`gëmaxy
(wö), x = 
	`gëmaxx
(wö))

	)

1060 
	#gë∑ryx
(
wö
,
y
,
x
Ë(y = 
	`gë∑ry
(wö), x = 
	`gë∑rx
(wö))

	)

1062 
	#gësyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1063 i‡(
	`is_Àaveok
(
√ws¸
)) \

1064 (
y
Ë(
x
) = -1; \

1066 
	`gëyx
(
√ws¸
,(
y
), (
x
)); \

1068 } 0)

	)

1070 
	#£tsyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1071 i‡((
y
Ë=-1 && (
x
) == -1) \

1072 
	`Àaveok
(
√ws¸
, 
TRUE
); \

1074 
	`Àaveok
(
√ws¸
, 
FALSE
); \

1075 
	`wmove
(
√ws¸
, (
y
), (
x
)); \

1078 } 0)

	)

1080 #i‚de‡
NCURSES_NOMACROS


1086 
	#wgë°r
(
w
, 
s
Ë
	`wgën°r
(w, s, -1)

	)

1087 
	#gën°r
(
s
, 
n
Ë
	`wgën°r
(
°ds¸
, s,Ç)

	)

1089 
	#£âîm
(
ãrm
Ë
	`£tu±îm
—îm, 1, (*)0)

	)

1091 
	#fixãrm
(Ë
	`ª£t_¥og_mode
()

	)

1092 
	#ª£âîm
(Ë
	`ª£t_shñl_mode
()

	)

1093 
	#ßvëîm
(Ë
	`def_¥og_mode
()

	)

1094 
	#¸mode
(Ë
	`cbªak
()

	)

1095 
	#no¸mode
(Ë
	`nocbªak
()

	)

1096 
	#gëtmode
()

	)

1099 #i‡!
NCURSES_OPAQUE


1100 
	#gë©ås
(
wö
Ë
	`NCURSES_CAST
(, (wöË? (wö)->
_©ås
 : 
A_NORMAL
)

	)

1101 
	#gëcurx
(
wö
Ë((wöË? (wö)->
_curx
 : 
ERR
)

	)

1102 
	#gëcury
(
wö
Ë((wöË? (wö)->
_cury
 : 
ERR
)

	)

1103 
	#gëbegx
(
wö
Ë((wöË? (wö)->
_begx
 : 
ERR
)

	)

1104 
	#gëbegy
(
wö
Ë((wöË? (wö)->
_begy
 : 
ERR
)

	)

1105 
	#gëmaxx
(
wö
Ë((wöË? ((wö)->
_maxx
 + 1Ë: 
ERR
)

	)

1106 
	#gëmaxy
(
wö
Ë((wöË? ((wö)->
_maxy
 + 1Ë: 
ERR
)

	)

1107 
	#gë∑rx
(
wö
Ë((wöË? (wö)->
_∑rx
 : 
ERR
)

	)

1108 
	#gë∑ry
(
wö
Ë((wöË? (wö)->
_∑ry
 : 
ERR
)

	)

1111 
	#w°™dout
(
wö
Ë(
	`w©å£t
(wö,
A_STANDOUT
))

	)

1112 
	#w°™díd
(
wö
Ë(
	`w©å£t
(wö,
A_NORMAL
))

	)

1114 
	#w©å⁄
(
wö
,
©
Ë
	`w©å_⁄
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1115 
	#w©åoff
(
wö
,
©
Ë
	`w©å_off
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1117 #i‡!
NCURSES_OPAQUE


1118 #i‡
deföed
(
NCURSES_WIDECHAR
) && 0

1119 
	#w©å£t
(
wö
,
©
) ((win) \

1120 ? ((
wö
)->
_cﬁ‹
 = 
	`PAIR_NUMBER
(
©
), \

1121 (
wö
)->
_©ås
 = 
	`NCURSES_CAST
(
©å_t
, 
©
), \

1122 
OK
) \

1123 : 
ERR
)

	)

1125 
	#w©å£t
(
wö
,
©
) ((win) \

1126 ? ((
wö
)->
_©ås
 = 
	`NCURSES_CAST
(
©å_t
, 
©
), \

1127 
OK
) \

1128 : 
ERR
)

	)

1132 
	#s¸ﬁl
(
wö
Ë
	`ws¸l
(wö,1)

	)

1134 
	#touchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 1)

	)

1135 
	#touchlöe
(
wö
, 
s
, 
c
Ë
	`wtouch 
((wö), s, c, 1)

	)

1136 
	#u¡ouchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 0)

	)

1138 
	#box
(
wö
, 
v
, 
h
Ë
	`wb‹dî
(wö, v, v, h, h, 0, 0, 0, 0)

	)

1139 
	#b‹dî
(
ls
, 
rs
, 
ts
, 
bs
, 
é
, 
å
, 
bl
, 
br
Ë
	`wb‹dî
(
°ds¸
,Üs,Ñs,Ås, bs,Ål,År, bl, br)

	)

1140 
	#hlöe
(
ch
, 
n
Ë
	`whlöe
(
°ds¸
, ch,Ç)

	)

1141 
	#vlöe
(
ch
, 
n
Ë
	`wvlöe
(
°ds¸
, ch,Ç)

	)

1143 
	#wö°r
(
w
, 
s
Ë
	`wön°r
(w, s, -1)

	)

1144 
	#wöch°r
(
w
, 
s
Ë
	`wöchn°r
(w, s, -1)

	)

1145 
	#wös°r
(
w
, 
s
Ë
	`wö¢°r
(w, s, -1)

	)

1147 #i‡!
NCURSES_OPAQUE


1148 
	#ªdøwwö
(
wö
Ë
	`wªdøw 
(wö, 0, (wö)->
_maxy
+1)

	)

1151 
	#wadd°r
(
wö
,
°r
Ë
	`waddn°r
(wö,°r,-1)

	)

1152 
	#waddch°r
(
wö
,
°r
Ë
	`waddchn°r
(wö,°r,-1)

	)

1157 
	#COLOR_PAIR
(
n
Ë
	`NCURSES_BITS
“, 0)

	)

1158 
	#PAIR_NUMBER
(
a
Ë(
	`NCURSES_CAST
(,((NCURSES_CAST(,aË& 
A_COLOR
Ë>> 
NCURSES_ATTR_SHIFT
)))

	)

1164 
	#addch
(
ch
Ë
	`waddch
(
°ds¸
,ch)

	)

1165 
	#addchn°r
(
°r
,
n
Ë
	`waddchn°r
(
°ds¸
,°r,n)

	)

1166 
	#addch°r
(
°r
Ë
	`waddch°r
(
°ds¸
,°r)

	)

1167 
	#addn°r
(
°r
,
n
Ë
	`waddn°r
(
°ds¸
,°r,n)

	)

1168 
	#add°r
(
°r
Ë
	`waddn°r
(
°ds¸
,°r,-1)

	)

1169 
	#©åoff
(
©
Ë
	`w©åoff
(
°ds¸
,©)

	)

1170 
	#©å⁄
(
©
Ë
	`w©å⁄
(
°ds¸
,©)

	)

1171 
	#©å£t
(
©
Ë
	`w©å£t
(
°ds¸
,©)

	)

1172 
	#©å_gë
(
≠
,
˝
,
o
Ë
	`w©å_gë
(
°ds¸
,≠,˝,o)

	)

1173 
	#©å_off
(
a
,
o
Ë
	`w©å_off
(
°ds¸
,a,o)

	)

1174 
	#©å_⁄
(
a
,
o
Ë
	`w©å_⁄
(
°ds¸
,a,o)

	)

1175 
	#©å_£t
(
a
,
c
,
o
Ë
	`w©å_£t
(
°ds¸
,a,c,o)

	)

1176 
	#bkgd
(
ch
Ë
	`wbkgd
(
°ds¸
,ch)

	)

1177 
	#bkgd£t
(
ch
Ë
	`wbkgd£t
(
°ds¸
,ch)

	)

1178 
	#chg©
(
n
,
a
,
c
,
o
Ë
	`wchg©
(
°ds¸
,n,a,c,o)

	)

1179 
	#˛ór
(Ë
	`w˛ór
(
°ds¸
)

	)

1180 
	#˛πobŸ
(Ë
	`w˛πobŸ
(
°ds¸
)

	)

1181 
	#˛π€ﬁ
(Ë
	`w˛π€ﬁ
(
°ds¸
)

	)

1182 
	#cﬁ‹_£t
(
c
,
o
Ë
	`wcﬁ‹_£t
(
°ds¸
,c,o)

	)

1183 
	#dñch
(Ë
	`wdñch
(
°ds¸
)

	)

1184 
	#dñëñn
(Ë
	`wösdñ 
(
°ds¸
,-1)

	)

1185 
	#echoch¨
(
c
Ë
	`wechoch¨
(
°ds¸
,c)

	)

1186 
	#îa£
(Ë
	`wîa£
(
°ds¸
)

	)

1187 
	#gëch
(Ë
	`wgëch
(
°ds¸
)

	)

1188 
	#gë°r
(
°r
Ë
	`wgë°r
(
°ds¸
,°r)

	)

1189 
	#öch
(Ë
	`wöch
(
°ds¸
)

	)

1190 
	#öchn°r
(
s
,
n
Ë
	`wöchn°r
(
°ds¸
,s,n)

	)

1191 
	#öch°r
(
s
Ë
	`wöch°r
(
°ds¸
,s)

	)

1192 
	#ön°r
(
s
,
n
Ë
	`wön°r
(
°ds¸
,s,n)

	)

1193 
	#ösch
(
c
Ë
	`wösch
(
°ds¸
,c)

	)

1194 
	#ösdñ 
(
n
Ë
	`wösdñ 
(
°ds¸
,n)

	)

1195 
	#ö£π 
(Ë
	`wösdñ 
(
°ds¸
,1)

	)

1196 
	#ö¢°r
(
s
,
n
Ë
	`wö¢°r
(
°ds¸
,s,n)

	)

1197 
	#ös°r
(
s
Ë
	`wös°r
(
°ds¸
,s)

	)

1198 
	#ö°r
(
s
Ë
	`wö°r
(
°ds¸
,s)

	)

1199 
	#move
(
y
,
x
Ë
	`wmove
(
°ds¸
,y,x)

	)

1200 
	#ª‰esh
(Ë
	`wª‰esh
(
°ds¸
)

	)

1201 
	#s¸l
(
n
Ë
	`ws¸l
(
°ds¸
,n)

	)

1202 
	#£ts¸ªg
(
t
,
b
Ë
	`w£ts¸ªg
(
°ds¸
,t,b)

	)

1203 
	#°™díd
(Ë
	`w°™díd
(
°ds¸
)

	)

1204 
	#°™dout
(Ë
	`w°™dout
(
°ds¸
)

	)

1205 
	#timeout
(
dñay
Ë
	`wtimeout
(
°ds¸
,dñay)

	)

1206 
	#wdñëñn
(
wö
Ë
	`wösdñ 
(wö,-1)

	)

1207 
	#wö£π 
(
wö
Ë
	`wösdñ 
(wö,1)

	)

1213 
	#mvwaddch
(
wö
,
y
,
x
,
ch
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddch
(wö,ch))

	)

1214 
	#mvwaddchn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddchn°r
(wö,°r,n))

	)

1215 
	#mvwaddch°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddchn°r
(wö,°r,-1))

	)

1216 
	#mvwaddn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddn°r
(wö,°r,n))

	)

1217 
	#mvwadd°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddn°r
(wö,°r,-1))

	)

1218 
	#mvwdñch
(
wö
,
y
,
x
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wdñch
(wö))

	)

1219 
	#mvwchg©
(
wö
,
y
,
x
,
n
,
a
,
c
,
o
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wchg©
(wö,n,a,c,o))

	)

1220 
	#mvwgëch
(
wö
,
y
,
x
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wgëch
(wö))

	)

1221 
	#mvwgën°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wgën°r
(wö,°r,n))

	)

1222 
	#mvwgë°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wgë°r
(wö,°r))

	)

1223 
	#mvwhlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`whlöe
(wö,c,n))

	)

1224 
	#mvwöch
(
wö
,
y
,
x
Ë(
	`wmove
(wö,y,xË=
ERR
 ? 
	`NCURSES_CAST
(
chty≥
, ERRË: 
	`wöch
(wö))

	)

1225 
	#mvwöchn°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wöchn°r
(wö,s,n))

	)

1226 
	#mvwöch°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wöch°r
(wö,s))

	)

1227 
	#mvwön°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wön°r
(wö,s,n))

	)

1228 
	#mvwösch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wösch
(wö,c))

	)

1229 
	#mvwö¢°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wö¢°r
(wö,s,n))

	)

1230 
	#mvwös°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wös°r
(wö,s))

	)

1231 
	#mvwö°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wö°r
(wö,s))

	)

1232 
	#mvwvlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wvlöe
(wö,c,n))

	)

1234 
	#mvaddch
(
y
,
x
,
ch
Ë
	`mvwaddch
(
°ds¸
,y,x,ch)

	)

1235 
	#mvaddchn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddchn°r
(
°ds¸
,y,x,°r,n)

	)

1236 
	#mvaddch°r
(
y
,
x
,
°r
Ë
	`mvwaddch°r
(
°ds¸
,y,x,°r)

	)

1237 
	#mvaddn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddn°r
(
°ds¸
,y,x,°r,n)

	)

1238 
	#mvadd°r
(
y
,
x
,
°r
Ë
	`mvwadd°r
(
°ds¸
,y,x,°r)

	)

1239 
	#mvchg©
(
y
,
x
,
n
,
a
,
c
,
o
Ë
	`mvwchg©
(
°ds¸
,y,x,n,a,c,o)

	)

1240 
	#mvdñch
(
y
,
x
Ë
	`mvwdñch
(
°ds¸
,y,x)

	)

1241 
	#mvgëch
(
y
,
x
Ë
	`mvwgëch
(
°ds¸
,y,x)

	)

1242 
	#mvgën°r
(
y
,
x
,
°r
,
n
Ë
	`mvwgën°r
(
°ds¸
,y,x,°r,n)

	)

1243 
	#mvgë°r
(
y
,
x
,
°r
Ë
	`mvwgë°r
(
°ds¸
,y,x,°r)

	)

1244 
	#mvhlöe
(
y
,
x
,
c
,
n
Ë
	`mvwhlöe
(
°ds¸
,y,x,c,n)

	)

1245 
	#mvöch
(
y
,
x
Ë
	`mvwöch
(
°ds¸
,y,x)

	)

1246 
	#mvöchn°r
(
y
,
x
,
s
,
n
Ë
	`mvwöchn°r
(
°ds¸
,y,x,s,n)

	)

1247 
	#mvöch°r
(
y
,
x
,
s
Ë
	`mvwöch°r
(
°ds¸
,y,x,s)

	)

1248 
	#mvön°r
(
y
,
x
,
s
,
n
Ë
	`mvwön°r
(
°ds¸
,y,x,s,n)

	)

1249 
	#mvösch
(
y
,
x
,
c
Ë
	`mvwösch
(
°ds¸
,y,x,c)

	)

1250 
	#mvö¢°r
(
y
,
x
,
s
,
n
Ë
	`mvwö¢°r
(
°ds¸
,y,x,s,n)

	)

1251 
	#mvös°r
(
y
,
x
,
s
Ë
	`mvwös°r
(
°ds¸
,y,x,s)

	)

1252 
	#mvö°r
(
y
,
x
,
s
Ë
	`mvwö°r
(
°ds¸
,y,x,s)

	)

1253 
	#mvvlöe
(
y
,
x
,
c
,
n
Ë
	`mvwvlöe
(
°ds¸
,y,x,c,n)

	)

1258 #i‡!
NCURSES_OPAQUE


1259 
	#gëbkgd
(
wö
Ë((wö)->
_bkgd
)

	)

1262 
	#¶k_©å_off
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©åoff
◊))

	)

1263 
	#¶k_©å_⁄
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©å⁄
◊))

	)

1265 #i‡!
NCURSES_OPAQUE


1266 #i‡
deföed
(
NCURSES_WIDECHAR
) && 0

1267 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
Ë((wö)->
_©ås
 = (◊Ë& ~
A_COLOR
), \

1268 (
wö
)->
_cﬁ‹
 = (
p
), \

1269 
OK
)

	)

1270 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()(◊Ë!(*)0 && (*◊Ë(wö)->
_©ås
)), \

1271 ()((
p
Ë!(*)0 && (*’Ë()(
wö
)->
_cﬁ‹
)), \

1272 
OK
)

	)

1274 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
Ë((wö)->
_©ås
 = ((◊Ë& ~
A_COLOR
Ë| (
©å_t
)
	`COLOR_PAIR
’)), 
OK
)

	)

1275 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()(◊Ë!(*)0 && (*◊Ë(wö)->
_©ås
)), \

1276 ()((
p
Ë!(*)0 && (*’Ë()
	`PAIR_NUMBER
((
wö
)->
_©ås
))), \

1277 
OK
)

	)

1287 
	#vw_¥ötw
 
vw¥ötw


	)

1288 
	#vw_sˇnw
 
vwsˇnw


	)

1294 
	#vssˇnf
(
a
,
b
,
c
Ë
	`_nc_vssˇnf
◊,b,c)

	)

1295 
NCURSES_EXPORT
(Ë
vssˇnf
(c⁄° *, c⁄° *, 
va_li°
);

1302 #i‡!
NCURSES_OPAQUE


1303 
	#is_˛óªd
(
wö
Ë((wöË? (wö)->
_˛ór
 : 
FALSE
)

	)

1304 
	#is_idcok
(
wö
Ë((wöË? (wö)->
_idcok
 : 
FALSE
)

	)

1305 
	#is_idlok
(
wö
Ë((wöË? (wö)->
_idlok
 : 
FALSE
)

	)

1306 
	#is_immedok
(
wö
Ë((wöË? (wö)->
_immed
 : 
FALSE
)

	)

1307 
	#is_key∑d
(
wö
Ë((wöË? (wö)->
_u£_key∑d
 : 
FALSE
)

	)

1308 
	#is_Àaveok
(
wö
Ë((wöË? (wö)->
_Àaveok
 : 
FALSE
)

	)

1309 
	#is_nodñay
(
wö
Ë((wöË? ((wö)->
_dñay
 =0Ë: 
FALSE
)

	)

1310 
	#is_nŸimeout
(
wö
Ë((wöË? (wö)->
_nŸimeout
 : 
FALSE
)

	)

1311 
	#is_∑d
(
wö
Ë((wöË? ((wö)->
_Êags
 & 
_ISPAD
Ë!0 : 
FALSE
)

	)

1312 
	#is_s¸ﬁlok
(
wö
Ë((wöË? (wö)->
_s¸ﬁl
 : 
FALSE
)

	)

1313 
	#is_subwö
(
wö
Ë((wöË? ((wö)->
_Êags
 & 
_SUBWIN
Ë!0 : 
FALSE
)

	)

1314 
	#is_syncok
(
wö
Ë((wöË? (wö)->
_sync
 : 
FALSE
)

	)

1315 
	#wgë∑ª¡
(
wö
Ë((wöË? (wö)->
_∑ª¡
 : 0)

	)

1316 
	#wgës¸ªg
(
wö
,
t
,
b
Ë((wöË? (*—Ë(wö)->
_ªgt›
, *(bË(wö)->
_ªgbŸtom
, 
OK
Ë: 
ERR
)

	)

1330 #i‡
NCURSES_REENTRANT


1332 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
curs¸
);

1333 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
√ws¸
);

1334 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
°ds¸
);

1335 
NCURSES_WRAPPED_VAR
(*, 
âyty≥
);

1336 
NCURSES_WRAPPED_VAR
(, 
COLORS
);

1337 
NCURSES_WRAPPED_VAR
(, 
COLOR_PAIRS
);

1338 
NCURSES_WRAPPED_VAR
(, 
COLS
);

1339 
NCURSES_WRAPPED_VAR
(, 
ESCDELAY
);

1340 
NCURSES_WRAPPED_VAR
(, 
LINES
);

1341 
NCURSES_WRAPPED_VAR
(, 
TABSIZE
);

1343 
	#curs¸
 
	`NCURSES_PUBLIC_VAR
(
	`curs¸
())

	)

1344 
	#√ws¸
 
	`NCURSES_PUBLIC_VAR
(
	`√ws¸
())

	)

1345 
	#°ds¸
 
	`NCURSES_PUBLIC_VAR
(
	`°ds¸
())

	)

1346 
	#âyty≥
 
	`NCURSES_PUBLIC_VAR
(
	`âyty≥
())

	)

1347 
	#COLORS
 
	`NCURSES_PUBLIC_VAR
(
	`COLORS
())

	)

1348 
	#COLOR_PAIRS
 
	`NCURSES_PUBLIC_VAR
(
	`COLOR_PAIRS
())

	)

1349 
	#COLS
 
	`NCURSES_PUBLIC_VAR
(
	`COLS
())

	)

1350 
	#ESCDELAY
 
	`NCURSES_PUBLIC_VAR
(
	`ESCDELAY
())

	)

1351 
	#LINES
 
	`NCURSES_PUBLIC_VAR
(
	`LINES
())

	)

1352 
	#TABSIZE
 
	`NCURSES_PUBLIC_VAR
(
	`TABSIZE
())

	)

1356 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
curs¸
;

1357 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
√ws¸
;

1358 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
°ds¸
;

1359 
NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

1360 
NCURSES_EXPORT_VAR
(Ë
COLORS
;

1361 
NCURSES_EXPORT_VAR
(Ë
COLOR_PAIRS
;

1362 
NCURSES_EXPORT_VAR
(Ë
COLS
;

1363 
NCURSES_EXPORT_VAR
(Ë
ESCDELAY
;

1364 
NCURSES_EXPORT_VAR
(Ë
LINES
;

1365 
NCURSES_EXPORT_VAR
(Ë
TABSIZE
;

1381 
	#KEY_CODE_YES
 0400

	)

1382 
	#KEY_MIN
 0401

	)

1383 
	#KEY_BREAK
 0401

	)

1384 
	#KEY_SRESET
 0530

	)

1385 
	#KEY_RESET
 0531

	)

1389 
	#KEY_DOWN
 0402

	)

1390 
	#KEY_UP
 0403

	)

1391 
	#KEY_LEFT
 0404

	)

1392 
	#KEY_RIGHT
 0405

	)

1393 
	#KEY_HOME
 0406

	)

1394 
	#KEY_BACKSPACE
 0407

	)

1395 
	#KEY_F0
 0410

	)

1396 
	#KEY_F
(
n
Ë(
KEY_F0
+“)Ë

	)

1397 
	#KEY_DL
 0510

	)

1398 
	#KEY_IL
 0511

	)

1399 
	#KEY_DC
 0512

	)

1400 
	#KEY_IC
 0513

	)

1401 
	#KEY_EIC
 0514

	)

1402 
	#KEY_CLEAR
 0515

	)

1403 
	#KEY_EOS
 0516

	)

1404 
	#KEY_EOL
 0517

	)

1405 
	#KEY_SF
 0520

	)

1406 
	#KEY_SR
 0521

	)

1407 
	#KEY_NPAGE
 0522

	)

1408 
	#KEY_PPAGE
 0523

	)

1409 
	#KEY_STAB
 0524

	)

1410 
	#KEY_CTAB
 0525

	)

1411 
	#KEY_CATAB
 0526

	)

1412 
	#KEY_ENTER
 0527

	)

1413 
	#KEY_PRINT
 0532

	)

1414 
	#KEY_LL
 0533

	)

1415 
	#KEY_A1
 0534

	)

1416 
	#KEY_A3
 0535

	)

1417 
	#KEY_B2
 0536

	)

1418 
	#KEY_C1
 0537

	)

1419 
	#KEY_C3
 0540

	)

1420 
	#KEY_BTAB
 0541

	)

1421 
	#KEY_BEG
 0542

	)

1422 
	#KEY_CANCEL
 0543

	)

1423 
	#KEY_CLOSE
 0544

	)

1424 
	#KEY_COMMAND
 0545

	)

1425 
	#KEY_COPY
 0546

	)

1426 
	#KEY_CREATE
 0547

	)

1427 
	#KEY_END
 0550

	)

1428 
	#KEY_EXIT
 0551

	)

1429 
	#KEY_FIND
 0552

	)

1430 
	#KEY_HELP
 0553

	)

1431 
	#KEY_MARK
 0554

	)

1432 
	#KEY_MESSAGE
 0555

	)

1433 
	#KEY_MOVE
 0556

	)

1434 
	#KEY_NEXT
 0557

	)

1435 
	#KEY_OPEN
 0560

	)

1436 
	#KEY_OPTIONS
 0561

	)

1437 
	#KEY_PREVIOUS
 0562

	)

1438 
	#KEY_REDO
 0563

	)

1439 
	#KEY_REFERENCE
 0564

	)

1440 
	#KEY_REFRESH
 0565

	)

1441 
	#KEY_REPLACE
 0566

	)

1442 
	#KEY_RESTART
 0567

	)

1443 
	#KEY_RESUME
 0570

	)

1444 
	#KEY_SAVE
 0571

	)

1445 
	#KEY_SBEG
 0572

	)

1446 
	#KEY_SCANCEL
 0573

	)

1447 
	#KEY_SCOMMAND
 0574

	)

1448 
	#KEY_SCOPY
 0575

	)

1449 
	#KEY_SCREATE
 0576

	)

1450 
	#KEY_SDC
 0577

	)

1451 
	#KEY_SDL
 0600

	)

1452 
	#KEY_SELECT
 0601

	)

1453 
	#KEY_SEND
 0602

	)

1454 
	#KEY_SEOL
 0603

	)

1455 
	#KEY_SEXIT
 0604

	)

1456 
	#KEY_SFIND
 0605

	)

1457 
	#KEY_SHELP
 0606

	)

1458 
	#KEY_SHOME
 0607

	)

1459 
	#KEY_SIC
 0610

	)

1460 
	#KEY_SLEFT
 0611

	)

1461 
	#KEY_SMESSAGE
 0612

	)

1462 
	#KEY_SMOVE
 0613

	)

1463 
	#KEY_SNEXT
 0614

	)

1464 
	#KEY_SOPTIONS
 0615

	)

1465 
	#KEY_SPREVIOUS
 0616

	)

1466 
	#KEY_SPRINT
 0617

	)

1467 
	#KEY_SREDO
 0620

	)

1468 
	#KEY_SREPLACE
 0621

	)

1469 
	#KEY_SRIGHT
 0622

	)

1470 
	#KEY_SRSUME
 0623

	)

1471 
	#KEY_SSAVE
 0624

	)

1472 
	#KEY_SSUSPEND
 0625

	)

1473 
	#KEY_SUNDO
 0626

	)

1474 
	#KEY_SUSPEND
 0627

	)

1475 
	#KEY_UNDO
 0630

	)

1476 
	#KEY_MOUSE
 0631

	)

1477 
	#KEY_RESIZE
 0632

	)

1478 
	#KEY_EVENT
 0633

	)

1480 
	#KEY_MAX
 0777

	)

1490 #i‡
NCURSES_MOUSE_VERSION
 > 1

1491 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 5))

	)

1493 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 6))

	)

1496 
	#NCURSES_BUTTON_RELEASED
 001L

	)

1497 
	#NCURSES_BUTTON_PRESSED
 002L

	)

1498 
	#NCURSES_BUTTON_CLICKED
 004L

	)

1499 
	#NCURSES_DOUBLE_CLICKED
 010L

	)

1500 
	#NCURSES_TRIPLE_CLICKED
 020L

	)

1501 
	#NCURSES_RESERVED_EVENT
 040L

	)

1504 
	#BUTTON1_RELEASED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_RELEASED
)

	)

1505 
	#BUTTON1_PRESSED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_PRESSED
)

	)

1506 
	#BUTTON1_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_CLICKED
)

	)

1507 
	#BUTTON1_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_DOUBLE_CLICKED
)

	)

1508 
	#BUTTON1_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_TRIPLE_CLICKED
)

	)

1510 
	#BUTTON2_RELEASED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_RELEASED
)

	)

1511 
	#BUTTON2_PRESSED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_PRESSED
)

	)

1512 
	#BUTTON2_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_CLICKED
)

	)

1513 
	#BUTTON2_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_DOUBLE_CLICKED
)

	)

1514 
	#BUTTON2_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_TRIPLE_CLICKED
)

	)

1516 
	#BUTTON3_RELEASED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_RELEASED
)

	)

1517 
	#BUTTON3_PRESSED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_PRESSED
)

	)

1518 
	#BUTTON3_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_CLICKED
)

	)

1519 
	#BUTTON3_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_DOUBLE_CLICKED
)

	)

1520 
	#BUTTON3_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_TRIPLE_CLICKED
)

	)

1522 
	#BUTTON4_RELEASED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_RELEASED
)

	)

1523 
	#BUTTON4_PRESSED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_PRESSED
)

	)

1524 
	#BUTTON4_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_CLICKED
)

	)

1525 
	#BUTTON4_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_DOUBLE_CLICKED
)

	)

1526 
	#BUTTON4_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_TRIPLE_CLICKED
)

	)

1532 #i‡
NCURSES_MOUSE_VERSION
 > 1

1534 
	#BUTTON5_RELEASED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_RELEASED
)

	)

1535 
	#BUTTON5_PRESSED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_PRESSED
)

	)

1536 
	#BUTTON5_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_CLICKED
)

	)

1537 
	#BUTTON5_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_DOUBLE_CLICKED
)

	)

1538 
	#BUTTON5_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_TRIPLE_CLICKED
)

	)

1540 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(6, 0001L)

	)

1541 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(6, 0002L)

	)

1542 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(6, 0004L)

	)

1543 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(6, 0010L)

	)

1547 
	#BUTTON1_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_RESERVED_EVENT
)

	)

1548 
	#BUTTON2_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_RESERVED_EVENT
)

	)

1549 
	#BUTTON3_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_RESERVED_EVENT
)

	)

1550 
	#BUTTON4_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_RESERVED_EVENT
)

	)

1552 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(5, 0001L)

	)

1553 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(5, 0002L)

	)

1554 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(5, 0004L)

	)

1555 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(5, 0010L)

	)

1559 
	#ALL_MOUSE_EVENTS
 (
REPORT_MOUSE_POSITION
 - 1)

	)

1562 
	#BUTTON_RELEASE
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 001))

	)

1563 
	#BUTTON_PRESS
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 002))

	)

1564 
	#BUTTON_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 004))

	)

1565 
	#BUTTON_DOUBLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 010))

	)

1566 
	#BUTTON_TRIPLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 020))

	)

1567 
	#BUTTON_RESERVED_EVENT
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 040))

	)

1571 
	gid
;

1572 
	gx
, 
	gy
, 
	gz
;

1573 
mmask_t
 
	gb°©e
;

1575 
	tMEVENT
;

1577 
NCURSES_EXPORT
(
boﬁ
Ë
has_mou£
();

1578 
NCURSES_EXPORT
(Ë
gëmou£
 (
MEVENT
 *);

1579 
NCURSES_EXPORT
(Ë
ungëmou£
 (
MEVENT
 *);

1580 
NCURSES_EXPORT
(
mmask_t
Ë
mou£mask
 (mmask_t, mmask_t *);

1581 
NCURSES_EXPORT
(
boﬁ
Ë
wí˛o£
 (c⁄° 
WINDOW
 *, , );

1582 
NCURSES_EXPORT
(Ë
mou£öãrvÆ
 ();

1583 
NCURSES_EXPORT
(
boﬁ
Ë
wmou£_åafo
 (c⁄° 
WINDOW
*, *, *, bool);

1584 
NCURSES_EXPORT
(
boﬁ
Ë
mou£_åafo
 (*, *, bool);

1586 #i‡
NCURSES_SP_FUNCS


1587 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_mou£
Ë(
SCREEN
*);

1588 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gëmou£
Ë(
SCREEN
*, 
MEVENT
 *);

1589 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëmou£
Ë(
SCREEN
*,
MEVENT
 *);

1590 
NCURSES_EXPORT
(
mmask_t
Ë
NCURSES_SP_NAME
(
mou£mask
Ë(
SCREEN
*, mmask_t, mmask_t *);

1591 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mou£öãrvÆ
Ë(
SCREEN
*, );

1594 
	#mou£_åafo
(
y
,
x
,
to_s¸ìn
Ë
	`wmou£_åafo
(
°ds¸
,y,x,to_s¸ìn)

	)

1598 
NCURSES_EXPORT
(Ë
m˝röt
 (*, );

1599 
NCURSES_EXPORT
(Ë
has_key
 ();

1601 #i‡
NCURSES_SP_FUNCS


1602 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
has_key
Ë(
SCREEN
*, );

1603 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
m˝röt
Ë(
SCREEN
*, *, );

1608 
NCURSES_EXPORT
(Ë
_åa˚f
 (c⁄° *, ...Ë
GCC_PRINTFLIKE
(1,2);

1609 
NCURSES_EXPORT
(Ë
_åa˚dump
 (c⁄° *, 
WINDOW
 *);

1610 
NCURSES_EXPORT
(*Ë
_åa˚©å
 (
©å_t
);

1611 
NCURSES_EXPORT
(*Ë
_åa˚©å2
 (, 
chty≥
);

1612 
NCURSES_EXPORT
(*Ë
_nc_åa˚bôs
 ();

1613 
NCURSES_EXPORT
(*Ë
_åa˚ch¨
 ();

1614 
NCURSES_EXPORT
(*Ë
_åa˚chty≥
 (
chty≥
);

1615 
NCURSES_EXPORT
(*Ë
_åa˚chty≥2
 (, 
chty≥
);

1616 #ifde‡
NCURSES_WIDECHAR


1617 
	#_åa˚ch_t
 
_åa˚cch¨_t


	)

1618 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t
 (c⁄° 
cch¨_t
 *);

1619 
	#_åa˚ch_t2
 
_åa˚cch¨_t2


	)

1620 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t2
 (, c⁄° 
cch¨_t
 *);

1622 
	#_åa˚ch_t
 
_åa˚chty≥


	)

1623 
	#_åa˚ch_t2
 
_åa˚chty≥2


	)

1625 
NCURSES_EXPORT
(*Ë
_åa˚mou£
 (c⁄° 
MEVENT
 *);

1626 
NCURSES_EXPORT
(Ë
åa˚
 (const );

1629 
	#TRACE_DISABLE
 0x0000

	)

1630 
	#TRACE_TIMES
 0x0001

	)

1631 
	#TRACE_TPUTS
 0x0002

	)

1632 
	#TRACE_UPDATE
 0x0004

	)

1633 
	#TRACE_MOVE
 0x0008

	)

1634 
	#TRACE_CHARPUT
 0x0010

	)

1635 
	#TRACE_ORDINARY
 0x001F

	)

1636 
	#TRACE_CALLS
 0x0020

	)

1637 
	#TRACE_VIRTPUT
 0x0040

	)

1638 
	#TRACE_IEVENT
 0x0080

	)

1639 
	#TRACE_BITS
 0x0100

	)

1640 
	#TRACE_ICALLS
 0x0200

	)

1641 
	#TRACE_CCALLS
 0x0400

	)

1642 
	#TRACE_DATABASE
 0x0800

	)

1643 
	#TRACE_ATTRS
 0x1000

	)

1645 
	#TRACE_SHIFT
 13

	)

1646 
	#TRACE_MAXIMUM
 ((1 << 
TRACE_SHIFT
Ë- 1Ë

	)

1648 #i‡
deföed
(
TRACE
Ë|| deföed(
NCURSES_TEST
)

1649 
NCURSES_EXPORT_VAR
(Ë
_nc_›timize_íabÀ
;

1650 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf
 (const *);

1651 
	#OPTIMIZE_MVCUR
 0x01

	)

1652 
	#OPTIMIZE_HASHMAP
 0x02

	)

1653 
	#OPTIMIZE_SCROLL
 0x04

	)

1654 
	#OPTIMIZE_ALL
 0xf‡

	)

1657 
	~<un˘æ.h
>

1659 #ifde‡
__˝lu•lus


1661 #i‚de‡
NCURSES_NOMACROS


1664 #unde‡
box


1665 #unde‡
˛ór


1666 #unde‡
îa£


1667 #unde‡
move


1668 #unde‡
ª‰esh


	@/usr/include/cursesapp.h

36 #i‚de‡
NCURSES_CURSESAPP_H_ö˛


37 
	#NCURSES_CURSESAPP_H_ö˛


	)

39 
	~<curs¶k.h
>

41 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sAµliˇti⁄
 {

42 
	mpublic
:

43 
	s_¶k_lök
 {

44 
_¶k_lök
* 
¥ev
;

45 
So·_Labñ_Key_Së
* 
	mSLKs
;

46 } 
	tSLK_Lök
;

47 
	g¥iv©e
:

48 
röô
(
NCur£sWödow
& 
w
);

49 
NCur£sAµliˇti⁄
* 
	gtheAµ
;

51 
SLK_Lök
* 
	g¶k_°ack
;

53 
	g¥Ÿe˘ed
:

54 
NCur£sWödow
* 
tôÀWödow
;

56 
boﬁ
 
	gb_Cﬁ‹s
;

57 
NCur£sWödow
* 
	gRoŸ_Wödow
;

61 
vútuÆ
 
öô
(
boﬁ
 
bCﬁ‹s
);

65 
vútuÆ
 
	$tôÀsize
() const {

67 
	}
}

71 
vútuÆ
 
	$tôÀ
() {

72 
	}
}

76 
vútuÆ
 
	gSo·_Labñ_Key_Së
::
Labñ_Layout
 
	$u£SLKs
() const {

77  
So·_Labñ_Key_Së
::
N⁄e
;

78 
	}
}

82 
vútuÆ
 
	$öô_œbñs
(
So·_Labñ_Key_Së
& 
S
) const {

83 
	}
}

87 
vútuÆ
 
run
() = 0;

91 
NCur£sAµliˇti⁄
(
boﬁ
 
w™tCﬁ‹s
 = 
FALSE
);

93 
	gNCur£sAµliˇti⁄
& 
	g›î©‹
=(c⁄° 
NCur£sAµliˇti⁄
& 
rhs
)

95 i‡(
this
 !&
rhs
) {

96 *
this
 = 
rhs
;

98  *
	gthis
;

101 
	$NCur£sAµliˇti⁄
(c⁄° 
NCur£sAµliˇti⁄
& 
rhs
)

102 : 
	`b_Cﬁ‹s
(
rhs
.
b_Cﬁ‹s
),

103 
	$RoŸ_Wödow
(
rhs
.
RoŸ_Wödow
)

105 
	}
}

107 
	gpublic
:

108 
vútuÆ
 ~
NCur£sAµliˇti⁄
();

111 
NCur£sAµliˇti⁄
* 
	$gëAµliˇti⁄
() {

112  
theAµ
;

113 
	}
}

116 
	$›î©‹
()();

120 
vútuÆ
 
	$h™dÀArgs
(
¨gc
, * 
¨gv
[]) {

121 
	}
}

124 
ölöe
 
boﬁ
 
	$u£Cﬁ‹s
() const {

125  
b_Cﬁ‹s
;

126 
	}
}

130 
push
(
So·_Labñ_Key_Së
& 
S
);

134 
boﬁ
 
p›
();

137 
So·_Labñ_Key_Së
* 
	$t›
() const;

140 
vútuÆ
 
chty≥
 
	$f‹egrounds
() const {

141  
b_Cﬁ‹s
 ? 
	`COLOR_PAIR
(1Ë: 
A_BOLD
;

142 
	}
}

145 
vútuÆ
 
chty≥
 
	$backgrounds
() const {

146  
b_Cﬁ‹s
 ? 
	`COLOR_PAIR
(2Ë: 
A_NORMAL
;

147 
	}
}

150 
vútuÆ
 
chty≥
 
	$öa˘ives
() const {

151  
b_Cﬁ‹s
 ? (
	`COLOR_PAIR
(3)|
A_DIM
) : A_DIM;

152 
	}
}

155 
vútuÆ
 
chty≥
 
	$œbñs
() const {

156  
b_Cﬁ‹s
 ? 
	`COLOR_PAIR
(4Ë: 
A_NORMAL
;

157 
	}
}

160 
vútuÆ
 
chty≥
 
	$dülog_backgrounds
() const {

161  
b_Cﬁ‹s
 ? 
	`COLOR_PAIR
(4Ë: 
A_NORMAL
;

162 
	}
}

165 
vútuÆ
 
chty≥
 
	$wödow_backgrounds
() const {

166  
b_Cﬁ‹s
 ? 
	`COLOR_PAIR
(5Ë: 
A_NORMAL
;

167 
	}
}

170 
vútuÆ
 
chty≥
 
	$s¸ìn_tôÀs
() const {

171  
b_Cﬁ‹s
 ? 
	`COLOR_PAIR
(6Ë: 
A_BOLD
;

172 
	}
}

	@/usr/include/cursesf.h

36 #i‚de‡
NCURSES_CURSESF_H_ö˛


37 
	#NCURSES_CURSESF_H_ö˛
 1

	)

39 
	~<cur£•.h
>

41 #i‚de‡
__EXT_QNX


42 
	~<°rög.h
>

46 
	~<f‹m.h
>

53 
˛ass
 
NCURSES_IMPEXP
 
NCur£sF‹mFõld
;

57 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sFõldTy≥


59 
‰õnd
 
˛ass
 
	mNCur£sF‹mFõld
;

61 
	m¥Ÿe˘ed
:

62 
FIELDTYPE
* 
fõldty≥
;

64 
ölöe
 
	$OnEº‹
(
îr
Ëc⁄° 
	$THROWS
(
NCur£sF‹mEx˚±i⁄
) {

65 i‡(
îr
!=
E_OK
)

66 
	`THROW
(
√w
 
	`NCur£sF‹mEx˚±i⁄
 (
îr
));

69 
	$NCur£sFõldTy≥
(
FIELDTYPE
 *
f
Ë: 
	$fõldty≥
(
f
) {

70 
	}
}

72 
vútuÆ
 ~
	$NCur£sFõldTy≥
(Ë{
	}
}

75 
vútuÆ
 
£t
(
NCur£sF‹mFõld
& 
f
) = 0;

77 
	gpublic
:

78 
	$NCur£sFõldTy≥
()

79 : 
	`fõldty≥
(
	`STATIC_CAST
(
FIELDTYPE
*)(0))

81 
	}
}

83 
NCur£sFõldTy≥
& 
›î©‹
=(c⁄° NCur£sFõldTy≥& 
rhs
)

85 i‡(
this
 !&
rhs
) {

86 *
this
 = 
rhs
;

88  *
	gthis
;

91 
	$NCur£sFõldTy≥
(c⁄° 
NCur£sFõldTy≥
& 
rhs
)

92 : 
	$fõldty≥
(
rhs
.
fõldty≥
)

94 
	}
}

103 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sF‹mFõld


105 
‰õnd
 
˛ass
 
	mNCur£sF‹m
;

107 
	m¥Ÿe˘ed
:

108 
FIELD
 *
fõld
;

109 
NCur£sFõldTy≥
* 
	m·y≥
;

112 
ölöe
 
	$OnEº‹
 (
îr
Ëc⁄° 
	$THROWS
(
NCur£sF‹mEx˚±i⁄
) {

113 i‡(
îr
 !
E_OK
)

114 
	`THROW
(
√w
 
	`NCur£sF‹mEx˚±i⁄
 (
îr
));

117 
public
:

119 
	$NCur£sF‹mFõld
()

120 : 
	`fõld
(
	`STATIC_CAST
(
FIELD
*)(0)),

121 
	`·y≥
(
	`STATIC_CAST
(
NCur£sFõldTy≥
*)(0))

123 
	}
}

126 
	$NCur£sF‹mFõld
 (
rows
,

127 
ncﬁs
,

128 
fú°_row
 = 0,

129 
fú°_cﬁ
 = 0,

130 
offs¸ìn_rows
 = 0,

131 
addôi⁄Æ_buf„rs
 = 0)

132 : 
	`fõld
(0),

133 
	`·y≥
(
	`STATIC_CAST
(
NCur£sFõldTy≥
*)(0))

135 
fõld
 = ::
	`√w_fõld
(
rows
, 
ncﬁs
, 
fú°_row
, 
fú°_cﬁ
,

136 
offs¸ìn_rows
, 
addôi⁄Æ_buf„rs
);

137 i‡(!
fõld
)

138 
	`OnEº‹
(
î∫o
);

139 
	}
}

141 
	gNCur£sF‹mFõld
& 
	g›î©‹
=(c⁄° 
NCur£sF‹mFõld
& 
rhs
)

143 i‡(
this
 !&
rhs
) {

144 *
this
 = 
rhs
;

146  *
	gthis
;

149 
	$NCur£sF‹mFõld
(c⁄° 
NCur£sF‹mFõld
& 
rhs
)

150 : 
	`fõld
(
rhs
.
fõld
), 
	$·y≥
(
rhs
.
·y≥
)

152 
	}
}

154 
	gvútuÆ
 ~
NCur£sF‹mFõld
 ();

157 
ölöe
 
NCur£sF‹mFõld
* 
	$dup
(
fú°_row
, 
fú°_cﬁ
)

159 
NCur£sF‹mFõld
* 
f
 = 
√w
 
	`NCur£sF‹mFõld
();

160 i‡(!
f
)

161 
	`OnEº‹
(
E_SYSTEM_ERROR
);

163 
f
->
·y≥
 = ftype;

164 
f
->
fõld
 = ::
	`dup_fõld
(fõld,
fú°_row
,
fú°_cﬁ
);

165 i‡(!
f
->
fõld
)

166 
	`OnEº‹
(
î∫o
);

168  
f
;

169 
	}
}

172 
ölöe
 
NCur£sF‹mFõld
* 
	$lök
(
fú°_row
, 
fú°_cﬁ
) {

173 
NCur£sF‹mFõld
* 
f
 = 
√w
 
	`NCur£sF‹mFõld
();

174 i‡(!
f
)

175 
	`OnEº‹
(
E_SYSTEM_ERROR
);

177 
f
->
·y≥
 = ftype;

178 
f
->
fõld
 = ::
	`lök_fõld
(fõld,
fú°_row
,
fú°_cﬁ
);

179 i‡(!
f
->
fõld
)

180 
	`OnEº‹
(
î∫o
);

182  
f
;

183 
	}
}

186 
ölöe
 
FIELD
* 
	$gë_fõld
() const {

187  
fõld
;

188 
	}
}

191 
ölöe
 
	$öfo
(& 
rows
, & 
ncﬁs
,

192 & 
fú°_row
, & 
fú°_cﬁ
,

193 & 
offs¸ìn_rows
, & 
addôi⁄Æ_buf„rs
) const {

194 
	`OnEº‹
(::
	`fõld_öfo
(
fõld
, &
rows
, &
ncﬁs
,

195 &
fú°_row
, &
fú°_cﬁ
,

196 &
offs¸ìn_rows
, &
addôi⁄Æ_buf„rs
));

197 
	}
}

200 
ölöe
 
	$dy«mic_öfo
(& 
dy«mic_rows
, & 
dy«mic_cﬁs
,

201 & 
max_growth
) const {

202 
	`OnEº‹
(::
	`dy«mic_fõld_öfo
(
fõld
, &
dy«mic_rows
, &
dy«mic_cﬁs
,

203 &
max_growth
));

204 
	}
}

208 
ölöe
 
	$£t_maximum_growth
(
growth
 = 0) {

209 
	`OnEº‹
(::
	`£t_max_fõld
(
fõld
,
growth
));

210 
	}
}

213 
ölöe
 
	$move
(
row
, 
cﬁ
) {

214 
	`OnEº‹
(::
	`move_fõld
(
fõld
,
row
,
cﬁ
));

215 
	}
}

218 
ölöe
 
	$√w_∑ge
(
boﬁ
 
∑geFœg
 = 
FALSE
) {

219 
	`OnEº‹
(::
	`£t_√w_∑ge
(
fõld
,
∑geFœg
));

220 
	}
}

223 
ölöe
 
boﬁ
 
	$is_√w_∑ge
() const {

224  ::
	`√w_∑ge
(
fõld
);

225 
	}
}

228 
ölöe
 
	$£t_ju°ifiˇti⁄
(
ju°
) {

229 
	`OnEº‹
(::
	`£t_fõld_ju°
(
fõld
,
ju°
));

230 
	}
}

233 
ölöe
 
	$ju°ifiˇti⁄
() const {

234  ::
	`fõld_ju°
(
fõld
);

235 
	}
}

237 
ölöe
 
	$£t_f‹eground
(
chty≥
 
f‹eground
) {

238 
	`OnEº‹
(::
	`£t_fõld_f‹e
(
fõld
,
f‹eground
));

239 
	}
}

242 
ölöe
 
chty≥
 
	$f‹e
() const {

243  ::
	`fõld_f‹e
(
fõld
);

244 
	}
}

247 
ölöe
 
	$£t_background
(
chty≥
 
background
) {

248 
	`OnEº‹
(::
	`£t_fõld_back
(
fõld
,
background
));

249 
	}
}

252 
ölöe
 
chty≥
 
	$back
() const {

253  ::
	`fõld_back
(
fõld
);

254 
	}
}

257 
ölöe
 
	$£t_∑d_ch¨a˘î
(
∑ddög
) {

258 
	`OnEº‹
(::
	`£t_fõld_∑d
(
fõld
, 
∑ddög
));

259 
	}
}

262 
ölöe
 
	$∑d
() const {

263  ::
	`fõld_∑d
(
fõld
);

264 
	}
}

267 
ölöe
 
	$›ti⁄s_⁄
 (
Fõld_O±i⁄s
 
›ts
) {

268 
	`OnEº‹
 (::
	`fõld_›ts_⁄
 (
fõld
, 
›ts
));

269 
	}
}

272 
ölöe
 
	$›ti⁄s_off
 (
Fõld_O±i⁄s
 
›ts
) {

273 
	`OnEº‹
 (::
	`fõld_›ts_off
 (
fõld
, 
›ts
));

274 
	}
}

277 
ölöe
 
Fõld_O±i⁄s
 
	$›ti⁄s
 () const {

278  ::
	`fõld_›ts
 (
fõld
);

279 
	}
}

282 
ölöe
 
	$£t_›ti⁄s
 (
Fõld_O±i⁄s
 
›ts
) {

283 
	`OnEº‹
 (::
	`£t_fõld_›ts
 (
fõld
, 
›ts
));

284 
	}
}

287 
ölöe
 
	$£t_ch™ged
(
boﬁ
 
ch™geFœg
 = 
TRUE
) {

288 
	`OnEº‹
(::
	`£t_fõld_°©us
(
fõld
,
ch™geFœg
));

289 
	}
}

292 
ölöe
 
boﬁ
 
	$ch™ged
() const {

293  ::
	`fõld_°©us
(
fõld
);

294 
	}
}

298 
ölöe
 (
ödex
)() const {

299  ::
	`fõld_ödex
(
fõld
);

300 
	}
}

303 
ölöe
 
	$£t_vÆue
(c⁄° *
vÆ
, 
buf„r
 = 0) {

304 
	`OnEº‹
(::
	`£t_fõld_buf„r
(
fõld
,
buf„r
,
vÆ
));

305 
	}
}

308 
ölöe
 * 
	$vÆue
(
buf„r
 = 0) const {

309  ::
	`fõld_buf„r
(
fõld
,
buf„r
);

310 
	}
}

313 
ölöe
 
	$£t_fõldty≥
(
NCur£sFõldTy≥
& 
f
) {

314 
·y≥
 = &
f
;

315 
f
.
	`£t
(*
this
);

316 
	}
}

319 
ölöe
 
NCur£sFõldTy≥
* 
	$fõldty≥
() const {

320  
·y≥
;

321 
	}
}

329 
_nc_xx_‰m_öô
(
FORM
 *);

330 
_nc_xx_‰m_ãrm
(
FORM
 *);

331 
_nc_xx_Êd_öô
(
FORM
 *);

332 
_nc_xx_Êd_ãrm
(
FORM
 *);

340 ˛as†
	cNCURSES_IMPEXP
 
NCur£sF‹m
 : 
public
 
NCur£sP™ñ


342 
¥Ÿe˘ed
:

343 
FORM
* 
f‹m
;

345 
¥iv©e
:

346 
NCur£sWödow
* 
sub
;

347 
boﬁ
 
b_sub_ow√r
;

348 
boﬁ
 
b_‰amed
;

349 
boﬁ
 
b_autoDñëe
;

351 
NCur£sF‹mFõld
** 
my_fõlds
;

356 * 
m_u£r
;

357 c⁄° 
NCur£sF‹m
* 
m_back
;

358 c⁄° 
FORM
* 
m_ow√r
;

359 } 
	tU£rHook
;

362 
ölöe
 
NCur£sF‹m
* 
	$gëHook
(c⁄° 
FORM
 *
f
) {

363 
U£rHook
* 
hook
 = 
ªöãΩªt_ˇ°
<U£rHook*>(::
	`f‹m_u£Ωå
(
f
));

364 
	`as£π
(
hook
 !0 && hook->
m_ow√r
==
f
);

365  
c⁄°_ˇ°
<
NCur£sF‹m
*>(
hook
->
m_back
);

366 
	}
}

368 
‰õnd
 
_nc_xx_‰m_öô
(
FORM
 *);

369 
‰õnd
 
_nc_xx_‰m_ãrm
(
FORM
 *);

370 
‰õnd
 
_nc_xx_Êd_öô
(
FORM
 *);

371 
‰õnd
 
_nc_xx_Êd_ãrm
(
FORM
 *);

374 
FIELD
** 
m≠Fõlds
(
NCur£sF‹mFõld
* 
nfõlds
[]);

376 
¥Ÿe˘ed
:

378 
ölöe
 
	$£t_u£r
(*
u£r
) {

379 
U£rHook
* 
u±r
 = 
ªöãΩªt_ˇ°
<U£rHook*>(::
	`f‹m_u£Ωå
 (
f‹m
));

380 
	`as£π
 (
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
f‹m
);

381 
u±r
->
m_u£r
 = 
u£r
;

382 
	}
}

384 
ölöe
 *
	$gë_u£r
() {

385 
U£rHook
* 
u±r
 = 
ªöãΩªt_ˇ°
<U£rHook*>(::
	`f‹m_u£Ωå
 (
f‹m
));

386 
	`as£π
 (
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
f‹m
);

387  
u±r
->
m_u£r
;

388 
	}
}

390 
InôF‹m
 (
NCur£sF‹mFõld
* 
Fõlds
[],

391 
boﬁ
 
wôh_‰ame
,

392 
boﬁ
 
autoDñëeFõlds
);

394 
ölöe
 
	$OnEº‹
 (
îr
Ëc⁄° 
	$THROWS
(
NCur£sF‹mEx˚±i⁄
) {

395 i‡(
îr
 !
E_OK
)

396 
	`THROW
(
√w
 
	`NCur£sF‹mEx˚±i⁄
 (
îr
));

397 
	}
}

400 
vútuÆ
 
drivî
 (
c
) ;

404 
	$NCur£sF‹m
–
∆öes
,

405 
ncﬁs
,

406 
begö_y
 = 0,

407 
begö_x
 = 0)

408 : 
	`NCur£sP™ñ
(
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
),

409 
	`f‹m
 (
	`STATIC_CAST
(
FORM
*)(0)),

410 
	`sub
(0),

411 
	`b_sub_ow√r
(0),

412 
	`b_‰amed
(0),

413 
	`b_autoDñëe
(0),

414 
	$my_fõlds
(0)

416 
	}
}

418 
public
:

420 
	$NCur£sF‹m
 (
NCur£sF‹mFõld
* 
Fõlds
[],

421 
boﬁ
 
wôh_‰ame
=
FALSE
,

422 
boﬁ
 
autoDñëe_Fõlds
=
FALSE
)

423 : 
	`NCur£sP™ñ
(),

424 
	`f‹m
(0),

425 
	`sub
(0),

426 
	`b_sub_ow√r
(0),

427 
	`b_‰amed
(0),

428 
	`b_autoDñëe
(0),

429 
	$my_fõlds
(0)

431 
	`InôF‹m
(
Fõlds
, 
wôh_‰ame
, 
autoDñëe_Fõlds
);

432 
	}
}

435 
	$NCur£sF‹m
 (
NCur£sF‹mFõld
* 
Fõlds
[],

436 
∆öes
,

437 
ncﬁs
,

438 
begö_y
,

439 
begö_x
,

440 
boﬁ
 
wôh_‰ame
=
FALSE
,

441 
boﬁ
 
autoDñëe_Fõlds
=
FALSE
)

442 : 
	`NCur£sP™ñ
(
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
),

443 
	`f‹m
(0),

444 
	`sub
(0),

445 
	`b_sub_ow√r
(0),

446 
	`b_‰amed
(0),

447 
	`b_autoDñëe
(0),

448 
	$my_fõlds
(0)

450 
	`InôF‹m
(
Fõlds
, 
wôh_‰ame
, 
autoDñëe_Fõlds
);

451 
	}
}

453 
NCur£sF‹m
& 
›î©‹
=(c⁄° NCur£sF‹m& 
rhs
)

455 i‡(
this
 !&
rhs
) {

456 *
this
 = 
rhs
;

457 
NCur£sP™ñ
::
›î©‹
=(
rhs
);

459  *
this
;

462 
	$NCur£sF‹m
(c⁄° 
NCur£sF‹m
& 
rhs
)

463 : 
	`NCur£sP™ñ
(
rhs
),

464 
	`f‹m
(
rhs
.
f‹m
),

465 
	`sub
(
rhs
.
sub
),

466 
	`b_sub_ow√r
(
rhs
.
b_sub_ow√r
),

467 
	`b_‰amed
(
rhs
.
b_‰amed
),

468 
	`b_autoDñëe
(
rhs
.
b_autoDñëe
),

469 
	$my_fõlds
(
rhs
.
my_fõlds
)

471 
	}
}

473 
vútuÆ
 ~
NCur£sF‹m
();

476 
vútuÆ
 
£tDeÁu…Aâribuãs
();

479 
ölöe
 
NCur£sF‹mFõld
* 
	$cuºít_fõld
() const {

480  
my_fõlds
[::
	`fõld_ödex
(::
	`cuºít_fõld
(
f‹m
))];

481 
	}
}

484 
£tSubWödow
(
NCur£sWödow
& 
sub
);

487 
ölöe
 
	$£tFõlds
(
NCur£sF‹mFõld
* 
Fõlds
[]) {

488 
	`OnEº‹
(::
	`£t_f‹m_fõlds
(
f‹m
,
	`m≠Fõlds
(
Fõlds
)));

489 
	}
}

492 
ölöe
 
	$u≈o°
 () {

493 
	`OnEº‹
 (::
	`u≈o°_f‹m
 (
f‹m
));

494 
	}
}

497 
ölöe
 
	$po°
(
boﬁ
 
Êag
 = 
TRUE
) {

498 
	`OnEº‹
 (
Êag
 ? ::
	`po°_f‹m
(
f‹m
Ë: ::
	`u≈o°_f‹m
 (form));

499 
	}
}

502 
ölöe
 
	$‰ame
(c⁄° *
tôÀ
=
NULL
, c⁄° * 
btôÀ
=NULL) {

503 i‡(
b_‰amed
)

504 
NCur£sP™ñ
::
	`‰ame
(
tôÀ
,
btôÀ
);

506 
	`OnEº‹
(
E_SYSTEM_ERROR
);

507 
	}
}

509 
ölöe
 
	$bﬁd‰ame
(c⁄° *
tôÀ
=
NULL
, c⁄° * 
btôÀ
=NULL) {

510 i‡(
b_‰amed
)

511 
NCur£sP™ñ
::
	`bﬁd‰ame
(
tôÀ
,
btôÀ
);

513 
	`OnEº‹
(
E_SYSTEM_ERROR
);

514 
	}
}

516 
ölöe
 
	$œbñ
(c⁄° *
t›Labñ
, c⁄° *
bŸtomLabñ
) {

517 i‡(
b_‰amed
)

518 
NCur£sP™ñ
::
	`œbñ
(
t›Labñ
,
bŸtomLabñ
);

520 
	`OnEº‹
(
E_SYSTEM_ERROR
);

521 
	}
}

529 
vútuÆ
 
On_F‹m_Inô
();

533 
vútuÆ
 
On_F‹m_Tîmö©i⁄
();

536 
vútuÆ
 
On_Fõld_Inô
(
NCur£sF‹mFõld
& 
fõld
);

539 
vútuÆ
 
On_Fõld_Tîmö©i⁄
(
NCur£sF‹mFõld
& 
fõld
);

542 
	$sˇÀ
(& 
rows
, & 
ncﬁs
) const {

543 
	`OnEº‹
(::
	`sˇÀ_f‹m
(
f‹m
,&
rows
,&
ncﬁs
));

544 
	}
}

547 
	$cou¡
() const {

548  ::
	`fõld_cou¡
(
f‹m
);

549 
	}
}

552 
	$£t_∑ge
(
∑geNum
) {

553 
	`OnEº‹
(::
	`£t_f‹m_∑ge
(
f‹m
, 
∑geNum
));

554 
	}
}

557 
	$∑ge
() const {

558  ::
	`f‹m_∑ge
(
f‹m
);

559 
	}
}

562 
ölöe
 
	$›ti⁄s_⁄
 (
F‹m_O±i⁄s
 
›ts
) {

563 
	`OnEº‹
 (::
	`f‹m_›ts_⁄
 (
f‹m
, 
›ts
));

564 
	}
}

567 
ölöe
 
	$›ti⁄s_off
 (
F‹m_O±i⁄s
 
›ts
) {

568 
	`OnEº‹
 (::
	`f‹m_›ts_off
 (
f‹m
, 
›ts
));

569 
	}
}

572 
ölöe
 
F‹m_O±i⁄s
 
	$›ti⁄s
 () const {

573  ::
	`f‹m_›ts
 (
f‹m
);

574 
	}
}

577 
ölöe
 
	$£t_›ti⁄s
 (
F‹m_O±i⁄s
 
›ts
) {

578 
	`OnEº‹
 (::
	`£t_f‹m_›ts
 (
f‹m
, 
›ts
));

579 
	}
}

582 
ölöe
 
boﬁ
 
	$d©a_ahód
() const {

583  ::
	`d©a_ahód
(
f‹m
);

584 
	}
}

587 
ölöe
 
boﬁ
 
	$d©a_behöd
() const {

588  ::
	`d©a_behöd
(
f‹m
);

589 
	}
}

592 
ölöe
 
	$posôi⁄_curs‹
 () {

593 
	`OnEº‹
 (::
	`pos_f‹m_curs‹
 (
f‹m
));

594 
	}
}

596 
ölöe
 
	$£t_cuºít
(
NCur£sF‹mFõld
& 
F
) {

597 
	`OnEº‹
 (::
	`£t_cuºít_fõld
(
f‹m
, 
F
.
fõld
));

598 
	}
}

604 
vútuÆ
 
vútuÆize
(
c
);

607 
ölöe
 
NCur£sF‹mFõld
* 
›î©‹
[](
i
) const {

608 i‡–(
i
 < 0Ë|| (ò>::
fõld_cou¡
 (
f‹m
)) )

609 
OnEº‹
 (
E_BAD_ARGUMENT
);

610  
my_fõlds
[
i
];

615 
vútuÆ
 
NCur£sF‹mFõld
* 
	$›î©‹
()();

618 
vútuÆ
 
	$On_Reque°_Díõd
(
c
) const;

619 
vútuÆ
 
	$On_InvÆid_Fõld
(
c
) const;

620 
vútuÆ
 
	$On_Unknown_Comm™d
(
c
) const;

622 
	}
};

631 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cNCURSES_IMPEXP
 
	mNCur£sU£rFõld
 : 
public
 
NCur£sF‹mFõld


633 
public
:

634 
NCur£sU£rFõld
 (
rows
,

635 
ncﬁs
,

636 
fú°_row
 = 0,

637 
fú°_cﬁ
 = 0,

638 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0),

639 
offs¸ìn_rows
 = 0,

640 
addôi⁄Æ_buf„rs
 = 0)

641 : 
	$NCur£sF‹mFõld
 (
rows
, 
ncﬁs
,

642 
fú°_row
, 
fú°_cﬁ
,

643 
offs¸ìn_rows
, 
addôi⁄Æ_buf„rs
) {

644 i‡(
fõld
)

645 
	`OnEº‹
(::
	`£t_fõld_u£Ωå
(
fõld
, 
	`STATIC_CAST
(*)(
p_U£rD©a
)));

648 
vútuÆ
 ~
	$NCur£sU£rFõld
(Ë{
	}
};

650 
ölöe
 c⁄° 
T
* 
	$U£rD©a
 () const {

651  
ªöãΩªt_ˇ°
<c⁄° 
T
*>(::
	`fõld_u£Ωå
 (
fõld
));

652 
	}
}

654 
ölöe
 
vútuÆ
 
	$£tU£rD©a
(c⁄° 
T
* 
p_U£rD©a
) {

655 i‡(
fõld
)

656 
	`OnEº‹
 (::
	`£t_fõld_u£Ωå
 (
fõld
, 
	`STATIC_CAST
(*)(
p_U£rD©a
)));

657 
	}
}

664 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cNCURSES_IMPEXP
 
	mNCur£sU£rF‹m
 : 
public
 
NCur£sF‹m


666 
¥Ÿe˘ed
:

669 
NCur£sU£rF‹m
–
∆öes
,

670 
ncﬁs
,

671 
begö_y
 = 0,

672 
begö_x
 = 0,

673 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0))

674 : 
	$NCur£sF‹m
(
∆öes
,
ncﬁs
,
begö_y
,
begö_x
) {

675 i‡(
f‹m
)

676 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
p_U£rD©a
));

679 
public
:

680 
	`NCur£sU£rF‹m
 (
NCur£sF‹mFõld
 
Fõlds
[],

681 c⁄° 
T
* 
p_U£rD©a
 = 
	`STATIC_CAST
(T*)(0),

682 
boﬁ
 
wôh_‰ame
=
FALSE
,

683 
boﬁ
 
autoDñëe_Fõlds
=
FALSE
)

684 : 
	$NCur£sF‹m
 (
Fõlds
, 
wôh_‰ame
, 
autoDñëe_Fõlds
) {

685 i‡(
f‹m
)

686 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
p_U£rD©a
));

687 
	}
};

689 
NCur£sU£rF‹m
 (
NCur£sF‹mFõld
 
Fõlds
[],

690 
∆öes
,

691 
ncﬁs
,

692 
begö_y
 = 0,

693 
begö_x
 = 0,

694 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0),

695 
boﬁ
 
wôh_‰ame
=
FALSE
,

696 
boﬁ
 
autoDñëe_Fõlds
=
FALSE
)

697 : 
	$NCur£sF‹m
 (
Fõlds
, 
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
,

698 
wôh_‰ame
, 
autoDñëe_Fõlds
) {

699 i‡(
f‹m
)

700 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
p_U£rD©a
));

701 
	}
};

703 
	gvútuÆ
 ~
	$NCur£sU£rF‹m
() {

704 
	}
};

706 
ölöe
 
T
* 
	$U£rD©a
 () const {

707  
ªöãΩªt_ˇ°
<
T
*>(
	`gë_u£r
 ());

708 
	}
};

710 
ölöe
 
vútuÆ
 
	$£tU£rD©a
 (c⁄° 
T
* 
p_U£rD©a
) {

711 i‡(
f‹m
)

712 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
p_U£rD©a
));

713 
	}
}

721 ˛as†
	cNCURSES_IMPEXP
 
	mAÕha_Fõld
 : 
public
 
NCur£sFõldTy≥


723 
¥iv©e
:

724 
mö_fõld_width
;

726 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

727 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,
mö_fõld_width
));

730 
public
:

731 
	$AÕha_Fõld
(
width
)

732 : 
	`NCur£sFõldTy≥
(
TYPE_ALPHA
),

733 
	$mö_fõld_width
(
width
) {

734 
	}
}

737 ˛as†
	cNCURSES_IMPEXP
 
	mAÕh™umîic_Fõld
 : 
public
 
NCur£sFõldTy≥


739 
¥iv©e
:

740 
mö_fõld_width
;

742 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

743 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,
mö_fõld_width
));

746 
public
:

747 
	$AÕh™umîic_Fõld
(
width
)

748 : 
	`NCur£sFõldTy≥
(
TYPE_ALNUM
),

749 
	$mö_fõld_width
(
width
) {

750 
	}
}

753 ˛as†
	cNCURSES_IMPEXP
 
	mI¡egî_Fõld
 : 
public
 
NCur£sFõldTy≥


755 
¥iv©e
:

756 
¥ecisi⁄
;

757 
	mlowî_limô
, 
	muµî_limô
;

759 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

760 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,

761 
¥ecisi⁄
,
lowî_limô
,
uµî_limô
));

764 
public
:

765 
	$I¡egî_Fõld
(
¥ec
, 
low
=0L, 
high
=0L)

766 : 
	`NCur£sFõldTy≥
(
TYPE_INTEGER
),

767 
	`¥ecisi⁄
(
¥ec
), 
	`lowî_limô
(
low
), 
	$uµî_limô
(
high
) {

768 
	}
}

771 ˛as†
	cNCURSES_IMPEXP
 
	mNumîic_Fõld
 : 
public
 
NCur£sFõldTy≥


773 
¥iv©e
:

774 
¥ecisi⁄
;

775 
	mlowî_limô
, 
	muµî_limô
;

777 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

778 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,

779 
¥ecisi⁄
,
lowî_limô
,
uµî_limô
));

782 
public
:

783 
	$Numîic_Fõld
(
¥ec
, 
low
=0.0, 
high
=0.0)

784 : 
	`NCur£sFõldTy≥
(
TYPE_NUMERIC
),

785 
	`¥ecisi⁄
(
¥ec
), 
	`lowî_limô
(
low
), 
	$uµî_limô
(
high
) {

786 
	}
}

789 ˛as†
	cNCURSES_IMPEXP
 
	mReguœr_Ex¥essi⁄_Fõld
 : 
public
 
NCur£sFõldTy≥


791 
¥iv©e
:

792 * 
ªgex
;

794 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

795 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,
ªgex
));

798 
	$c›y_ªgex
(c⁄° *
sour˚
)

800 
ªgex
 = 
√w
 [1 + ::
	`°æí
(
sour˚
)];

801 (::
°r˝y
)(
ªgex
, 
sour˚
);

802 
	}
}

804 
	gpublic
:

805 
	$Reguœr_Ex¥essi⁄_Fõld
(c⁄° *
ex¥
)

806 : 
	`NCur£sFõldTy≥
(
TYPE_REGEXP
),

807 
	$ªgex
(
NULL
)

809 
	`c›y_ªgex
(
ex¥
);

810 
	}
}

812 
	gReguœr_Ex¥essi⁄_Fõld
& 
	g›î©‹
=(c⁄° 
Reguœr_Ex¥essi⁄_Fõld
& 
rhs
)

814 i‡(
this
 !&
rhs
) {

815 *
this
 = 
rhs
;

816 
c›y_ªgex
(
rhs
.
ªgex
);

817 
	gNCur£sFõldTy≥
::
›î©‹
=(
rhs
);

819  *
	gthis
;

822 
	$Reguœr_Ex¥essi⁄_Fõld
(c⁄° 
Reguœr_Ex¥essi⁄_Fõld
& 
rhs
)

823 : 
	`NCur£sFõldTy≥
(
rhs
),

824 
	$ªgex
(
NULL
)

826 
	`c›y_ªgex
(
rhs
.
ªgex
);

827 
	}
}

829 ~
	$Reguœr_Ex¥essi⁄_Fõld
() {

830 
dñëe
[] 
ªgex
;

831 
	}
}

834 ˛as†
	cNCURSES_IMPEXP
 
	mEnumî©i⁄_Fõld
 : 
public
 
NCur£sFõldTy≥


836 
¥iv©e
:

837 c⁄° ** 
li°
;

838 
	mˇ£_£nsôive
;

839 
	mn⁄_unique_m©ches
;

841 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

842 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,

843 
li°
,
ˇ£_£nsôive
,
n⁄_unique_m©ches
));

845 
public
:

846 
	$Enumî©i⁄_Fõld
(c⁄° * 
íums
[],

847 
boﬁ
 
ˇ£_£ns
=
FALSE
,

848 
boﬁ
 
n⁄_unique
=
FALSE
)

849 : 
	`NCur£sFõldTy≥
(
TYPE_ENUM
),

850 
	`li°
(
íums
),

851 
	`ˇ£_£nsôive
(
ˇ£_£ns
 ? -1 : 0),

852 
	`n⁄_unique_m©ches
(
n⁄_unique
 ? -1 : 0) {

853 
	}
}

855 
Enumî©i⁄_Fõld
& 
›î©‹
=(c⁄° Enumî©i⁄_Fõld& 
rhs
)

857 i‡(
this
 !&
rhs
) {

858 *
this
 = 
rhs
;

859 
	gNCur£sFõldTy≥
::
›î©‹
=(
rhs
);

861  *
	gthis
;

864 
	$Enumî©i⁄_Fõld
(c⁄° 
Enumî©i⁄_Fõld
& 
rhs
)

865 : 
	`NCur£sFõldTy≥
(
rhs
),

866 
	`li°
(
rhs
.
li°
),

867 
	`ˇ£_£nsôive
(
rhs
.
ˇ£_£nsôive
),

868 
	$n⁄_unique_m©ches
(
rhs
.
n⁄_unique_m©ches
)

870 
	}
}

873 ˛as†
	cNCURSES_IMPEXP
 
	mIPV4_Addªss_Fõld
 : 
public
 
NCur£sFõldTy≥


875 
¥iv©e
:

876 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

877 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
));

880 
public
:

881 
	$IPV4_Addªss_Fõld
(Ë: 
	$NCur£sFõldTy≥
(
TYPE_IPV4
) {

882 
	}
}

886 
boﬁ
 
_nc_xx_Êd_fcheck
(
FIELD
 *, const *);

887 
boﬁ
 
_nc_xx_Êd_ccheck
(
c
, const *);

888 * 
_nc_xx_Êd_makórg
(
va_li°
*);

896 ˛as†
	cNCURSES_IMPEXP
 
U£rDeföedFõldTy≥
 : 
public
 
NCur£sFõldTy≥


898 
‰õnd
 
˛ass
 
UDF_Inô
;

899 
¥iv©e
:

902 
FIELDTYPE
* 
gíîic_fõldty≥
;

904 
¥Ÿe˘ed
:

907 
‰õnd
 
boﬁ
 
_nc_xx_Êd_fcheck
(
FIELD
 *, const *);

908 
‰õnd
 
boﬁ
 
_nc_xx_Êd_ccheck
(
c
, const *);

909 
‰õnd
 * 
_nc_xx_Êd_makórg
(
va_li°
*);

911 
	$£t
(
NCur£sF‹mFõld
& 
f
) {

912 
	`OnEº‹
(::
	`£t_fõld_ty≥
(
f
.
	`gë_fõld
(),
fõldty≥
,&f));

915 
¥Ÿe˘ed
:

918 
vútuÆ
 
boﬁ
 
	`fõld_check
(
NCur£sF‹mFõld
& 
f
) = 0;

922 
vútuÆ
 
boﬁ
 
	`ch¨_check
 (
c
) = 0;

924 
public
:

925 
	$U£rDeföedFõldTy≥
(Ë: 
	$NCur£sFõldTy≥
(
gíîic_fõldty≥
) {

926 
	}
}

930 
boﬁ
 
_nc_xx_√xt_choi˚
(
FIELD
*, const *);

931 
boﬁ
 
_nc_xx_¥ev_choi˚
(
FIELD
*, const *);

939 ˛as†
	cNCURSES_IMPEXP
 
U£rDeföedFõldTy≥_Wôh_Choi˚
 : 
public
 
U£rDeföedFõldTy≥


941 
‰õnd
 
˛ass
 
UDF_Inô
;

942 
¥iv©e
:

945 
FIELDTYPE
* 
gíîic_fõldty≥_wôh_choi˚
;

949 
‰õnd
 
boﬁ
 
_nc_xx_√xt_choi˚
(
FIELD
*, const *);

950 
‰õnd
 
boﬁ
 
_nc_xx_¥ev_choi˚
(
FIELD
*, const *);

952 
¥Ÿe˘ed
:

955 
vútuÆ
 
boﬁ
 
√xt
 (
NCur£sF‹mFõld
& 
f
) = 0;

959 
vútuÆ
 
boﬁ
 
¥evious
(
NCur£sF‹mFõld
& 
f
) = 0;

961 
public
:

962 
	$U£rDeföedFõldTy≥_Wôh_Choi˚
() {

963 
fõldty≥
 = 
gíîic_fõldty≥_wôh_choi˚
;

965 
	}
};

	@/usr/include/cursesm.h

36 #i‚de‡
NCURSES_CURSESM_H_ö˛


37 
	#NCURSES_CURSESM_H_ö˛
 1

	)

39 
	~<cur£•.h
>

42 
	~<míu.h
>

49 ˛as†
	cNCURSES_IMPEXP
 
NCur£sMíuIãm


51 
‰õnd
 
˛ass
 
NCur£sMíu
;

53 
¥Ÿe˘ed
:

54 
ITEM
 *
ôem
;

56 
ölöe
 
	$OnEº‹
 (
îr
Ëc⁄° 
	$THROWS
(
NCur£sMíuEx˚±i⁄
) {

57 i‡(
îr
 !
E_OK
)

58 
	`THROW
(
√w
 
	`NCur£sMíuEx˚±i⁄
 (
îr
));

61 
public
:

62 
	$NCur£sMíuIãm
 (c⁄° * 
p_«me
 = 
NULL
,

63 c⁄° * 
p_des¸ùt
 = 
NULL
)

64 : 
	$ôem
(0)

66 
ôem
 = 
p_«me
 ? ::
	`√w_ôem
 (p_«me, 
p_des¸ùt
Ë: 
	`STATIC_CAST
(
ITEM
*)(0);

67 i‡(
p_«me
 && !
ôem
)

68 
	`OnEº‹
 (
E_SYSTEM_ERROR
);

69 
	}
}

74 
NCur£sMíuIãm
& 
›î©‹
=(c⁄° NCur£sMíuIãm& 
rhs
)

76 i‡(
this
 !&
rhs
) {

77 *
this
 = 
rhs
;

79  *
this
;

82 
	$NCur£sMíuIãm
(c⁄° 
NCur£sMíuIãm
& 
rhs
)

83 : 
	$ôem
(0)

85 
	}
}

87 
vútuÆ
 ~
NCur£sMíuIãm
 ();

90 
ölöe
 c⁄° * 
	$«me
 () const {

91  ::
	`ôem_«me
 (
ôem
);

92 
	}
}

95 
ölöe
 c⁄° * 
	$des¸ùti⁄
 () const {

96  ::
	`ôem_des¸ùti⁄
 (
ôem
);

97 
	}
}

100 
ölöe
 (
ödex
) () const {

101  ::
	`ôem_ödex
 (
ôem
);

102 
	}
}

105 
ölöe
 
	$›ti⁄s_⁄
 (
Iãm_O±i⁄s
 
›ts
) {

106 
	`OnEº‹
 (::
	`ôem_›ts_⁄
 (
ôem
, 
›ts
));

107 
	}
}

110 
ölöe
 
	$›ti⁄s_off
 (
Iãm_O±i⁄s
 
›ts
) {

111 
	`OnEº‹
 (::
	`ôem_›ts_off
 (
ôem
, 
›ts
));

112 
	}
}

115 
ölöe
 
Iãm_O±i⁄s
 
	$›ti⁄s
 () const {

116  ::
	`ôem_›ts
 (
ôem
);

117 
	}
}

120 
ölöe
 
	$£t_›ti⁄s
 (
Iãm_O±i⁄s
 
›ts
) {

121 
	`OnEº‹
 (::
	`£t_ôem_›ts
 (
ôem
, 
›ts
));

122 
	}
}

125 
ölöe
 
	$£t_vÆue
 (
boﬁ
 
f
) {

126 
	`OnEº‹
 (::
	`£t_ôem_vÆue
 (
ôem
,
f
));

127 
	}
}

130 
ölöe
 
boﬁ
 
	$vÆue
 () const {

131  ::
	`ôem_vÆue
 (
ôem
);

132 
	}
}

135 
ölöe
 
boﬁ
 
	$visibÀ
 () const {

136  ::
	`ôem_visibÀ
 (
ôem
);

137 
	}
}

140 
vútuÆ
 
boﬁ
 
a˘i⁄
();

149 
boﬁ
 
	tITEMCALLBACK
(
	tNCur£sMíuIãm
&);

154 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sMíuCÆlbackIãm
 : 
public
 
NCur£sMíuIãm


156 
¥iv©e
:

157 
ITEMCALLBACK
* 
p_f˘
;

159 
	mpublic
:

160 
	$NCur£sMíuCÆlbackIãm
(
ITEMCALLBACK
* 
f˘
 = 
NULL
,

161 c⁄° * 
p_«me
 = 
NULL
,

162 c⁄° * 
p_des¸ùt
 = 
NULL
 )

163 : 
	`NCur£sMíuIãm
 (
p_«me
, 
p_des¸ùt
),

164 
	$p_f˘
 (
f˘
) {

167 
NCur£sMíuCÆlbackIãm
& 
›î©‹
=(c⁄° NCur£sMíuCÆlbackIãm& 
rhs
)

169 i‡(
this
 !&
rhs
) {

170 *
this
 = 
rhs
;

172  *
this
;

173 
	}
}

175 
	$NCur£sMíuCÆlbackIãm
(c⁄° 
NCur£sMíuCÆlbackIãm
& 
rhs
)

176 : 
	`NCur£sMíuIãm
(
rhs
),

177 
	$p_f˘
(0)

179 
	}
}

181 
	gvútuÆ
 ~
NCur£sMíuCÆlbackIãm
();

183 
boﬁ
 
a˘i⁄
();

190 
_nc_xx_mnu_öô
(
MENU
 *);

191 
_nc_xx_mnu_ãrm
(
MENU
 *);

192 
_nc_xx_ôm_öô
(
MENU
 *);

193 
_nc_xx_ôm_ãrm
(
MENU
 *);

201 ˛as†
	cNCURSES_IMPEXP
 
NCur£sMíu
 : 
public
 
NCur£sP™ñ


203 
¥Ÿe˘ed
:

204 
MENU
 *
míu
;

206 
¥iv©e
:

207 
NCur£sWödow
* 
sub
;

208 
boﬁ
 
b_sub_ow√r
;

209 
boﬁ
 
b_‰amed
;

210 
boﬁ
 
b_autoDñëe
;

212 
NCur£sMíuIãm
** 
my_ôems
;

217 * 
m_u£r
;

218 c⁄° 
NCur£sMíu
* 
m_back
;

219 c⁄° 
MENU
* 
m_ow√r
;

220 } 
	tU£rHook
;

223 
ölöe
 
NCur£sMíu
* 
	$gëHook
(c⁄° 
MENU
 *
m
) {

224 
U£rHook
* 
hook
 = 
	`STATIC_CAST
(U£rHook*)(::
	`míu_u£Ωå
(
m
));

225 
	`as£π
(
hook
 !0 && hook->
m_ow√r
==
m
);

226  
c⁄°_ˇ°
<
NCur£sMíu
*>(
hook
->
m_back
);

227 
	}
}

229 
‰õnd
 
_nc_xx_mnu_öô
(
MENU
 *);

230 
‰õnd
 
_nc_xx_mnu_ãrm
(
MENU
 *);

231 
‰õnd
 
_nc_xx_ôm_öô
(
MENU
 *);

232 
‰õnd
 
_nc_xx_ôm_ãrm
(
MENU
 *);

235 
ITEM
** 
m≠Iãms
(
NCur£sMíuIãm
* 
nôems
[]);

237 
¥Ÿe˘ed
:

239 
ölöe
 
	$£t_u£r
(*
u£r
) {

240 
U£rHook
* 
u±r
 = 
	`STATIC_CAST
(U£rHook*)(::
	`míu_u£Ωå
 (
míu
));

241 
	`as£π
 (
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
míu
);

242 
u±r
->
m_u£r
 = 
u£r
;

243 
	}
}

245 
ölöe
 *
	$gë_u£r
() {

246 
U£rHook
* 
u±r
 = 
	`STATIC_CAST
(U£rHook*)(::
	`míu_u£Ωå
 (
míu
));

247 
	`as£π
 (
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
míu
);

248  
u±r
->
m_u£r
;

249 
	}
}

251 
InôMíu
 (
NCur£sMíuIãm
* 
míu
[],

252 
boﬁ
 
wôh_‰ame
,

253 
boﬁ
 
autoDñëeIãms
);

255 
ölöe
 
	$OnEº‹
 (
îr
Ëc⁄° 
	$THROWS
(
NCur£sMíuEx˚±i⁄
) {

256 i‡(
îr
 !
E_OK
)

257 
	`THROW
(
√w
 
	`NCur£sMíuEx˚±i⁄
 (
this
, 
îr
));

258 
	}
}

261 
vútuÆ
 
drivî
 (
c
) ;

265 
	$NCur£sMíu
–
∆öes
,

266 
ncﬁs
,

267 
begö_y
 = 0,

268 
begö_x
 = 0)

269 : 
	`NCur£sP™ñ
(
∆öes
,
ncﬁs
,
begö_y
,
begö_x
),

270 
	`míu
 (
	`STATIC_CAST
(
MENU
*)(0)),

271 
	`sub
(0),

272 
	`b_sub_ow√r
(0),

273 
	`b_‰amed
(0),

274 
	`b_autoDñëe
(0),

275 
	$my_ôems
(0)

277 
	}
}

279 
public
:

281 
	$NCur£sMíu
 (
NCur£sMíuIãm
* 
Iãms
[],

282 
boﬁ
 
wôh_‰ame
=
FALSE
,

283 
boﬁ
 
autoDñëe_Iãms
=
FALSE
)

284 : 
	`NCur£sP™ñ
(),

285 
	`míu
(0),

286 
	`sub
(0),

287 
	`b_sub_ow√r
(0),

288 
	`b_‰amed
(0),

289 
	`b_autoDñëe
(0),

290 
	$my_ôems
(0)

292 
	`InôMíu
(
Iãms
, 
wôh_‰ame
, 
autoDñëe_Iãms
);

293 
	}
}

296 
	$NCur£sMíu
 (
NCur£sMíuIãm
* 
Iãms
[],

297 
∆öes
,

298 
ncﬁs
,

299 
begö_y
 = 0,

300 
begö_x
 = 0,

301 
boﬁ
 
wôh_‰ame
=
FALSE
,

302 
boﬁ
 
autoDñëe_Iãms
=
FALSE
)

303 : 
	`NCur£sP™ñ
(
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
),

304 
	`míu
(0),

305 
	`sub
(0),

306 
	`b_sub_ow√r
(0),

307 
	`b_‰amed
(0),

308 
	`b_autoDñëe
(0),

309 
	$my_ôems
(0)

311 
	`InôMíu
(
Iãms
, 
wôh_‰ame
, 
autoDñëe_Iãms
);

312 
	}
}

314 
NCur£sMíu
& 
›î©‹
=(c⁄° NCur£sMíu& 
rhs
)

316 i‡(
this
 !&
rhs
) {

317 *
this
 = 
rhs
;

318 
NCur£sP™ñ
::
›î©‹
=(
rhs
);

320  *
this
;

323 
	$NCur£sMíu
(c⁄° 
NCur£sMíu
& 
rhs
)

324 : 
	`NCur£sP™ñ
(
rhs
),

325 
	`míu
(
rhs
.
míu
),

326 
	`sub
(
rhs
.
sub
),

327 
	`b_sub_ow√r
(
rhs
.
b_sub_ow√r
),

328 
	`b_‰amed
(
rhs
.
b_‰amed
),

329 
	`b_autoDñëe
(
rhs
.
b_autoDñëe
),

330 
	$my_ôems
(
rhs
.
my_ôems
)

332 
	}
}

334 
vútuÆ
 ~
NCur£sMíu
 ();

337 
ölöe
 
NCur£sWödow
& 
	$subWödow
() const {

338 
	`as£π
(
sub
!=
NULL
);

339  *
sub
;

340 
	}
}

343 
£tSubWödow
(
NCur£sWödow
& 
sub
);

346 
ölöe
 
	$£tIãms
(
NCur£sMíuIãm
* 
Iãms
[]) {

347 
	`OnEº‹
(::
	`£t_míu_ôems
(
míu
,
	`m≠Iãms
(
Iãms
)));

348 
	}
}

351 
ölöe
 
	$u≈o°
 () {

352 
	`OnEº‹
 (::
	`u≈o°_míu
 (
míu
));

353 
	}
}

356 
ölöe
 
	$po°
(
boﬁ
 
Êag
 = 
TRUE
) {

357 
Êag
 ? 
	`OnEº‹
 (::
	`po°_míu
(
míu
)Ë: OnEº‹ (::
	`u≈o°_míu
 (menu));

358 
	}
}

361 
ölöe
 
	$sˇÀ
 (& 
mrows
, & 
mcﬁs
) const {

362 
	`OnEº‹
 (::
	`sˇÀ_míu
 (
míu
, &
mrows
, &
mcﬁs
));

363 
	}
}

366 
ölöe
 
	$£t_f‹m©
(
mrows
, 
mcﬁs
) {

367 
	`OnEº‹
 (::
	`£t_míu_f‹m©
(
míu
, 
mrows
, 
mcﬁs
));

368 
	}
}

371 
ölöe
 
	$míu_f‹m©
(& 
rows
,& 
ncﬁs
) {

372 ::
	`míu_f‹m©
(
míu
,&
rows
,&
ncﬁs
);

373 
	}
}

376 
ölöe
 
NCur£sMíuIãm
* 
	$ôems
() const {

377  *
my_ôems
;

378 
	}
}

381 
ölöe
 
	$cou¡
() const {

382  ::
	`ôem_cou¡
(
míu
);

383 
	}
}

386 
ölöe
 
NCur£sMíuIãm
* 
	$cuºít_ôem
() const {

387  
my_ôems
[::
	`ôem_ödex
(::
	`cuºít_ôem
(
míu
))];

388 
	}
}

391 
ölöe
 c⁄° * 
	$m¨k
() const {

392  ::
	`míu_m¨k
(
míu
);

393 
	}
}

396 
ölöe
 
	$£t_m¨k
(c⁄° *
m¨kî
) {

397 
	`OnEº‹
 (::
	`£t_míu_m¨k
 (
míu
, 
m¨kî
));

398 
	}
}

401 
ölöe
 c⁄° * 
	$ªque°_«me
(
c
) {

402  ::
	`míu_ªque°_«me
(
c
);

403 
	}
}

406 
ölöe
 * 
	$∑âîn
() const {

407  ::
	`míu_∑âîn
(
míu
);

408 
	}
}

411 
boﬁ
 
£t_∑âîn
 (c⁄° *
∑t
);

415 
vútuÆ
 
£tDeÁu…Aâribuãs
();

418 
ölöe
 
chty≥
 
	$back
() const {

419  ::
	`míu_back
(
míu
);

420 
	}
}

423 
ölöe
 
chty≥
 
	$f‹e
() const {

424  ::
	`míu_f‹e
(
míu
);

425 
	}
}

428 
ölöe
 
chty≥
 
	$gªy
() const {

429  ::
	`míu_gªy
(
míu
);

430 
	}
}

433 
ölöe
 
chty≥
 
	$£t_background
(
chty≥
 
a
) {

434  ::
	`£t_míu_back
(
míu
,
a
);

435 
	}
}

438 
ölöe
 
chty≥
 
	$£t_f‹eground
(
chty≥
 
a
) {

439  ::
	`£t_míu_f‹e
(
míu
,
a
);

440 
	}
}

443 
ölöe
 
chty≥
 
	$£t_gªy
(
chty≥
 
a
) {

444  ::
	`£t_míu_gªy
(
míu
,
a
);

445 
	}
}

447 
ölöe
 
	$›ti⁄s_⁄
 (
Míu_O±i⁄s
 
›ts
) {

448 
	`OnEº‹
 (::
	`míu_›ts_⁄
 (
míu
,
›ts
));

449 
	}
}

451 
ölöe
 
	$›ti⁄s_off
(
Míu_O±i⁄s
 
›ts
) {

452 
	`OnEº‹
 (::
	`míu_›ts_off
(
míu
,
›ts
));

453 
	}
}

455 
ölöe
 
Míu_O±i⁄s
 
	$›ti⁄s
() const {

456  ::
	`míu_›ts
(
míu
);

457 
	}
}

459 
ölöe
 
	$£t_›ti⁄s
 (
Míu_O±i⁄s
 
›ts
) {

460 
	`OnEº‹
 (::
	`£t_míu_›ts
 (
míu
,
›ts
));

461 
	}
}

463 
ölöe
 
	$∑d
() const {

464  ::
	`míu_∑d
(
míu
);

465 
	}
}

467 
ölöe
 
	$£t_∑d
 (
∑dch
) {

468 
	`OnEº‹
 (::
	`£t_míu_∑d
 (
míu
, 
∑dch
));

469 
	}
}

472 
ölöe
 
	$posôi⁄_curs‹
 () const {

473 
	`OnEº‹
 (::
	`pos_míu_curs‹
 (
míu
));

474 
	}
}

477 
ölöe
 
	$£t_cuºít
(
NCur£sMíuIãm
& 
I
) {

478 
	`OnEº‹
 (::
	`£t_cuºít_ôem
(
míu
, 
I
.
ôem
));

479 
	}
}

482 
ölöe
 
	$t›_row
 () const {

483  ::
	`t›_row
 (
míu
);

484 
	}
}

487 
ölöe
 
	$£t_t›_row
 (
row
) {

488 
	`OnEº‹
 (::
	`£t_t›_row
 (
míu
, 
row
));

489 
	}
}

493 
ölöe
 
	$£tS∑cög
(
•c_des¸ùti⁄
,

494 
•c_rows
,

495 
•c_cﬁumns
) {

496 
	`OnEº‹
(::
	`£t_míu_•acög
(
míu
,

497 
•c_des¸ùti⁄
,

498 
•c_rows
,

499 
•c_cﬁumns
));

500 
	}
}

503 
ölöe
 
	$S∑cög
(& 
•c_des¸ùti⁄
,

504 & 
•c_rows
,

505 & 
•c_cﬁumns
) const {

506 
	`OnEº‹
(::
	`míu_•acög
(
míu
,

507 &
•c_des¸ùti⁄
,

508 &
•c_rows
,

509 &
•c_cﬁumns
));

510 
	}
}

513 
ölöe
 
	$‰ame
(c⁄° *
tôÀ
=
NULL
, c⁄° * 
btôÀ
=NULL) {

514 i‡(
b_‰amed
)

515 
NCur£sP™ñ
::
	`‰ame
(
tôÀ
,
btôÀ
);

517 
	`OnEº‹
(
E_SYSTEM_ERROR
);

518 
	}
}

520 
ölöe
 
	$bﬁd‰ame
(c⁄° *
tôÀ
=
NULL
, c⁄° * 
btôÀ
=NULL) {

521 i‡(
b_‰amed
)

522 
NCur£sP™ñ
::
	`bﬁd‰ame
(
tôÀ
,
btôÀ
);

524 
	`OnEº‹
(
E_SYSTEM_ERROR
);

525 
	}
}

527 
ölöe
 
	$œbñ
(c⁄° *
t›Labñ
, c⁄° *
bŸtomLabñ
) {

528 i‡(
b_‰amed
)

529 
NCur£sP™ñ
::
	`œbñ
(
t›Labñ
,
bŸtomLabñ
);

531 
	`OnEº‹
(
E_SYSTEM_ERROR
);

532 
	}
}

540 
vútuÆ
 
On_Míu_Inô
();

544 
vútuÆ
 
On_Míu_Tîmö©i⁄
();

547 
vútuÆ
 
On_Iãm_Inô
(
NCur£sMíuIãm
& 
ôem
);

550 
vútuÆ
 
On_Iãm_Tîmö©i⁄
(
NCur£sMíuIãm
& 
ôem
);

556 
vútuÆ
 
vútuÆize
(
c
);

560 
ölöe
 
NCur£sMíuIãm
* 
›î©‹
[](
i
) const {

561 i‡–(
i
 < 0Ë|| (ò>::
ôem_cou¡
 (
míu
)) )

562 
OnEº‹
 (
E_BAD_ARGUMENT
);

563  (
my_ôems
[
i
]);

569 
vútuÆ
 
NCur£sMíuIãm
* 
	$›î©‹
()();

577 
vútuÆ
 
	$On_Reque°_Díõd
(
c
) const;

580 
vútuÆ
 
	$On_NŸ_Sñe˘abÀ
(
c
) const;

583 
vútuÆ
 
	$On_No_M©ch
(
c
) const;

586 
vútuÆ
 
	$On_Unknown_Comm™d
(
c
) const;

588 
	}
};

597 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cNCURSES_IMPEXP
 
	mNCur£sU£rIãm
 : 
public
 
NCur£sMíuIãm


599 
public
:

600 
NCur£sU£rIãm
 (c⁄° * 
p_«me
,

601 c⁄° * 
p_des¸ùt
 = 
NULL
,

602 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0))

603 : 
	$NCur£sMíuIãm
 (
p_«me
, 
p_des¸ùt
) {

604 i‡(
ôem
)

605 
	`OnEº‹
 (::
	`£t_ôem_u£Ωå
 (
ôem
, 
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
))));

608 
vútuÆ
 ~
	$NCur£sU£rIãm
(Ë{
	}
}

610 
ölöe
 c⁄° 
T
* 
	$U£rD©a
 () const {

611  
ªöãΩªt_ˇ°
<c⁄° 
T
*>(::
	`ôem_u£Ωå
 (
ôem
));

612 
	}
};

614 
ölöe
 
vútuÆ
 
	$£tU£rD©a
(c⁄° 
T
* 
p_U£rD©a
) {

615 i‡(
ôem
)

616 
	`OnEº‹
 (::
	`£t_ôem_u£Ωå
 (
ôem
, 
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<c⁄° *>(
p_U£rD©a
))));

617 
	}
}

624 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cNCURSES_IMPEXP
 
	mNCur£sU£rMíu
 : 
public
 
NCur£sMíu


626 
¥Ÿe˘ed
:

627 
NCur£sU£rMíu
–
∆öes
,

628 
ncﬁs
,

629 
begö_y
 = 0,

630 
begö_x
 = 0,

631 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0))

632 : 
	$NCur£sMíu
(
∆öes
,
ncﬁs
,
begö_y
,
begö_x
) {

633 i‡(
míu
)

634 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
p_U£rD©a
));

637 
public
:

638 
	`NCur£sU£rMíu
 (
NCur£sMíuIãm
 
Iãms
[],

639 c⁄° 
T
* 
p_U£rD©a
 = 
	`STATIC_CAST
(T*)(0),

640 
boﬁ
 
wôh_‰ame
=
FALSE
,

641 
boﬁ
 
autoDñëe_Iãms
=
FALSE
)

642 : 
	$NCur£sMíu
 (
Iãms
, 
wôh_‰ame
, 
autoDñëe_Iãms
) {

643 i‡(
míu
)

644 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
p_U£rD©a
));

645 
	}
};

647 
NCur£sU£rMíu
 (
NCur£sMíuIãm
 
Iãms
[],

648 
∆öes
,

649 
ncﬁs
,

650 
begö_y
 = 0,

651 
begö_x
 = 0,

652 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0),

653 
boﬁ
 
wôh_‰ame
=
FALSE
)

654 : 
	$NCur£sMíu
 (
Iãms
, 
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
, 
wôh_‰ame
) {

655 i‡(
míu
)

656 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
p_U£rD©a
));

657 
	}
};

659 
	gvútuÆ
 ~
	$NCur£sU£rMíu
() {

660 
	}
};

662 
ölöe
 
T
* 
	$U£rD©a
 () const {

663  
ªöãΩªt_ˇ°
<
T
*>(
	`gë_u£r
 ());

664 
	}
};

666 
ölöe
 
vútuÆ
 
	$£tU£rD©a
 (c⁄° 
T
* 
p_U£rD©a
) {

667 i‡(
míu
)

668 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
p_U£rD©a
));

669 
	}
}

	@/usr/include/cursesp.h

34 #i‚de‡
NCURSES_CURSESP_H_ö˛


35 
	#NCURSES_CURSESP_H_ö˛
 1

	)

39 
	~<cur£sw.h
>

42 
	~<∑√l.h
>

45 ˛as†
	cNCURSES_IMPEXP
 
NCur£sP™ñ


46 : 
public
 
NCur£sWödow


48 
¥Ÿe˘ed
:

49 
PANEL
 *
p
;

50 
NCur£sP™ñ
 *
dummy
;

52 
¥iv©e
:

56 * 
m_u£r
;

57 c⁄° 
NCur£sP™ñ
* 
m_back
;

58 c⁄° 
PANEL
* 
m_ow√r
;

59 } 
	tU£rHook
;

61 
ölöe
 
U£rHook
 *
	$U£rPoöãr
()

63 
U£rHook
* 
u±r
 = 
ªöãΩªt_ˇ°
<UserHook*>(

64 
c⁄°_ˇ°
<*>(::
	`∑√l_u£Ωå
 (
p
)));

65  
u±r
;

66 
	}
}

68 
öô
();

70 
¥Ÿe˘ed
:

71 
	$£t_u£r
(*
u£r
)

73 
U£rHook
* 
u±r
 = 
	`U£rPoöãr
();

74 i‡(
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
p
) {

75 
u±r
->
m_u£r
 = 
u£r
;

77 
	}
}

80 *
	$gë_u£r
()

82 
U£rHook
* 
u±r
 = 
	`U£rPoöãr
();

83 *
ªsu…
 = 0;

84 i‡(
u±r
 !0 && u±r->
m_back
==
this
 && u±r->
m_ow√r
==
p
)

85 
ªsu…
 = 
u±r
->
m_u£r
;

86  
ªsu…
;

87 
	}
}

89 
	$OnEº‹
 (
îr
Ëc⁄° 
	$THROWS
(
NCur£sP™ñEx˚±i⁄
)

91 i‡(
îr
==
ERR
)

92 
	`THROW
(
√w
 
	`NCur£sP™ñEx˚±i⁄
 (
this
, 
îr
));

93 
	}
}

98 
vútuÆ
 
gëKey
();

100 
public
:

101 
	$NCur£sP™ñ
(
∆öes
,

102 
ncﬁs
,

103 
begö_y
 = 0,

104 
begö_x
 = 0)

105 : 
	`NCur£sWödow
(
∆öes
,
ncﬁs
,
begö_y
,
begö_x
), 
	$p
(0)

107 
	`öô
();

108 
	}
}

111 
	$NCur£sP™ñ
()

112 : 
	`NCur£sWödow
(::
°ds¸
), 
	$p
(0)

114 
	`öô
();

115 
	}
}

119 
NCur£sP™ñ
& 
›î©‹
=(c⁄° NCur£sP™ñ& 
rhs
)

121 i‡(
this
 !&
rhs
) {

122 *
this
 = 
rhs
;

123 
NCur£sWödow
::
›î©‹
=(
rhs
);

125  *
this
;

128 
	$NCur£sP™ñ
(c⁄° 
NCur£sP™ñ
& 
rhs
)

129 : 
	`NCur£sWödow
(
rhs
),

130 
	$p
(
rhs
.
p
)

132 
	}
}

134 
vútuÆ
 ~
NCur£sP™ñ
();

137 
ölöe
 
	$hide
()

139 
	`OnEº‹
 (::
	`hide_∑√l
(
p
));

140 
	}
}

143 
ölöe
 
	$show
()

145 
	`OnEº‹
 (::
	`show_∑√l
(
p
));

146 
	}
}

149 
ölöe
 
	$t›
()

151 
	`OnEº‹
 (::
	`t›_∑√l
(
p
));

152 
	}
}

155 
ölöe
 
	$bŸtom
()

157 
	`OnEº‹
 (::
	`bŸtom_∑√l
(
p
));

158 
	}
}

163 
vútuÆ
 
	$mvwö
(
y
, 
x
)

165 
	`OnEº‹
(::
	`move_∑√l
(
p
, 
y
, 
x
));

166  
OK
;

167 
	}
}

169 
ölöe
 
boﬁ
 
	$hiddí
() const

171  (::
	`∑√l_hiddí
 (
p
Ë? 
TRUE
 : 
FALSE
);

172 
	}
}

182 
ölöe
 
NCur£sP™ñ
& 
	$above
() const

184 
	`OnEº‹
(
ERR
);

185  *
dummy
;

186 
	}
}

188 
ölöe
 
NCur£sP™ñ
& 
	$bñow
() const

190 
	`OnEº‹
(
ERR
);

191  *
dummy
;

192 
	}
}

196 
vútuÆ
 
ª‰esh
();

200 
vútuÆ
 
nouåe‰esh
();

203 
ªdøw
();

207 
vútuÆ
 
‰ame
(c⁄° * 
tôÀ
=
NULL
,

208 c⁄° * 
btôÀ
=
NULL
);

212 
vútuÆ
 
bﬁd‰ame
(c⁄° * 
tôÀ
=
NULL
,

213 c⁄° * 
btôÀ
=
NULL
);

216 
vútuÆ
 
œbñ
(c⁄° * 
t›Labñ
,

217 c⁄° * 
bŸtomLabñ
);

220 
vútuÆ
 
˚¡îãxt
(
row
,c⁄° * 
œbñ
);

228 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cNCur£sU£rP™ñ
 : 
public
 
NCur£sP™ñ


230 
public
:

231 
NCur£sU£rP™ñ
 (
∆öes
,

232 
ncﬁs
,

233 
begö_y
 = 0,

234 
begö_x
 = 0,

235 c⁄° 
T
* 
p_U£rD©a
 = 
STATIC_CAST
(T*)(0))

236 : 
	$NCur£sP™ñ
 (
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
)

238 i‡(
p
)

239 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
p_U£rD©a
));

244 
	`NCur£sU£rP™ñ
(c⁄° 
T
* 
p_U£rD©a
 = 
	`STATIC_CAST
(T*)(0)Ë: 
	$NCur£sP™ñ
()

246 i‡(
p
)

247 
	`£t_u£r
(
c⁄°_ˇ°
<*>(
p_U£rD©a
));

248 
	}
};

252 
	gvútuÆ
 ~
	$NCur£sU£rP™ñ
(Ë{
	}
};

254 
T
* 
	$U£rD©a
 () const

256  
ªöãΩªt_ˇ°
<
T
*>(
	`gë_u£r
 ());

257 
	}
};

260 
vútuÆ
 
	$£tU£rD©a
 (c⁄° 
T
* 
p_U£rD©a
)

262 i‡(
p
)

263 
	`£t_u£r
 (
c⁄°_ˇ°
<*>(
p_U£rD©a
));

264 
	}
}

	@/usr/include/cursesw.h

31 #i‚de‡
NCURSES_CURSESW_H_ö˛


32 
	#NCURSES_CURSESW_H_ö˛
 1

	)

36 
	~<ëù.h
>

39 
	~<cur£s.h
>

44 #unde‡
löes


49 #unde‡
UNDEF


50 
	#UNDEF
(
«me
Ë
CUR_
 ##
	)
name

52 #ifde‡
addch


53 
ölöe
 
	$UNDEF
(
addch
)(
chty≥
 
ch
Ë{  
	`addch
(ch); 
	}
}

54 #unde‡
addch


55 
	#addch
 
	`UNDEF
(
addch
)

	)

58 #ifde‡
addch°r


59 
ölöe
 
	$UNDEF
(
addch°r
)(
chty≥
 *
©
Ë{  
	`addch°r
◊t); 
	}
}

60 #unde‡
addch°r


61 
	#addch°r
 
	`UNDEF
(
addch°r
)

	)

64 #ifde‡
addn°r


65 
ölöe
 
	$UNDEF
(
addn°r
)(c⁄° *
°r
, 
n
)

66 {  
	`addn°r
(
°r
, 
n
); 
	}
}

67 #unde‡
addn°r


68 
	#addn°r
 
	`UNDEF
(
addn°r
)

	)

71 #ifde‡
add°r


72 
ölöe
 
	$UNDEF
(
add°r
)(c⁄° * 
°r
Ë{  
	`add°r
(°r); 
	}
}

73 #unde‡
add°r


74 
	#add°r
 
	`UNDEF
(
add°r
)

	)

77 #ifde‡
©åoff


78 
ölöe
 
	$UNDEF
(
©åoff
)(
chty≥
 
©
Ë{  
	`©åoff
◊t); 
	}
}

79 #unde‡
©åoff


80 
	#©åoff
 
	`UNDEF
(
©åoff
)

	)

83 #ifde‡
©å⁄


84 
ölöe
 
	$UNDEF
(
©å⁄
)(
chty≥
 
©
Ë{  
	`©å⁄
◊t); 
	}
}

85 #unde‡
©å⁄


86 
	#©å⁄
 
	`UNDEF
(
©å⁄
)

	)

89 #ifde‡
©å£t


90 
ölöe
 
chty≥
 
	$UNDEF
(
©å£t
)(
chty≥
 
©
Ë{  
	`©å£t
◊t); 
	}
}

91 #unde‡
©å£t


92 
	#©å£t
 
	`UNDEF
(
©å£t
)

	)

95 #ifde‡
bkgd


96 
ölöe
 
	$UNDEF
(
bkgd
)(
chty≥
 
ch
Ë{  
	`bkgd
(ch); 
	}
}

97 #unde‡
bkgd


98 
	#bkgd
 
	`UNDEF
(
bkgd
)

	)

101 #ifde‡
bkgd£t


102 
ölöe
 
	$UNDEF
(
bkgd£t
)(
chty≥
 
ch
Ë{ 
	`bkgd£t
(ch); 
	}
}

103 #unde‡
bkgd£t


104 
	#bkgd£t
 
	`UNDEF
(
bkgd£t
)

	)

107 #ifde‡
b‹dî


108 
ölöe
 
	$UNDEF
(
b‹dî
)(
chty≥
 
ls
, chty≥ 
rs
, chty≥ 
ts
, chty≥ 
bs
, chty≥ 
é
, chty≥ 
å
, chty≥ 
bl
, chty≥ 
br
)

109 {  
	`b‹dî
(
ls
, 
rs
, 
ts
, 
bs
, 
é
, 
å
, 
bl
, 
br
); 
	}
}

110 #unde‡
b‹dî


111 
	#b‹dî
 
	`UNDEF
(
b‹dî
)

	)

114 #ifde‡
box


115 
ölöe
 
	$UNDEF
(
box
)(
WINDOW
 *
wö
, 
v
, 
h
Ë{  
	`box
(wö, v, h); 
	}
}

116 #unde‡
box


117 
	#box
 
	`UNDEF
(
box
)

	)

120 #ifde‡
chg©


121 
ölöe
 
	$UNDEF
(
chg©
)(
n
, 
©å_t
 
©å
, 
cﬁ‹
, c⁄° *
›ts
) {

122  
	`chg©
(
n
, 
©å
, 
cﬁ‹
, 
›ts
); 
	}
}

123 #unde‡
chg©


124 
	#chg©
 
	`UNDEF
(
chg©
)

	)

127 #ifde‡
˛ór


128 
ölöe
 
	$UNDEF
(
˛ór
)(Ë{  
	`˛ór
(); 
	}
}

129 #unde‡
˛ór


130 
	#˛ór
 
	`UNDEF
(
˛ór
)

	)

133 #ifde‡
˛órok


134 
ölöe
 
	$UNDEF
(
˛órok
)(
WINDOW
* 
wö
, 
boﬁ
 
bf
Ë{  
	`˛órok
(wö, bf); 
	}
}

135 #unde‡
˛órok


136 
	#˛órok
 
	`UNDEF
(
˛órok
)

	)

138 "C" 
NCURSES_IMPEXP
 
NCURSES_API
 
˛órok
(
WINDOW
*, 
boﬁ
);

141 #ifde‡
˛πobŸ


142 
ölöe
 
	$UNDEF
(
˛πobŸ
)(Ë{  
	`˛πobŸ
(); 
	}
}

143 #unde‡
˛πobŸ


144 
	#˛πobŸ
 
	`UNDEF
(
˛πobŸ
)

	)

147 #ifde‡
˛π€ﬁ


148 
ölöe
 
	$UNDEF
(
˛π€ﬁ
)(Ë{  
	`˛π€ﬁ
(); 
	}
}

149 #unde‡
˛π€ﬁ


150 
	#˛π€ﬁ
 
	`UNDEF
(
˛π€ﬁ
)

	)

153 #ifde‡
cﬁ‹_£t


154 
ölöe
 
chty≥
 
	$UNDEF
(
cﬁ‹_£t
)(
p
, * 
›ts
Ë{  
	`cﬁ‹_£t
’, o±s); 
	}
}

155 #unde‡
cﬁ‹_£t


156 
	#cﬁ‹_£t
 
	`UNDEF
(
cﬁ‹_£t
)

	)

159 #ifde‡
¸mode


160 
ölöe
 
	$UNDEF
(
¸mode
)(Ë{  
	`¸mode
(); 
	}
}

161 #unde‡
¸mode


162 
	#¸mode
 
	`UNDEF
(
¸mode
)

	)

165 #ifde‡
dñch


166 
ölöe
 
	$UNDEF
(
dñch
)(Ë{  
	`dñch
(); 
	}
}

167 #unde‡
dñch


168 
	#dñch
 
	`UNDEF
(
dñch
)

	)

171 #ifde‡
dñëñn


172 
ölöe
 
	$UNDEF
(
dñëñn
)(Ë{  
	`dñëñn
(); 
	}
}

173 #unde‡
dñëñn


174 
	#dñëñn
 
	`UNDEF
(
dñëñn
)

	)

177 #ifde‡
echoch¨


178 
ölöe
 
	$UNDEF
(
echoch¨
)(
chty≥
 
ch
Ë{  
	`echoch¨
(ch); 
	}
}

179 #unde‡
echoch¨


180 
	#echoch¨
 
	`UNDEF
(
echoch¨
)

	)

183 #ifde‡
îa£


184 
ölöe
 
	$UNDEF
(
îa£
)(Ë{  
	`îa£
(); 
	}
}

185 #unde‡
îa£


186 
	#îa£
 
	`UNDEF
(
îa£
)

	)

189 #ifde‡
fixãrm


190 
ölöe
 
	$UNDEF
(
fixãrm
)(Ë{  
	`fixãrm
(); 
	}
}

191 #unde‡
fixãrm


192 
	#fixãrm
 
	`UNDEF
(
fixãrm
)

	)

195 #ifde‡
Êushok


196 
ölöe
 
	$UNDEF
(
Êushok
)(
WINDOW
* 
_wö
, 
boﬁ
 
_bf
) {

197  
	`Êushok
(
_wö
, 
_bf
); 
	}
}

198 #unde‡
Êushok


199 
	#Êushok
 
	`UNDEF
(
Êushok
)

	)

201 
	#_no_Êushok


	)

204 #ifde‡
gë©ås


205 
ölöe
 
	$UNDEF
(
gë©ås
)(
WINDOW
 *
wö
Ë{  
	`gë©ås
(wö); 
	}
}

206 #unde‡
gë©ås


207 
	#gë©ås
 
	`UNDEF
(
gë©ås
)

	)

210 #ifde‡
gëbegyx


211 
ölöe
 
	$UNDEF
(
gëbegyx
)(
WINDOW
* 
wö
, & 
y
, & 
x
Ë{ 
	`gëbegyx
(wö, y, x); 
	}
}

212 #unde‡
gëbegyx


213 
	#gëbegyx
 
	`UNDEF
(
gëbegyx
)

	)

216 #ifde‡
gëbkgd


217 
ölöe
 
chty≥
 
	$UNDEF
(
gëbkgd
)(c⁄° 
WINDOW
 *
wö
Ë{  
	`gëbkgd
(wö); 
	}
}

218 #unde‡
gëbkgd


219 
	#gëbkgd
 
	`UNDEF
(
gëbkgd
)

	)

222 #ifde‡
gëch


223 
ölöe
 
	$UNDEF
(
gëch
)(Ë{  
	`gëch
(); 
	}
}

224 #unde‡
gëch


225 
	#gëch
 
	`UNDEF
(
gëch
)

	)

228 #ifde‡
gëmaxyx


229 
ölöe
 
	$UNDEF
(
gëmaxyx
)(
WINDOW
* 
wö
, & 
y
, & 
x
Ë{ 
	`gëmaxyx
(wö, y, x); 
	}
}

230 #unde‡
gëmaxyx


231 
	#gëmaxyx
 
	`UNDEF
(
gëmaxyx
)

	)

234 #ifde‡
gën°r


235 
ölöe
 
	$UNDEF
(
gën°r
)(*
_°r
, 
n
Ë{  
	`gën°r
(_°r,Ç); 
	}
}

236 #unde‡
gën°r


237 
	#gën°r
 
	`UNDEF
(
gën°r
)

	)

240 #ifde‡
gë∑ryx


241 
ölöe
 
	$UNDEF
(
gë∑ryx
)(
WINDOW
* 
wö
, & 
y
, & 
x
Ë{ 
	`gë∑ryx
(wö, y, x); 
	}
}

242 #unde‡
gë∑ryx


243 
	#gë∑ryx
 
	`UNDEF
(
gë∑ryx
)

	)

246 #ifde‡
gë°r


247 
ölöe
 
	$UNDEF
(
gë°r
)(*
_°r
Ë{  
	`gë°r
(_°r); 
	}
}

248 #unde‡
gë°r


249 
	#gë°r
 
	`UNDEF
(
gë°r
)

	)

252 #ifde‡
gëyx


253 
ölöe
 
	$UNDEF
(
gëyx
)(c⁄° 
WINDOW
* 
wö
, & 
y
, & 
x
) {

254 
	`gëyx
(
wö
, 
y
, 
x
); 
	}
}

255 #unde‡
gëyx


256 
	#gëyx
 
	`UNDEF
(
gëyx
)

	)

259 #ifde‡
hlöe


260 
ölöe
 
	$UNDEF
(
hlöe
)(
chty≥
 
ch
, 
n
Ë{  
	`hlöe
(ch,Ç); 
	}
}

261 #unde‡
hlöe


262 
	#hlöe
 
	`UNDEF
(
hlöe
)

	)

265 #ifde‡
öch


266 
ölöe
 
chty≥
 
	$UNDEF
(
öch
)(Ë{  
	`öch
(); 
	}
}

267 #unde‡
öch


268 
	#öch
 
	`UNDEF
(
öch
)

	)

271 #ifde‡
öch°r


272 
ölöe
 
	$UNDEF
(
öch°r
)(
chty≥
 *
°r
Ë{  
	`öch°r
(°r); 
	}
}

273 #unde‡
öch°r


274 
	#öch°r
 
	`UNDEF
(
öch°r
)

	)

277 #ifde‡
ön°r


278 
ölöe
 
	$UNDEF
(
ön°r
)(*
_°r
, 
n
Ë{  
	`ön°r
(_°r,Ç); 
	}
}

279 #unde‡
ön°r


280 
	#ön°r
 
	`UNDEF
(
ön°r
)

	)

283 #ifde‡
ösch


284 
ölöe
 
	$UNDEF
(
ösch
)(
chty≥
 
c
Ë{  
	`ösch
(c); 
	}
}

285 #unde‡
ösch


286 
	#ösch
 
	`UNDEF
(
ösch
)

	)

289 #ifde‡
ösdñ 


290 
ölöe
 
	$UNDEF
(
ösdñ 
)(
n
Ë{  
	`ösdñ 
“); 
	}
}

291 #unde‡
ösdñ 


292 
	#ösdñ 
 
	`UNDEF
(
ösdñ 
)

	)

295 #ifde‡
ö£π 


296 
ölöe
 
	$UNDEF
(
ö£π 
)(Ë{  
	`ö£π 
(); 
	}
}

297 #unde‡
ö£π 


298 
	#ö£π 
 
	`UNDEF
(
ö£π 
)

	)

301 #ifde‡
ö¢°r


302 
ölöe
 
	$UNDEF
(
ö¢°r
)(c⁄° *
_°r
, 
n
) {

303  
	`ö¢°r
(
_°r
, 
n
); 
	}
}

304 #unde‡
ö¢°r


305 
	#ö¢°r
 
	`UNDEF
(
ö¢°r
)

	)

308 #ifde‡
ös°r


309 
ölöe
 
	$UNDEF
(
ös°r
)(c⁄° *
_°r
) {

310  
	`ös°r
(
_°r
); 
	}
}

311 #unde‡
ös°r


312 
	#ös°r
 
	`UNDEF
(
ös°r
)

	)

315 #ifde‡
ö°r


316 
ölöe
 
	$UNDEF
(
ö°r
)(*
_°r
Ë{  
	`ö°r
(_°r); 
	}
}

317 #unde‡
ö°r


318 
	#ö°r
 
	`UNDEF
(
ö°r
)

	)

321 #ifde‡
öåÊush


322 
ölöe
 
	$UNDEF
(
öåÊush
)(
WINDOW
 *
wö
, 
boﬁ
 
bf
Ë{ 
	`öåÊush
(); 
	}
}

323 #unde‡
öåÊush


324 
	#öåÊush
 
	`UNDEF
(
öåÊush
)

	)

327 #ifde‡
Àaveok


328 
ölöe
 
	$UNDEF
(
Àaveok
)(
WINDOW
* 
wö
, 
boﬁ
 
bf
Ë{  
	`Àaveok
(wö, bf); 
	}
}

329 #unde‡
Àaveok


330 
	#Àaveok
 
	`UNDEF
(
Àaveok
)

	)

332 "C" 
NCURSES_IMPEXP
 
NCURSES_API
 
Àaveok
(
WINDOW
* 
wö
, 
boﬁ
 
bf
);

335 #ifde‡
move


336 
ölöe
 
	$UNDEF
(
move
)(
x
, 
y
Ë{  
	`move
(x, y); 
	}
}

337 #unde‡
move


338 
	#move
 
	`UNDEF
(
move
)

	)

341 #ifde‡
mvaddch


342 
ölöe
 
	$UNDEF
(
mvaddch
)(
y
, 
x
, 
chty≥
 
ch
)

343 {  
	`mvaddch
(
y
, 
x
, 
ch
); 
	}
}

344 #unde‡
mvaddch


345 
	#mvaddch
 
	`UNDEF
(
mvaddch
)

	)

348 #ifde‡
mvaddn°r


349 
ölöe
 
	$UNDEF
(
mvaddn°r
)(
y
, 
x
, c⁄° *
°r
, 
n
)

350 {  
	`mvaddn°r
(
y
, 
x
, 
°r
, 
n
); 
	}
}

351 #unde‡
mvaddn°r


352 
	#mvaddn°r
 
	`UNDEF
(
mvaddn°r
)

	)

355 #ifde‡
mvadd°r


356 
ölöe
 
	$UNDEF
(
mvadd°r
)(
y
, 
x
, c⁄° * 
°r
)

357 {  
	`mvadd°r
(
y
, 
x
, 
°r
); 
	}
}

358 #unde‡
mvadd°r


359 
	#mvadd°r
 
	`UNDEF
(
mvadd°r
)

	)

362 #ifde‡
mvchg©


363 
ölöe
 
	$UNDEF
(
mvchg©
)(
y
, 
x
, 
n
,

364 
©å_t
 
©å
, 
cﬁ‹
, c⁄° *
›ts
) {

365  
	`mvchg©
(
y
, 
x
, 
n
, 
©å
, 
cﬁ‹
, 
›ts
); 
	}
}

366 #unde‡
mvchg©


367 
	#mvchg©
 
	`UNDEF
(
mvchg©
)

	)

370 #ifde‡
mvdñch


371 
ölöe
 
	$UNDEF
(
mvdñch
)(
y
, 
x
Ë{  
	`mvdñch
(y, x);
	}
}

372 #unde‡
mvdñch


373 
	#mvdñch
 
	`UNDEF
(
mvdñch
)

	)

376 #ifde‡
mvgëch


377 
ölöe
 
	$UNDEF
(
mvgëch
)(
y
, 
x
Ë{  
	`mvgëch
(y, x);
	}
}

378 #unde‡
mvgëch


379 
	#mvgëch
 
	`UNDEF
(
mvgëch
)

	)

382 #ifde‡
mvgën°r


383 
ölöe
 
	$UNDEF
(
mvgën°r
)(
y
, 
x
, *
°r
, 
n
) {

384  
	`mvgën°r
(
y
, 
x
, 
°r
, 
n
);
	}
}

385 #unde‡
mvgën°r


386 
	#mvgën°r
 
	`UNDEF
(
mvgën°r
)

	)

389 #ifde‡
mvgë°r


390 
ölöe
 
	$UNDEF
(
mvgë°r
)(
y
, 
x
, *
°r
Ë{ 
	`mvgë°r
(y, x, så);
	}
}

391 #unde‡
mvgë°r


392 
	#mvgë°r
 
	`UNDEF
(
mvgë°r
)

	)

395 #ifde‡
mvöch


396 
ölöe
 
chty≥
 
	$UNDEF
(
mvöch
)(
y
, 
x
Ë{  
	`mvöch
(y, x);
	}
}

397 #unde‡
mvöch


398 
	#mvöch
 
	`UNDEF
(
mvöch
)

	)

401 #ifde‡
mvön°r


402 
ölöe
 
	$UNDEF
(
mvön°r
)(
y
, 
x
, *
_°r
, 
n
) {

403  
	`mvön°r
(
y
, 
x
, 
_°r
, 
n
); 
	}
}

404 #unde‡
mvön°r


405 
	#mvön°r
 
	`UNDEF
(
mvön°r
)

	)

408 #ifde‡
mvösch


409 
ölöe
 
	$UNDEF
(
mvösch
)(
y
, 
x
, 
chty≥
 
c
)

410 {  
	`mvösch
(
y
, 
x
, 
c
); 
	}
}

411 #unde‡
mvösch


412 
	#mvösch
 
	`UNDEF
(
mvösch
)

	)

415 #ifde‡
mvö¢°r


416 
ölöe
 
	$UNDEF
(
mvö¢°r
)(
y
, 
x
, c⁄° *
_°r
, 
n
) {

417  
	`mvö¢°r
(
y
, 
x
, 
_°r
, 
n
); 
	}
}

418 #unde‡
mvö¢°r


419 
	#mvö¢°r
 
	`UNDEF
(
mvö¢°r
)

	)

422 #ifde‡
mvös°r


423 
ölöe
 
	$UNDEF
(
mvös°r
)(
y
, 
x
, c⁄° *
_°r
) {

424  
	`mvös°r
(
y
, 
x
, 
_°r
); 
	}
}

425 #unde‡
mvös°r


426 
	#mvös°r
 
	`UNDEF
(
mvös°r
)

	)

429 #ifde‡
mvwaddch


430 
ölöe
 
	$UNDEF
(
mvwaddch
)(
WINDOW
 *
wö
, 
y
, 
x
, c⁄° 
chty≥
 
ch
)

431 {  
	`mvwaddch
(
wö
, 
y
, 
x
, 
ch
); 
	}
}

432 #unde‡
mvwaddch


433 
	#mvwaddch
 
	`UNDEF
(
mvwaddch
)

	)

436 #ifde‡
mvwaddchn°r


437 
ölöe
 
	$UNDEF
(
mvwaddchn°r
)(
WINDOW
 *
wö
, 
y
, 
x
, c⁄° 
chty≥
 *
°r
, 
n
)

438 {  
	`mvwaddchn°r
(
wö
, 
y
, 
x
, 
°r
, 
n
); 
	}
}

439 #unde‡
mvwaddchn°r


440 
	#mvwaddchn°r
 
	`UNDEF
(
mvwaddchn°r
)

	)

443 #ifde‡
mvwaddch°r


444 
ölöe
 
	$UNDEF
(
mvwaddch°r
)(
WINDOW
 *
wö
, 
y
, 
x
, c⁄° 
chty≥
 *
°r
)

445 {  
	`mvwaddch°r
(
wö
, 
y
, 
x
, 
°r
); 
	}
}

446 #unde‡
mvwaddch°r


447 
	#mvwaddch°r
 
	`UNDEF
(
mvwaddch°r
)

	)

450 #ifde‡
mvwaddn°r


451 
ölöe
 
	$UNDEF
(
mvwaddn°r
)(
WINDOW
 *
wö
, 
y
, 
x
, c⁄° *
°r
, 
n
)

452 {  
	`mvwaddn°r
(
wö
, 
y
, 
x
, 
°r
, 
n
); 
	}
}

453 #unde‡
mvwaddn°r


454 
	#mvwaddn°r
 
	`UNDEF
(
mvwaddn°r
)

	)

457 #ifde‡
mvwadd°r


458 
ölöe
 
	$UNDEF
(
mvwadd°r
)(
WINDOW
 *
wö
, 
y
, 
x
, c⁄° * 
°r
)

459 {  
	`mvwadd°r
(
wö
, 
y
, 
x
, 
°r
); 
	}
}

460 #unde‡
mvwadd°r


461 
	#mvwadd°r
 
	`UNDEF
(
mvwadd°r
)

	)

464 #ifde‡
mvwchg©


465 
ölöe
 
	$UNDEF
(
mvwchg©
)(
WINDOW
 *
wö
, 
y
, 
x
, 
n
,

466 
©å_t
 
©å
, 
cﬁ‹
, c⁄° *
›ts
) {

467  
	`mvwchg©
(
wö
, 
y
, 
x
, 
n
, 
©å
, 
cﬁ‹
, 
›ts
); 
	}
}

468 #unde‡
mvwchg©


469 
	#mvwchg©
 
	`UNDEF
(
mvwchg©
)

	)

472 #ifde‡
mvwdñch


473 
ölöe
 
	$UNDEF
(
mvwdñch
)(
WINDOW
 *
wö
, 
y
, 
x
)

474 {  
	`mvwdñch
(
wö
, 
y
, 
x
); 
	}
}

475 #unde‡
mvwdñch


476 
	#mvwdñch
 
	`UNDEF
(
mvwdñch
)

	)

479 #ifde‡
mvwgëch


480 
ölöe
 
	$UNDEF
(
mvwgëch
)(
WINDOW
 *
wö
, 
y
, 
x
Ë{  
	`mvwgëch
(wö, y, x);
	}
}

481 #unde‡
mvwgëch


482 
	#mvwgëch
 
	`UNDEF
(
mvwgëch
)

	)

485 #ifde‡
mvwgën°r


486 
ölöe
 
	$UNDEF
(
mvwgën°r
)(
WINDOW
 *
wö
, 
y
, 
x
, *
°r
, 
n
)

487 { 
	`mvwgën°r
(
wö
, 
y
, 
x
, 
°r
, 
n
);
	}
}

488 #unde‡
mvwgën°r


489 
	#mvwgën°r
 
	`UNDEF
(
mvwgën°r
)

	)

492 #ifde‡
mvwgë°r


493 
ölöe
 
	$UNDEF
(
mvwgë°r
)(
WINDOW
 *
wö
, 
y
, 
x
, *
°r
)

494 { 
	`mvwgë°r
(
wö
, 
y
, 
x
, 
°r
);
	}
}

495 #unde‡
mvwgë°r


496 
	#mvwgë°r
 
	`UNDEF
(
mvwgë°r
)

	)

499 #ifde‡
mvwhlöe


500 
ölöe
 
	$UNDEF
(
mvwhlöe
)(
WINDOW
 *
wö
, 
y
, 
x
, 
chty≥
 
c
, 
n
) {

501  
	`mvwhlöe
(
wö
, 
y
, 
x
, 
c
, 
n
); 
	}
}

502 #unde‡
mvwhlöe


503 
	#mvwhlöe
 
	`UNDEF
(
mvwhlöe
)

	)

506 #ifde‡
mvwöch


507 
ölöe
 
chty≥
 
	$UNDEF
(
mvwöch
)(
WINDOW
 *
wö
, 
y
, 
x
) {

508  
	`mvwöch
(
wö
, 
y
, 
x
);
	}
}

509 #unde‡
mvwöch


510 
	#mvwöch
 
	`UNDEF
(
mvwöch
)

	)

513 #ifde‡
mvwöchn°r


514 
ölöe
 
	$UNDEF
(
mvwöchn°r
)(
WINDOW
 *
wö
, 
y
, 
x
, 
chty≥
 *
°r
, 
n
Ë{  
	`mvwöchn°r
(wö, y, x, så,Ç); 
	}
}

515 #unde‡
mvwöchn°r


516 
	#mvwöchn°r
 
	`UNDEF
(
mvwöchn°r
)

	)

519 #ifde‡
mvwöch°r


520 
ölöe
 
	$UNDEF
(
mvwöch°r
)(
WINDOW
 *
wö
, 
y
, 
x
, 
chty≥
 *
°r
Ë{  
	`mvwöch°r
(wö, y, x, så); 
	}
}

521 #unde‡
mvwöch°r


522 
	#mvwöch°r
 
	`UNDEF
(
mvwöch°r
)

	)

525 #ifde‡
mvwön°r


526 
ölöe
 
	$UNDEF
(
mvwön°r
)(
WINDOW
 *
wö
, 
y
, 
x
, *
_°r
, 
n
) {

527  
	`mvwön°r
(
wö
, 
y
, 
x
, 
_°r
, 
n
); 
	}
}

528 #unde‡
mvwön°r


529 
	#mvwön°r
 
	`UNDEF
(
mvwön°r
)

	)

532 #ifde‡
mvwösch


533 
ölöe
 
	$UNDEF
(
mvwösch
)(
WINDOW
 *
wö
, 
y
, 
x
, 
chty≥
 
c
)

534 {  
	`mvwösch
(
wö
, 
y
, 
x
, 
c
); 
	}
}

535 #unde‡
mvwösch


536 
	#mvwösch
 
	`UNDEF
(
mvwösch
)

	)

539 #ifde‡
mvwö¢°r


540 
ölöe
 
	$UNDEF
(
mvwö¢°r
)(
WINDOW
 *
w
, 
y
, 
x
, c⁄° *
_°r
, 
n
) {

541  
	`mvwö¢°r
(
w
, 
y
, 
x
, 
_°r
, 
n
); 
	}
}

542 #unde‡
mvwö¢°r


543 
	#mvwö¢°r
 
	`UNDEF
(
mvwö¢°r
)

	)

546 #ifde‡
mvwös°r


547 
ölöe
 
	$UNDEF
(
mvwös°r
)(
WINDOW
 *
w
, 
y
, 
x
, c⁄° *
_°r
) {

548  
	`mvwös°r
(
w
, 
y
, 
x
, 
_°r
); 
	}
}

549 #unde‡
mvwös°r


550 
	#mvwös°r
 
	`UNDEF
(
mvwös°r
)

	)

553 #ifde‡
mvwvlöe


554 
ölöe
 
	$UNDEF
(
mvwvlöe
)(
WINDOW
 *
wö
, 
y
, 
x
, 
chty≥
 
c
, 
n
) {

555  
	`mvwvlöe
(
wö
, 
y
, 
x
, 
c
, 
n
); 
	}
}

556 #unde‡
mvwvlöe


557 
	#mvwvlöe
 
	`UNDEF
(
mvwvlöe
)

	)

560 #ifde‡
«pms


561 
ölöe
 
	$UNDEF
(
«pms
)(
x
Ë{ 
	`«pms
(x); 
	}
}

562 #unde‡
«pms


563 
	#«pms
 
	`UNDEF
(
«pms
)

	)

566 #ifde‡
no¸mode


567 
ölöe
 
	$UNDEF
(
no¸mode
)(Ë{  
	`no¸mode
(); 
	}
}

568 #unde‡
no¸mode


569 
	#no¸mode
 
	`UNDEF
(
no¸mode
)

	)

572 #ifde‡
nodñay


573 
ölöe
 
	$UNDEF
(
nodñay
)(Ë{ 
	`nodñay
(); 
	}
}

574 #unde‡
nodñay


575 
	#nodñay
 
	`UNDEF
(
nodñay
)

	)

578 #ifde‡
ªdøwwö


579 
ölöe
 
	$UNDEF
(
ªdøwwö
)(
WINDOW
 *
wö
Ë{  
	`ªdøwwö
(wö); 
	}
}

580 #unde‡
ªdøwwö


581 
	#ªdøwwö
 
	`UNDEF
(
ªdøwwö
)

	)

584 #ifde‡
ª‰esh


585 
ölöe
 
	$UNDEF
(
ª‰esh
)(Ë{  
	`ª‰esh
(); 
	}
}

586 #unde‡
ª‰esh


587 
	#ª‰esh
 
	`UNDEF
(
ª‰esh
)

	)

590 #ifde‡
ª£âîm


591 
ölöe
 
	$UNDEF
(
ª£âîm
)(Ë{  
	`ª£âîm
(); 
	}
}

592 #unde‡
ª£âîm


593 
	#ª£âîm
 
	`UNDEF
(
ª£âîm
)

	)

596 #ifde‡
ßvëîm


597 
ölöe
 
	$UNDEF
(
ßvëîm
)(Ë{  
	`ßvëîm
(); 
	}
}

598 #unde‡
ßvëîm


599 
	#ßvëîm
 
	`UNDEF
(
ßvëîm
)

	)

602 #ifde‡
s¸l


603 
ölöe
 
	$UNDEF
(
s¸l
)(
l
Ë{  
	`s¸l
÷); 
	}
}

604 #unde‡
s¸l


605 
	#s¸l
 
	`UNDEF
(
s¸l
)

	)

608 #ifde‡
s¸ﬁl


609 
ölöe
 
	$UNDEF
(
s¸ﬁl
)(
WINDOW
 *
wö
Ë{  
	`s¸ﬁl
(wö); 
	}
}

610 #unde‡
s¸ﬁl


611 
	#s¸ﬁl
 
	`UNDEF
(
s¸ﬁl
)

	)

614 #ifde‡
s¸ﬁlok


615 
ölöe
 
	$UNDEF
(
s¸ﬁlok
)(
WINDOW
* 
wö
, 
boﬁ
 
bf
Ë{  
	`s¸ﬁlok
(wö, bf); 
	}
}

616 #unde‡
s¸ﬁlok


617 
	#s¸ﬁlok
 
	`UNDEF
(
s¸ﬁlok
)

	)

619 #if 
deföed
(
__NCURSES_H
)

620 "C" 
NCURSES_IMPEXP
 
NCURSES_API
 
s¸ﬁlok
(
WINDOW
*, 
boﬁ
);

622 "C" 
NCURSES_IMPEXP
 
NCURSES_API
 
s¸ﬁlok
(
WINDOW
*, );

626 #ifde‡
£ts¸ªg


627 
ölöe
 
	$UNDEF
(
£ts¸ªg
)(
t
, 
b
Ë{  
	`£ts¸ªg
—, b); 
	}
}

628 #unde‡
£ts¸ªg


629 
	#£ts¸ªg
 
	`UNDEF
(
£ts¸ªg
)

	)

632 #ifde‡
°™díd


633 
ölöe
 
	$UNDEF
(
°™díd
)(Ë{  
	`°™díd
(); 
	}
}

634 #unde‡
°™díd


635 
	#°™díd
 
	`UNDEF
(
°™díd
)

	)

638 #ifde‡
°™dout


639 
ölöe
 
	$UNDEF
(
°™dout
)(Ë{  
	`°™dout
(); 
	}
}

640 #unde‡
°™dout


641 
	#°™dout
 
	`UNDEF
(
°™dout
)

	)

644 #ifde‡
sub∑d


645 
ölöe
 
WINDOW
 *
	$UNDEF
(
sub∑d
)(
WINDOW
 *
p
, 
l
, 
c
, 
y
, 
x
)

646 {  
	`dîwö
(
p
, 
l
, 
c
, 
y
, 
x
); 
	}
}

647 #unde‡
sub∑d


648 
	#sub∑d
 
	`UNDEF
(
sub∑d
)

	)

651 #ifde‡
timeout


652 
ölöe
 
	$UNDEF
(
timeout
)(
dñay
Ë{ 
	`timeout
(dñay); 
	}
}

653 #unde‡
timeout


654 
	#timeout
 
	`UNDEF
(
timeout
)

	)

657 #ifde‡
touchlöe


658 
ölöe
 
	$UNDEF
(
touchlöe
)(
WINDOW
 *
wö
, 
s
, 
c
)

659 {  
	`touchlöe
(
wö
, 
s
, 
c
); 
	}
}

660 #unde‡
touchlöe


661 
	#touchlöe
 
	`UNDEF
(
touchlöe
)

	)

664 #ifde‡
touchwö


665 
ölöe
 
	$UNDEF
(
touchwö
)(
WINDOW
 *
wö
Ë{  
	`touchwö
(wö); 
	}
}

666 #unde‡
touchwö


667 
	#touchwö
 
	`UNDEF
(
touchwö
)

	)

670 #ifde‡
u¡ouchwö


671 
ölöe
 
	$UNDEF
(
u¡ouchwö
)(
WINDOW
 *
wö
Ë{  
	`u¡ouchwö
(wö); 
	}
}

672 #unde‡
u¡ouchwö


673 
	#u¡ouchwö
 
	`UNDEF
(
u¡ouchwö
)

	)

676 #ifde‡
vlöe


677 
ölöe
 
	$UNDEF
(
vlöe
)(
chty≥
 
ch
, 
n
Ë{  
	`vlöe
(ch,Ç); 
	}
}

678 #unde‡
vlöe


679 
	#vlöe
 
	`UNDEF
(
vlöe
)

	)

682 #ifde‡
waddch°r


683 
ölöe
 
	$UNDEF
(
waddch°r
)(
WINDOW
 *
wö
, 
chty≥
 *
©
Ë{  
	`waddch°r
(wö,át); 
	}
}

684 #unde‡
waddch°r


685 
	#waddch°r
 
	`UNDEF
(
waddch°r
)

	)

688 #ifde‡
wadd°r


689 
ölöe
 
	$UNDEF
(
wadd°r
)(
WINDOW
 *
wö
, *
°r
Ë{  
	`wadd°r
(wö, så); 
	}
}

690 #unde‡
wadd°r


691 
	#wadd°r
 
	`UNDEF
(
wadd°r
)

	)

694 #ifde‡
w©åoff


695 
ölöe
 
	$UNDEF
(
w©åoff
)(
WINDOW
 *
wö
, 
©t
Ë{  
	`w©åoff
(wö,áâ); 
	}
}

696 #unde‡
w©åoff


697 
	#w©åoff
 
	`UNDEF
(
w©åoff
)

	)

700 #ifde‡
w©å£t


701 
ölöe
 
	$UNDEF
(
w©å£t
)(
WINDOW
 *
wö
, 
©t
Ë{  
	`w©å£t
(wö,áâ); 
	}
}

702 #unde‡
w©å£t


703 
	#w©å£t
 
	`UNDEF
(
w©å£t
)

	)

706 #ifde‡
wöch


707 
ölöe
 
chty≥
 
	$UNDEF
(
wöch
)(c⁄° 
WINDOW
* 
wö
Ë{  
	`wöch
(wö); 
	}
}

708 #unde‡
wöch


709 
	#wöch
 
	`UNDEF
(
wöch
)

	)

712 #ifde‡
wöchn°r


713 
ölöe
 
	$UNDEF
(
wöchn°r
)(
WINDOW
 *
wö
, 
chty≥
 *
°r
, 
n
Ë{  
	`wöchn°r
(wö, så,Ç); 
	}
}

714 #unde‡
wöchn°r


715 
	#wöchn°r
 
	`UNDEF
(
wöchn°r
)

	)

718 #ifde‡
wöch°r


719 
ölöe
 
	$UNDEF
(
wöch°r
)(
WINDOW
 *
wö
, 
chty≥
 *
°r
Ë{  
	`wöch°r
(wö, så); 
	}
}

720 #unde‡
wöch°r


721 
	#wöch°r
 
	`UNDEF
(
wöch°r
)

	)

724 #ifde‡
wös°r


725 
ölöe
 
	$UNDEF
(
wös°r
)(
WINDOW
 *
w
, c⁄° *
_°r
) {

726  
	`wös°r
(
w
, 
_°r
); 
	}
}

727 #unde‡
wös°r


728 
	#wös°r
 
	`UNDEF
(
wös°r
)

	)

731 #ifde‡
w°™díd


732 
ölöe
 
	$UNDEF
(
w°™díd
)(
WINDOW
 *
wö
Ë{  
	`w°™díd
(wö); 
	}
}

733 #unde‡
w°™díd


734 
	#w°™díd
 
	`UNDEF
(
w°™díd
)

	)

737 #ifde‡
w°™dout


738 
ölöe
 
	$UNDEF
(
w°™dout
)(
WINDOW
 *
wö
Ë{  
	`w°™dout
(wö); 
	}
}

739 #unde‡
w°™dout


740 
	#w°™dout
 
	`UNDEF
(
w°™dout
)

	)

749 "C" 
_nc_rùofÊöe
(, (*
öô
)(
WINDOW
*, ));

750 "C" 
	`_nc_xx_rùoff_öô
(
WINDOW
 *, );

751 "C" 
	`_nc_has_mou£
();

753 ˛as†
	cNCURSES_IMPEXP
 
NCur£sWödow


755 
‰õnd
 
˛ass
 
NCur£sMíu
;

756 
‰õnd
 
˛ass
 
NCur£sF‹m
;

758 
¥iv©e
:

759 
boﬁ
 
b_öôülized
;

760 
	`öôülize
();

761 
	`c⁄°ru˘ög
();

762 
‰õnd
 
	`_nc_xx_rùoff_öô
(
WINDOW
 *, );

764 
	`£t_keybﬂrd
();

766 
	$gëcﬁ‹
(
gëback
) const;

767 
	$gëPaú
() const;

769 
	`£çÆëã
(
f‹e
, 
back
, 
∑ú
);

770 
cﬁ‹Inôülized
;

774 
	`NCur£sWödow
(
WINDOW
* 
wö
, 
ncﬁs
);

776 
¥Ÿe˘ed
:

777 
vútuÆ
 
	$îr_h™dÀr
(c⁄° *Ëc⁄° 
	`THROWS
(
NCur£sEx˚±i⁄
);

780 
cou¡
;

785 
WINDOW
* 
w
;

787 
boﬁ
 
Ælo˚d
;

789 
NCur£sWödow
* 
∑r
;

790 
NCur£sWödow
* 
subwös
;

791 
NCur£sWödow
* 
sib
;

793 
	`kûl_subwödows
();

798 
	`NCur£sWödow
();

800 
public
:

801 
	`NCur£sWödow
(
WINDOW
* 
wödow
);

803 
	`NCur£sWödow
(
∆öes
,

804 
ncﬁs
,

805 
begö_y
,

806 
begö_x
);

808 
	`NCur£sWödow
(
NCur£sWödow
& 
∑r
,

809 
∆öes
,

810 
ncﬁs
,

811 
begö_y
,

812 
begö_x
,

813 
ab§ñ
 = 'a');

816 
	`NCur£sWödow
(
NCur£sWödow
& 
∑r
,

817 
boﬁ
 
do_box
 = 
TRUE
);

822 
NCur£sWödow
& 
›î©‹
=(c⁄° NCur£sWödow& 
rhs
)

824 i‡(
this
 !&
rhs
)

825 *
this
 = 
rhs
;

826  *
this
;

829 
	$NCur£sWödow
(c⁄° 
NCur£sWödow
& 
rhs
)

830 : 
	`w
(
rhs
.
w
), 
	`Ælo˚d
‘hs.
Ælo˚d
), 
	`∑r
‘hs.
∑r
), 
	`subwös
‘hs.
subwös
), 
	$sib
(
rhs
.
sib
)

832 
	}
}

834 
	gvútuÆ
 ~
NCur£sWödow
();

836 
NCur£sWödow
 
Cl⁄e
();

840 
u£Cﬁ‹s
();

843 
rùofÊöe
(
rùoff_löes
,

844 (*
öô
)(
NCur£sWödow
& 
wö
));

857 
	$löes
(Ëc⁄° { 
	`öôülize
();  
LINES
; 
	}
}

860 
	$cﬁs
(Ëc⁄° { 
	`öôülize
();  
COLS
; 
	}
}

863 
	$èbsize
(Ëc⁄° { 
	`öôülize
();  
TABSIZE
; 
	}
}

866 
NumbîOfCﬁ‹s
();

869 
	$cﬁ‹s
(Ëc⁄° {  
	`NumbîOfCﬁ‹s
(); 
	}
}

875 
	$height
(Ëc⁄° {  
	`maxy
(Ë+ 1; 
	}
}

878 
	$width
(Ëc⁄° {  
	`maxx
(Ë+ 1; 
	}
}

881 
	$begx
(Ëc⁄° {  
	`gëbegx
(
w
); 
	}
}

884 
	$begy
(Ëc⁄° {  
	`gëbegy
(
w
); 
	}
}

887 
	$curx
(Ëc⁄° {  
	`gëcurx
(
w
); 
	}
}

890 
	$cury
(Ëc⁄° {  
	`gëcury
(
w
); 
	}
}

893 
	$maxx
(Ëc⁄° {  
	`gëmaxx
(
w
Ë=
ERR
 ? ERR : gëmaxx(w)-1; 
	}
}

896 
	$maxy
(Ëc⁄° {  
	`gëmaxy
(
w
Ë=
ERR
 ? ERR : gëmaxy(w)-1; 
	}
}

899 
	$gëcﬁ‹
() const;

902 
	$f‹eground
(Ëc⁄° {  
	`gëcﬁ‹
(0); 
	}
}

905 
	$background
(Ëc⁄° {  
	`gëcﬁ‹
(1); 
	}
}

908 
£çÆëã
(
f‹e
, 
back
);

911 
£tcﬁ‹
(
∑ú
);

917 
vútuÆ
 
	$mvwö
(
begö_y
, 
begö_x
) {

918  ::
	`mvwö
(
w
, 
begö_y
, 
begö_x
); 
	}
}

925 
	$move
(
y
, 
x
Ë{  ::
	`wmove
(
w
, y, x); 
	}
}

928 
	$gëyx
(& 
y
, & 
x
Ëc⁄° { ::
	`gëyx
(
w
, y, x); 
	}
}

931 
	$gëbegyx
(& 
y
, & 
x
Ëc⁄° { ::
	`gëbegyx
(
w
, y, x); 
	}
}

934 
	$gëmaxyx
(& 
y
, & 
x
Ëc⁄° { ::
	`gëmaxyx
(
w
, y, x); 
	}
}

937 
	$gë∑ryx
(& 
y
, & 
x
Ëc⁄° { ::
	`gë∑ryx
(
w
, y, x); 
	}
}

940 
	$mvcur
(
ﬁdrow
, 
ﬁdcﬁ
, 
√wrow
, 
√wcﬁ
) const {

941  ::
	`mvcur
(
ﬁdrow
, 
ﬁdcﬁ
, 
√wrow
, 
√wcﬁ
); 
	}
}

947 
	$gëch
(Ë{  ::
	`wgëch
(
w
); 
	}
}

950 
	$gëch
(
y
, 
x
Ë{  ::
	`mvwgëch
(
w
, y, x); 
	}
}

953 
gë°r
(* 
°r
, 
n
=-1) {

954  ::
wgën°r
(
w
, 
°r
, 
n
); }

959 
gë°r
(
y
, 
x
, * 
°r
, 
n
=-1) {

960  ::
mvwgën°r
(
w
, 
y
, 
x
, 
°r
, 
n
); }

964 
ö°r
(*
s
, 
n
=-1Ë{  ::
wön°r
(
w
, s,Ç); }

969 
ö°r
(
y
, 
x
, *
s
, 
n
=-1) {

970  ::
mvwön°r
(
w
, 
y
, 
x
, 
s
, 
n
); }

974 
	$sˇnw
(c⁄° * 
fmt
, ...)

976 #i‡
__GNUG__
 >= 2

977 
	`__©åibuã__
 ((
	`f‹m©
 (
sˇnf
, 2, 3)));

982 
	`sˇnw
(c⁄° *, 
va_li°
);

985 
	$sˇnw
(
y
, 
x
, c⁄° * 
fmt
, ...)

988 #i‡
__GNUG__
 >= 2

989 
	`__©åibuã__
 ((
	`f‹m©
 (
sˇnf
, 4, 5)));

994 
	`sˇnw
(
y
, 
x
, c⁄° * 
fmt
, 
va_li°
);

1001 
	$addch
(c⁄° 
chty≥
 
ch
Ë{  ::
	`waddch
(
w
, ch); 
	}
}

1004 
	$addch
(
y
, 
x
, c⁄° 
chty≥
 
ch
) {

1005  ::
	`mvwaddch
(
w
, 
y
, 
x
, 
ch
); 
	}
}

1009 
	$echoch¨
(c⁄° 
chty≥
 
ch
Ë{  ::
	`wechoch¨
(
w
, ch); 
	}
}

1012 
add°r
(c⁄° * 
°r
, 
n
=-1) {

1013  ::
waddn°r
(
w
, 
°r
, 
n
); }

1017 
add°r
(
y
, 
x
, c⁄° * 
°r
, 
n
=-1) {

1018  ::
mvwaddn°r
(
w
, 
y
, 
x
, 
°r
, 
n
); }

1022 
addch°r
(c⁄° 
chty≥
* 
°r
, 
n
=-1) {

1023  ::
waddchn°r
(
w
, 
°r
, 
n
); }

1027 
addch°r
(
y
, 
x
, c⁄° 
chty≥
 * 
°r
, 
n
=-1) {

1028  ::
mvwaddchn°r
(
w
, 
y
, 
x
, 
°r
, 
n
); }

1032 
	$¥ötw
(c⁄° * 
fmt
, ...)

1034 #i‡(
__GNUG__
 >2Ë&& !
	$deföed
(
¥ötf
)

1035 
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 2, 3)));

1040 
	$¥ötw
(
y
, 
x
, c⁄° * 
fmt
, ...)

1042 #i‡(
__GNUG__
 >2Ë&& !
	$deföed
(
¥ötf
)

1043 
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, 4, 5)));

1048 
	`¥ötw
(c⁄° * 
fmt
, 
va_li°
 
¨gs
);

1051 
	`¥ötw
(
y
, 
x
, c⁄° * 
fmt
, 
va_li°
 
¨gs
);

1054 
chty≥
 
	$öch
(Ëc⁄° {  ::
	`wöch
(
w
); 
	}
}

1057 
chty≥
 
	$öch
(
y
, 
x
Ë{  ::
	`mvwöch
(
w
, y, x); 
	}
}

1061 
öch°r
(
chty≥
* 
°r
, 
n
=-1) {

1062  ::
wöchn°r
(
w
, 
°r
, 
n
); }

1066 
öch°r
(
y
, 
x
, 
chty≥
 * 
°r
, 
n
=-1) {

1067  ::
mvwöchn°r
(
w
, 
y
, 
x
, 
°r
, 
n
); }

1071 
	$ösch
(
chty≥
 
ch
Ë{  ::
	`wösch
(
w
, ch); 
	}
}

1075 
	$ösch
(
y
, 
x
, 
chty≥
 
ch
) {

1076  ::
	`mvwösch
(
w
, 
y
, 
x
, 
ch
); 
	}
}

1080 
	$ö£π 
(Ë{  ::
	`wösdñ 
(
w
, 1); 
	}
}

1083 
	$ösdñ 
(
n
=1Ë{  ::
	`wösdñ 
(
w
,Ç); 
	}
}

1087 
ös°r
(c⁄° *
s
, 
n
=-1) {

1088  ::
wö¢°r
(
w
, 
s
, 
n
); }

1093 
ös°r
(
y
, 
x
, c⁄° *
s
, 
n
=-1) {

1094  ::
mvwö¢°r
(
w
, 
y
, 
x
, 
s
, 
n
); }

1098 
	$©å⁄
 (
chty≥
 
©
Ë{  ::
	`w©å⁄
 (
w
,át); 
	}
}

1101 
	$©åoff
(
chty≥
 
©
Ë{  ::
	`w©åoff
(
w
, 
°©ic_ˇ°
<>◊t)); 
	}
}

1104 
	$©å£t
(
chty≥
 
©
Ë{  ::
	`w©å£t
(
w
, 
°©ic_ˇ°
<>◊t)); 
	}
}

1107 
chty≥
 
	$©ågë
(Ë{  ::
	`gë©ås
(
w
); 
	}
}

1110 
	$cﬁ‹_£t
(
cﬁ‹_∑ú_numbî
, * 
›ts
=
NULL
) {

1111  ::
	`wcﬁ‹_£t
(
w
, 
cﬁ‹_∑ú_numbî
, 
›ts
); 
	}
}

1114 
	$chg©
(
n
, 
©å_t
 
©å
, 
cﬁ‹
, c⁄° *
›ts
=
NULL
) {

1115  ::
	`wchg©
(
w
, 
n
, 
©å
, 
cﬁ‹
, 
›ts
); 
	}
}

1120 
	$chg©
(
y
, 
x
,

1121 
n
, 
©å_t
 
©å
, 
cﬁ‹
, c⁄° *
›ts
=
NULL
) {

1122  ::
	`mvwchg©
(
w
, 
y
, 
x
, 
n
, 
©å
, 
cﬁ‹
, 
›ts
); 
	}
}

1129 
chty≥
 
	$gëbkgd
(Ëc⁄° {  ::
	`gëbkgd
(
w
); 
	}
}

1132 
	$bkgd
(c⁄° 
chty≥
 
ch
Ë{  ::
	`wbkgd
(
w
, ch); 
	}
}

1135 
	$bkgd£t
(
chty≥
 
ch
Ë{ ::
	`wbkgd£t
(
w
, ch); 
	}
}

1141 
	$box
(
chty≥
 
vît
=0, chty≥ 
h‹
=0) {

1142  ::
	`wb‹dî
(
w
, 
vît
, vît, 
h‹
, h‹, 0, 0, 0, 0); 
	}
}

1147 
	$b‹dî
(
chty≥
 
À·
=0, chty≥ 
right
=0,

1148 
chty≥
 
t›
 =0, chty≥ 
bŸtom
=0,

1149 
chty≥
 
t›_À·
 =0, chty≥ 
t›_right
=0,

1150 
chty≥
 
bŸtom_À·
 =0, chty≥ 
bŸtom_right
=0) {

1151  ::
	`wb‹dî
(
w
, 
À·
, 
right
, 
t›
, 
bŸtom
, 
t›_À·
, 
t›_right
,

1152 
bŸtom_À·
, 
bŸtom_right
); 
	}
}

1160 
	$hlöe
(
Àn
, 
chty≥
 
ch
=0Ë{  ::
	`whlöe
(
w
, ch,Üí); 
	}
}

1164 
	$hlöe
(
y
, 
x
, 
Àn
, 
chty≥
 
ch
=0) {

1165  ::
	`mvwhlöe
(
w
, 
y
, 
x
, 
ch
, 
Àn
); 
	}
}

1168 
	$vlöe
(
Àn
, 
chty≥
 
ch
=0Ë{  ::
	`wvlöe
(
w
, ch,Üí); 
	}
}

1172 
	$vlöe
(
y
, 
x
, 
Àn
, 
chty≥
 
ch
=0) {

1173  ::
	`mvwvlöe
(
w
, 
y
, 
x
, 
ch
, 
Àn
); 
	}
}

1179 
	$îa£
(Ë{  ::
	`wîa£
(
w
); 
	}
}

1182 
	$˛ór
(Ë{  ::
	`w˛ór
(
w
); 
	}
}

1185 
	$˛órok
(
boﬁ
 
bf
Ë{  ::
	`˛órok
(
w
, bf); 
	}
}

1189 
	$˛πobŸ
(Ë{  ::
	`w˛πobŸ
(
w
); 
	}
}

1192 
	$˛π€ﬁ
(Ë{  ::
	`w˛π€ﬁ
(
w
); 
	}
}

1195 
	$dñch
(Ë{  ::
	`wdñch
(
w
); 
	}
}

1198 
	$dñch
(
y
, 
x
Ë{  ::
	`mvwdñch
(
w
, y, x); 
	}
}

1202 
	$dñëñn
(Ë{  ::
	`wösdñ 
(
w
, -1); 
	}
}

1208 
	$s¸ﬁl
(
amou¡
=1Ë{  ::
	`ws¸l
(
w
,ámou¡); 
	}
}

1212 
	$s¸ﬁlok
(
boﬁ
 
bf
Ë{  ::
	`s¸ﬁlok
(
w
, bf); 
	}
}

1217 
	$£ts¸ªg
(
‰om
, 
to
) {

1218  ::
	`w£ts¸ªg
(
w
, 
‰om
, 
to
); 
	}
}

1221 
	$idlok
(
boﬁ
 
bf
Ë{  ::
	`idlok
(
w
, bf); 
	}
}

1225 
	$idcok
(
boﬁ
 
bf
Ë{ ::
	`idcok
(
w
, bf); 
	}
}

1229 
	$touchlöe
(
s
, 
c
Ë{  ::
	`touchlöe
(
w
, s, c); 
	}
}

1232 
	$touchwö
(Ë{  ::
	`wtouch 
(
w
, 0, 
	`height
(), 1); 
	}
}

1235 
	$u¡ouchwö
(Ë{  ::
	`wtouch 
(
w
, 0, 
	`height
(), 0); 
	}
}

1238 
	$touch 
(
s
, 
˙t
, 
boﬁ
 
ch™ged
=
TRUE
) {

1239  ::
	`wtouch 
(
w
, 
s
, 
˙t
, 
°©ic_ˇ°
<>(
ch™ged
 ? 1 : 0)); 
	}
}

1243 
boﬁ
 
	$is_löëouched
(
löe
) const {

1244  (::
	`is_löëouched
(
w
, 
löe
Ë? 
TRUE
:
FALSE
); 
	}
}

1247 
boﬁ
 
	$is_wötouched
() const {

1248  (::
	`is_wötouched
(
w
Ë? 
TRUE
:
FALSE
); 
	}
}

1251 
	$Àaveok
(
boﬁ
 
bf
Ë{  ::
	`Àaveok
(
w
, bf); 
	}
}

1255 
	$ªdøw 
(
‰om
, 
n
Ë{  ::
	`wªdøw 
(
w
, from,Ç); 
	}
}

1258 
	$ªdøwwö
(Ë{  ::
	`wªdøw 
(
w
, 0, 
	`height
()); 
	}
}

1261 
	$doupd©e
(Ë{  ::
	`doupd©e
(); 
	}
}

1264 
	$syncdown
(Ë{ ::
	`wsyncdown
(
w
); 
	}
}

1267 
	$syncup
(Ë{ ::
	`wsyncup
(
w
); 
	}
}

1270 
	$cursyncup
(Ë{ ::
	`wcursyncup
(
w
); 
	}
}

1273 
	$syncok
(
boﬁ
 
bf
Ë{  ::
	`syncok
(
w
, bf); 
	}
}

1276 #i‚de‡
_no_Êushok


1277 
	$Êushok
(
boﬁ
 
bf
Ë{  ::
	`Êushok
(
w
, bf); 
	}
}

1280 
	$immedok
(
boﬁ
 
bf
Ë{ ::
	`immedok
(
w
, bf); 
	}
}

1284 
	$öåÊush
(
boﬁ
 
bf
Ë{  ::
	`öåÊush
(
w
, bf); 
	}
}

1286 
	$key∑d
(
boﬁ
 
bf
Ë{  ::
	`key∑d
(
w
, bf); 
	}
}

1289 
	$nodñay
(
boﬁ
 
bf
Ë{  ::
	`nodñay
(
w
, bf); 
	}
}

1291 
	$mëa
(
boﬁ
 
bf
Ë{  ::
	`mëa
(
w
, bf); 
	}
}

1295 
	$°™dout
(Ë{  ::
	`w°™dout
(
w
); 
	}
}

1298 
	$°™díd
(Ë{  ::
	`w°™díd
(
w
); 
	}
}

1305 
vútuÆ
 
	$ª‰esh
(Ë{  ::
	`wª‰esh
(
w
); 
	}
}

1309 
vútuÆ
 
	$nouåe‰esh
(Ë{  ::
	`wnouåe‰esh
(
w
); 
	}
}

1316 
	$ovîœy
(
NCur£sWödow
& 
wö
) {

1317  ::
	`ovîœy
(
w
, 
wö
.w); 
	}
}

1320 
	$ovîwrôe
(
NCur£sWödow
& 
wö
) {

1321  ::
	`ovîwrôe
(
w
, 
wö
.w); 
	}
}

1324 
	$c›ywö
(
NCur£sWödow
& 
wö
,

1325 
smörow
, 
smöcﬁ
,

1326 
dmörow
, 
dmöcﬁ
,

1327 
dmaxrow
, 
dmaxcﬁ
, 
boﬁ
 
ovîœywö
=
TRUE
) {

1328  ::
	`c›ywö
(
w
, 
wö
.w, 
smörow
, 
smöcﬁ
, 
dmörow
, 
dmöcﬁ
,

1329 
dmaxrow
, 
dmaxcﬁ
, 
°©ic_ˇ°
<>(
ovîœywö
 ? 1 : 0)); 
	}
}

1337 #i‡
deföed
(
NCURSES_EXT_FUNCS
) && (NCURSES_EXT_FUNCS != 0)

1338 
	$wªsize
(
√wLöes
, 
√wCﬁumns
) {

1339  ::
	`wªsize
(
w
, 
√wLöes
, 
√wCﬁumns
); 
	}
}

1345 
boﬁ
 
	$has_mou£
() const;

1351 
NCur£sWödow
* 
	$chûd
(Ë{  
subwös
; 
	}
}

1354 
NCur£sWödow
* 
	$siblög
(Ë{  
sib
; 
	}
}

1357 
NCur£sWödow
* 
	$∑ª¡
(Ë{  
∑r
; 
	}
}

1360 
boﬁ
 
isDes˚nd™t
(
NCur£sWödow
& 
wö
);

1367 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sCﬁ‹Wödow
 : 
public
 
NCur£sWödow


1369 
public
:

1370 
	$NCur£sCﬁ‹Wödow
(
WINDOW
* &
wödow
)

1371 : 
	$NCur£sWödow
(
wödow
) {

1372 
	`u£Cﬁ‹s
(); }

1374 
	$NCur£sCﬁ‹Wödow
(
∆öes
,

1375 
ncﬁs
,

1376 
begö_y
,

1377 
begö_x
)

1378 : 
	$NCur£sWödow
(
∆öes
, 
ncﬁs
, 
begö_y
, 
begö_x
) {

1379 
	`u£Cﬁ‹s
(); 
	}
}

1381 
NCur£sCﬁ‹Wödow
(
NCur£sWödow
& 
∑ª¡Wö
,

1382 
∆öes
,

1383 
ncﬁs
,

1384 
begö_y
,

1385 
begö_x
,

1386 
ab§ñ
 = 'a')

1387 : 
	$NCur£sWödow
(
∑ª¡Wö
,

1388 
∆öes
, 
ncﬁs
,

1389 
begö_y
, 
begö_x
,

1390 
ab§ñ
 ) {

1391 
	`u£Cﬁ‹s
(); 
	}
}

1398 
	mREQ_PAD_REFRESH
 = 
KEY_MAX
 + 1,

1399 
	mREQ_PAD_UP
,

1400 
	mREQ_PAD_DOWN
,

1401 
	mREQ_PAD_LEFT
,

1402 
	mREQ_PAD_RIGHT
,

1403 
	mREQ_PAD_EXIT


1404 } 
	tPad_Reque°
;

1406 c⁄° 
Pad_Reque°
 
	gPAD_LOW
 = 
REQ_PAD_REFRESH
;

1407 c⁄° 
Pad_Reque°
 
	gPAD_HIGH
 = 
REQ_PAD_EXIT
;

1413 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sPad
 : 
public
 
NCur£sWödow


1415 
¥iv©e
:

1416 
NCur£sWödow
* 
võwWö
;

1417 
NCur£sWödow
* 
	mvõwSub
;

1419 
	mh_gridsize
, 
	mv_gridsize
;

1421 
	m¥Ÿe˘ed
:

1422 
mö_row
, 
	mmö_cﬁ
;

1424 
NCur£sWödow
* 
	$Wö
() const {

1426  (
võwSub
?võwSub:(
võwWö
?viewWin:0));

1429 
NCur£sWödow
* 
	$gëWödow
() const {

1430  
võwWö
;

1431 
	}
}

1433 
NCur£sWödow
* 
	$gëSubWödow
() const {

1434  
võwSub
;

1435 
	}
}

1437 
vútuÆ
 
drivî
 (
key
);

1440 
vútuÆ
 
	$OnUnknownO≥øti⁄
(
∑d_ªq
) {

1441 ::
	`bìp
();

1442 
	}
}

1445 
vútuÆ
 
	$OnNavig©i⁄Eº‹
(
∑d_ªq
) {

1446 ::
	`bìp
();

1447 
	}
}

1450 
vútuÆ
 
	$OnO≥øti⁄
(
∑d_ªq
) {

1451 
	}
};

1455 
	gpublic
:

1456 
NCur£sPad
(
∆öes
, 
ncﬁs
);

1459 
	gNCur£sPad
& 
	g›î©‹
=(c⁄° 
NCur£sPad
& 
rhs
)

1461 i‡(
this
 !&
rhs
) {

1462 *
this
 = 
rhs
;

1463 
	gNCur£sWödow
::
›î©‹
=(
rhs
);

1465  *
	gthis
;

1468 
	$NCur£sPad
(c⁄° 
NCur£sPad
& 
rhs
)

1469 : 
	`NCur£sWödow
(
rhs
),

1470 
	`võwWö
(
rhs
.
võwWö
),

1471 
	`võwSub
(
rhs
.
võwSub
),

1472 
	`h_gridsize
(
rhs
.
h_gridsize
),

1473 
	`v_gridsize
(
rhs
.
v_gridsize
),

1474 
	`mö_row
(
rhs
.
mö_row
),

1475 
	$mö_cﬁ
(
rhs
.
mö_cﬁ
)

1477 
	}
}

1479 
	gvútuÆ
 ~
	$NCur£sPad
(Ë{
	}
}

1481 
	$echoch¨
(c⁄° 
chty≥
 
ch
Ë{  ::
	`≥choch¨
(
w
, ch); 
	}
}

1485 
ª‰esh
();

1489 
	$ª‰esh
(
pmörow
, 
pmöcﬁ
,

1490 
smörow
, 
smöcﬁ
,

1491 
smaxrow
, 
smaxcﬁ
) {

1492  ::
	`¥e‰esh
(
w
, 
pmörow
, 
pmöcﬁ
,

1493 
smörow
, 
smöcﬁ
, 
smaxrow
, 
smaxcﬁ
);

1494 
	}
}

1499 
nouåe‰esh
();

1503 
	$nouåe‰esh
(
pmörow
, 
pmöcﬁ
,

1504 
smörow
, 
smöcﬁ
,

1505 
smaxrow
, 
smaxcﬁ
) {

1506  ::
	`≤ouåe‰esh
(
w
, 
pmörow
, 
pmöcﬁ
,

1507 
smörow
, 
smöcﬁ
, 
smaxrow
, 
smaxcﬁ
);

1508 
	}
}

1511 
vútuÆ
 
£tWödow
(
NCur£sWödow
& 
võw
, 
v_grid
 = 1, 
h_grid
 = 1);

1514 
vútuÆ
 
£tSubWödow
(
NCur£sWödow
& 
sub
);

1519 
vútuÆ
 
	$›î©‹
() ();

1521 
	}
};

1526 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sFømedPad
 : 
public
 
NCur£sPad


1528 
¥Ÿe˘ed
:

1529 
vútuÆ
 
OnO≥øti⁄
(
∑d_ªq
);

1531 
	mpublic
:

1532 
	$NCur£sFømedPad
(
NCur£sWödow
& 
wö
, 
∆öes
, 
ncﬁs
,

1533 
v_grid
 = 1, 
h_grid
 = 1)

1534 : 
	$NCur£sPad
(
∆öes
, 
ncﬁs
) {

1535 
NCur£sPad
::
	`£tWödow
(
wö
, 
v_grid
, 
h_grid
);

1536 
NCur£sPad
::
	`£tSubWödow
(*(
√w
 
	`NCur£sWödow
(
wö
)));

1540 
vútuÆ
 ~
	$NCur£sFømedPad
() {

1541 
dñëe
 
	`gëSubWödow
();

1542 
	}
}

1544 
	$£tWödow
(
NCur£sWödow
& 
võw
, 
v_grid
 = 1, 
h_grid
 = 1) {

1545 
	`îr_h™dÀr
("OperationÇotállowed");

1546 
	}
}

1549 
	$£tSubWödow
(
NCur£sWödow
& 
sub
) {

1550 
	`îr_h™dÀr
("OperationÇotállowed");

1551 
	}
}

	@/usr/include/cursslk.h

36 #i‚de‡
NCURSES_CURSSLK_H_ö˛


37 
	#NCURSES_CURSSLK_H_ö˛


	)

39 
	~<cur£sw.h
>

41 ˛as†
	cNCURSES_IMPEXP
 
	mSo·_Labñ_Key_Së
 {

42 
	mpublic
:

44 ˛as†
	cNCURSES_IMPEXP
 
So·_Labñ_Key
 {

45 
‰õnd
 
˛ass
 
So·_Labñ_Key_Së
;

46 
	mpublic
:

47 íum { 
Le·
=0, 
	mCíãr
=1, 
	mRight
=2 } 
	tJu°ifiˇti⁄
;

49 
	m¥iv©e
:

50 *
œbñ
;

51 
Ju°ifiˇti⁄
 
	mf‹m©
;

52 
	mnum
;

54 
So·_Labñ_Key
(Ë: 
œbñ
(
NULL
), 
f‹m©
(
Le·
), 
num
(-1) {

57 
	mvútuÆ
 ~
So·_Labñ_Key
() {

58 
	mdñëe
[] 
	mœbñ
;

61 
	mpublic
:

63 
So·_Labñ_Key
& 
›î©‹
=(*
ãxt
);

66 
	mSo·_Labñ_Key
& 
	m›î©‹
=(
Ju°ifiˇti⁄
 
ju°
) {

67 
f‹m©
 = 
ju°
;

68  *
	mthis
;

72 
ölöe
 * 
›î©‹
()() const {

73  
	mœbñ
;

76 
	mSo·_Labñ_Key
& 
	m›î©‹
=(c⁄° 
So·_Labñ_Key
& 
rhs
)

78 i‡(
this
 !&
rhs
) {

79 *
this
 = 
rhs
;

81  *
	mthis
;

84 
So·_Labñ_Key
(c⁄° So·_Labñ_Key& 
rhs
)

85 : 
œbñ
(
NULL
),

86 
f‹m©
(
rhs
.format),

87 
num
(
rhs
.num)

89 *
	mthis
 = 
rhs
.
œbñ
;

93 
	gpublic
:

95 
N⁄e
 = -1,

96 
	gThªe_Two_Thªe
 = 0,

97 
	gFour_Four
 = 1,

98 
	gPC_StyÀ
 = 2,

99 
	gPC_StyÀ_Wôh_Index
 = 3

100 } 
	tLabñ_Layout
;

102 
	g¥iv©e
:

103 
NCURSES_IMPEXP
 
cou¡
;

104 
Labñ_Layout
 
NCURSES_IMPEXP
 
	gf‹m©
;

105 
NCURSES_IMPEXP
 
	gnum_œbñs
;

106 
boﬁ
 
NCURSES_IMPEXP
 
	gb_©åInô
;

108 
So·_Labñ_Key
 *
	g¶k_¨øy
;

111 
öô
();

114 
a˘iv©e_œbñ
(
i
, 
boﬁ
 
bf
=
TRUE
);

117 
a˘iv©e_œbñs
(
boﬁ
 
bf
);

119 
	g¥Ÿe˘ed
:

120 
ölöe
 
	$Eº‹
 (c⁄° * 
msg
Ëc⁄° 
	$THROWS
(
NCur£sEx˚±i⁄
) {

121 
	`THROW
(
√w
 
	`NCur£sEx˚±i⁄
 (
msg
));

122 
	}
}

125 
	$˛ór
() {

126 i‡(
ERR
==::
	`¶k_˛ór
())

127 
	`Eº‹
("slk_clear");

128 
	}
}

131 
	$ª°‹e
() {

132 i‡(
ERR
==::
	`¶k_ª°‹e
())

133 
	`Eº‹
("slk_restore");

134 
	}
}

136 
	gpublic
:

142 
So·_Labñ_Key_Së
(
Labñ_Layout
 
fmt
);

146 
NCURSES_IMPEXP
 
So·_Labñ_Key_Së
();

148 
	gSo·_Labñ_Key_Së
& 
	g›î©‹
=(c⁄° 
So·_Labñ_Key_Së
& 
rhs
)

150 i‡(
this
 !&
rhs
) {

151 *
this
 = 
rhs
;

152 
öô
();

154  *
	gthis
;

157 
	$So·_Labñ_Key_Së
(c⁄° 
So·_Labñ_Key_Së
& 
rhs
)

158 : 
	`b_©åInô
(
rhs
.
b_©åInô
),

159 
	$¶k_¨øy
(
NULL
)

161 
	`öô
();

162 
	}
}

164 
	gvútuÆ
 ~
So·_Labñ_Key_Së
();

167 
NCURSES_IMPEXP
 
	gSo·_Labñ_Key
& 
	g›î©‹
[](
	gi
);

170 
ölöe
 
	$œbñs
(Ëc⁄° {  
num_œbñs
; 
	}
}

173 
ölöe
 
	$ª‰esh
() {

174 i‡(
ERR
==::
	`¶k_ª‰esh
())

175 
	`Eº‹
("slk_refresh");

176 
	}
}

180 
ölöe
 
	$nouåe‰esh
() {

181 i‡(
ERR
==::
	`¶k_nouåe‰esh
())

182 
	`Eº‹
("slk_noutrefresh");

183 
	}
}

186 
ölöe
 
	$touch
() {

187 i‡(
ERR
==::
	`¶k_touch
())

188 
	`Eº‹
("slk_touch");

189 
	}
}

192 
ölöe
 
	$show
(
i
) {

193 
	`a˘iv©e_œbñ
(
i
,
FALSE
);

194 
	`a˘iv©e_œbñ
(
i
,
TRUE
);

195 
	}
}

198 
ölöe
 
	$hide
(
i
) {

199 
	`a˘iv©e_œbñ
(
i
,
FALSE
);

200 
	}
}

203 
ölöe
 
	$show
() {

204 
	`a˘iv©e_œbñs
(
FALSE
);

205 
	`a˘iv©e_œbñs
(
TRUE
);

206 
	}
}

209 
ölöe
 
	$hide
() {

210 
	`a˘iv©e_œbñs
(
FALSE
);

211 
	}
}

213 
ölöe
 
	$©å⁄
(
©å_t
 
©ås
) {

214 i‡(
ERR
==::
	`¶k_©å⁄
(
©ås
))

215 
	`Eº‹
("slk_attron");

216 
	}
}

218 
ölöe
 
	$©åoff
(
©å_t
 
©ås
) {

219 i‡(
ERR
==::
	`¶k_©åoff
(
©ås
))

220 
	`Eº‹
("slk_attroff");

221 
	}
}

223 
ölöe
 
	$©å£t
(
©å_t
 
©ås
) {

224 i‡(
ERR
==::
	`¶k_©å£t
(
©ås
))

225 
	`Eº‹
("slk_attrset");

226 
	}
}

228 
ölöe
 
	$cﬁ‹
(
cﬁ‹_∑ú_numbî
) {

229 i‡(
ERR
==::
	`¶k_cﬁ‹
(
cﬁ‹_∑ú_numbî
))

230 
	`Eº‹
("slk_color");

231 
	}
}

233 
ölöe
 
©å_t
 
	$©å
() const {

234  ::
	`¶k_©å
();

235 
	}
}

	@/usr/include/dirent.h

24 #i‚def 
_DIRENT_H


25 
	#_DIRENT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifde‡
__USE_XOPEN


34 #i‚de‡
__öo_t_deföed


35 #i‚de‡
__USE_FILE_OFFSET64


36 
__öo_t
 
	töo_t
;

38 
__öo64_t
 
	töo_t
;

40 
	#__öo_t_deföed


	)

42 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


43 
__öo64_t
 
	töo64_t
;

44 
	#__öo64_t_deföed


	)

63 
	~<bôs/dúít.h
>

65 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


66 
	#d_öo
 
d_fûío


	)

83 #ifde‡
_DIRENT_HAVE_D_NAMLEN


84 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

85 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

87 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

88 #ifde‡
_DIRENT_HAVE_D_RECLEN


89 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

91 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

92 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

97 #ifde‡
__USE_BSD


101 
	mDT_UNKNOWN
 = 0,

102 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

103 
	mDT_FIFO
 = 1,

104 
	#DT_FIFO
 
DT_FIFO


	)

105 
	mDT_CHR
 = 2,

106 
	#DT_CHR
 
DT_CHR


	)

107 
	mDT_DIR
 = 4,

108 
	#DT_DIR
 
DT_DIR


	)

109 
	mDT_BLK
 = 6,

110 
	#DT_BLK
 
DT_BLK


	)

111 
	mDT_REG
 = 8,

112 
	#DT_REG
 
DT_REG


	)

113 
	mDT_LNK
 = 10,

114 
	#DT_LNK
 
DT_LNK


	)

115 
	mDT_SOCK
 = 12,

116 
	#DT_SOCK
 
DT_SOCK


	)

117 
	mDT_WHT
 = 14

118 
	#DT_WHT
 
DT_WHT


	)

122 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

123 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

129 
__dú°ªam
 
	tDIR
;

136 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_XOPEN2K8


143 
DIR
 *
	`fd›ídú
 (
__fd
);

151 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

163 #i‚de‡
__USE_FILE_OFFSET64


164 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__REDIRECT


167 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

168 
	`__n⁄nuŒ
 ((1));

170 
	#ªaddú
 
ªaddú64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


184 #i‚de‡
__USE_FILE_OFFSET64


185 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

186 
dúít
 *
__ª°ri˘
 
__íåy
,

187 
dúít
 **
__ª°ri˘
 
__ªsu…
)

188 
	`__n⁄nuŒ
 ((1, 2, 3));

190 #ifde‡
__REDIRECT


191 
	`__REDIRECT
 (
ªaddú_r
,

192 (
DIR
 *
__ª°ri˘
 
__dúp
,

193 
dúít
 *
__ª°ri˘
 
__íåy
,

194 
dúít
 **
__ª°ri˘
 
__ªsu…
),

195 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

197 
	#ªaddú_r
 
ªaddú64_r


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

203 
dúít64
 *
__ª°ri˘
 
__íåy
,

204 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

205 
	`__n⁄nuŒ
 ((1, 2, 3));

210 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


213 
	~<bôs/ty≥s.h
>

216 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


225 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


228 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


232 #i‚de‡
MAXNAMLEN


234 
	~<bôs/posix1_lim.h
>

237 #ifde‡
NAME_MAX


238 
	#MAXNAMLEN
 
NAME_MAX


	)

240 
	#MAXNAMLEN
 255

	)

245 
	#__√ed_size_t


	)

246 
	~<°ddef.h
>

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

257 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

258 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

259 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

260 
__c⁄°
 
dúít
 **))

261 
	`__n⁄nuŒ
 ((1, 2));

263 #ifde‡
__REDIRECT


264 
	`__REDIRECT
 (
sˇndú
,

265 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

266 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

267 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

268 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

269 
__c⁄°
 
dúít
 **)),

270 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

272 
	#sˇndú
 
sˇndú64


	)

276 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


279 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

280 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

281 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

282 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

283 
__c⁄°
 
dúít64
 **))

284 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__USE_GNU


293 #i‚de‡
__USE_FILE_OFFSET64


294 
	`sˇndú©
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

295 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

296 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

297 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

298 
__c⁄°
 
dúít
 **))

299 
	`__n⁄nuŒ
 ((2, 3));

301 #ifde‡
__REDIRECT


302 
	`__REDIRECT
 (
sˇndú©
,

303 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

304 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

305 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

306 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

307 
__c⁄°
 
dúít
 **)),

308 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

310 
	#sˇndú©
 
sˇndú©64


	)

316 
	`sˇndú©64
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

317 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

318 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

319 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

320 
__c⁄°
 
dúít64
 **))

321 
	`__n⁄nuŒ
 ((2, 3));

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

327 
__c⁄°
 
dúít
 **
__e2
)

328 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

330 #ifde‡
__REDIRECT


331 
	`__REDIRECT_NTH
 (
Æphas‹t
,

332 (
__c⁄°
 
dúít
 **
__e1
,

333 
__c⁄°
 
dúít
 **
__e2
),

334 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 
	#Æphas‹t
 
Æphas‹t64


	)

340 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


341 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

342 
__c⁄°
 
dúít64
 **
__e2
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


353 #i‚de‡
__USE_FILE_OFFSET64


354 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

355 
size_t
 
__nbyãs
,

356 
__off_t
 *
__ª°ri˘
 
__ba£p
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

359 #ifde‡
__REDIRECT


360 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

361 (
__fd
, *
__ª°ri˘
 
__buf
,

362 
size_t
 
__nbyãs
,

363 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

364 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

366 
	#gëdúíåõs
 
gëdúíåõs64


	)

370 #ifde‡
__USE_LARGEFILE64


371 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

372 
size_t
 
__nbyãs
,

373 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

374 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

378 #ifde‡
__USE_GNU


380 #i‚de‡
__USE_FILE_OFFSET64


381 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

382 
__c⁄°
 
dúít
 **
__e2
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__REDIRECT


386 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

387 (
__c⁄°
 
dúít
 **
__e1
,

388 
__c⁄°
 
dúít
 **
__e2
),

389 
vîsi⁄s‹t64
)

390 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

392 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

396 #ifde‡
__USE_LARGEFILE64


397 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

398 
__c⁄°
 
dúít64
 **
__e2
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

403 
__END_DECLS


	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 
__c⁄°
 *
__ª°ri˘
 
__«me
,

76 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 
__c⁄°
 *
dli_‚ame
;

92 *
dli_fba£
;

93 
__c⁄°
 *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/elf.h

21 #i‚de‡
_ELF_H


22 
	#_ELF_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


30 
	~<°döt.h
>

33 
uöt16_t
 
	tElf32_HÆf
;

34 
uöt16_t
 
	tElf64_HÆf
;

37 
uöt32_t
 
	tElf32_W‹d
;

38 
öt32_t
 
	tElf32_Sw‹d
;

39 
uöt32_t
 
	tElf64_W‹d
;

40 
öt32_t
 
	tElf64_Sw‹d
;

43 
uöt64_t
 
	tElf32_Xw‹d
;

44 
öt64_t
 
	tElf32_Sxw‹d
;

45 
uöt64_t
 
	tElf64_Xw‹d
;

46 
öt64_t
 
	tElf64_Sxw‹d
;

49 
uöt32_t
 
	tElf32_Addr
;

50 
uöt64_t
 
	tElf64_Addr
;

53 
uöt32_t
 
	tElf32_Off
;

54 
uöt64_t
 
	tElf64_Off
;

57 
uöt16_t
 
	tElf32_Se˘i⁄
;

58 
uöt16_t
 
	tElf64_Se˘i⁄
;

61 
Elf32_HÆf
 
	tElf32_Vîsym
;

62 
Elf64_HÆf
 
	tElf64_Vîsym
;

67 
	#EI_NIDENT
 (16)

	)

71 
	me_idít
[
EI_NIDENT
];

72 
Elf32_HÆf
 
	me_ty≥
;

73 
Elf32_HÆf
 
	me_machöe
;

74 
Elf32_W‹d
 
	me_vîsi⁄
;

75 
Elf32_Addr
 
	me_íåy
;

76 
Elf32_Off
 
	me_phoff
;

77 
Elf32_Off
 
	me_shoff
;

78 
Elf32_W‹d
 
	me_Êags
;

79 
Elf32_HÆf
 
	me_ehsize
;

80 
Elf32_HÆf
 
	me_phítsize
;

81 
Elf32_HÆf
 
	me_phnum
;

82 
Elf32_HÆf
 
	me_shítsize
;

83 
Elf32_HÆf
 
	me_shnum
;

84 
Elf32_HÆf
 
	me_sh°∫dx
;

85 } 
	tElf32_Ehdr
;

89 
	me_idít
[
EI_NIDENT
];

90 
Elf64_HÆf
 
	me_ty≥
;

91 
Elf64_HÆf
 
	me_machöe
;

92 
Elf64_W‹d
 
	me_vîsi⁄
;

93 
Elf64_Addr
 
	me_íåy
;

94 
Elf64_Off
 
	me_phoff
;

95 
Elf64_Off
 
	me_shoff
;

96 
Elf64_W‹d
 
	me_Êags
;

97 
Elf64_HÆf
 
	me_ehsize
;

98 
Elf64_HÆf
 
	me_phítsize
;

99 
Elf64_HÆf
 
	me_phnum
;

100 
Elf64_HÆf
 
	me_shítsize
;

101 
Elf64_HÆf
 
	me_shnum
;

102 
Elf64_HÆf
 
	me_sh°∫dx
;

103 } 
	tElf64_Ehdr
;

109 
	#EI_MAG0
 0

	)

110 
	#ELFMAG0
 0x7‡

	)

112 
	#EI_MAG1
 1

	)

113 
	#ELFMAG1
 'E'

	)

115 
	#EI_MAG2
 2

	)

116 
	#ELFMAG2
 'L'

	)

118 
	#EI_MAG3
 3

	)

119 
	#ELFMAG3
 'F'

	)

122 
	#ELFMAG
 "\177ELF"

	)

123 
	#SELFMAG
 4

	)

125 
	#EI_CLASS
 4

	)

126 
	#ELFCLASSNONE
 0

	)

127 
	#ELFCLASS32
 1

	)

128 
	#ELFCLASS64
 2

	)

129 
	#ELFCLASSNUM
 3

	)

131 
	#EI_DATA
 5

	)

132 
	#ELFDATANONE
 0

	)

133 
	#ELFDATA2LSB
 1

	)

134 
	#ELFDATA2MSB
 2

	)

135 
	#ELFDATANUM
 3

	)

137 
	#EI_VERSION
 6

	)

140 
	#EI_OSABI
 7

	)

141 
	#ELFOSABI_NONE
 0

	)

142 
	#ELFOSABI_SYSV
 0

	)

143 
	#ELFOSABI_HPUX
 1

	)

144 
	#ELFOSABI_NETBSD
 2

	)

145 
	#ELFOSABI_GNU
 3

	)

146 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

147 
	#ELFOSABI_SOLARIS
 6

	)

148 
	#ELFOSABI_AIX
 7

	)

149 
	#ELFOSABI_IRIX
 8

	)

150 
	#ELFOSABI_FREEBSD
 9

	)

151 
	#ELFOSABI_TRU64
 10

	)

152 
	#ELFOSABI_MODESTO
 11

	)

153 
	#ELFOSABI_OPENBSD
 12

	)

154 
	#ELFOSABI_ARM_AEABI
 64

	)

155 
	#ELFOSABI_ARM
 97

	)

156 
	#ELFOSABI_STANDALONE
 255

	)

158 
	#EI_ABIVERSION
 8

	)

160 
	#EI_PAD
 9

	)

164 
	#ET_NONE
 0

	)

165 
	#ET_REL
 1

	)

166 
	#ET_EXEC
 2

	)

167 
	#ET_DYN
 3

	)

168 
	#ET_CORE
 4

	)

169 
	#ET_NUM
 5

	)

170 
	#ET_LOOS
 0x„00

	)

171 
	#ET_HIOS
 0x„f‡

	)

172 
	#ET_LOPROC
 0xff00

	)

173 
	#ET_HIPROC
 0xfff‡

	)

177 
	#EM_NONE
 0

	)

178 
	#EM_M32
 1

	)

179 
	#EM_SPARC
 2

	)

180 
	#EM_386
 3

	)

181 
	#EM_68K
 4

	)

182 
	#EM_88K
 5

	)

183 
	#EM_860
 7

	)

184 
	#EM_MIPS
 8

	)

185 
	#EM_S370
 9

	)

186 
	#EM_MIPS_RS3_LE
 10

	)

188 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

196 
	#EM_V800
 36

	)

197 
	#EM_FR20
 37

	)

198 
	#EM_RH32
 38

	)

199 
	#EM_RCE
 39

	)

200 
	#EM_ARM
 40

	)

201 
	#EM_FAKE_ALPHA
 41

	)

202 
	#EM_SH
 42

	)

203 
	#EM_SPARCV9
 43

	)

204 
	#EM_TRICORE
 44

	)

205 
	#EM_ARC
 45

	)

206 
	#EM_H8_300
 46

	)

207 
	#EM_H8_300H
 47

	)

208 
	#EM_H8S
 48

	)

209 
	#EM_H8_500
 49

	)

210 
	#EM_IA_64
 50

	)

211 
	#EM_MIPS_X
 51

	)

212 
	#EM_COLDFIRE
 52

	)

213 
	#EM_68HC12
 53

	)

214 
	#EM_MMA
 54

	)

215 
	#EM_PCP
 55

	)

216 
	#EM_NCPU
 56

	)

217 
	#EM_NDR1
 57

	)

218 
	#EM_STARCORE
 58

	)

219 
	#EM_ME16
 59

	)

220 
	#EM_ST100
 60

	)

221 
	#EM_TINYJ
 61

	)

222 
	#EM_X86_64
 62

	)

223 
	#EM_PDSP
 63

	)

225 
	#EM_FX66
 66

	)

226 
	#EM_ST9PLUS
 67

	)

227 
	#EM_ST7
 68

	)

228 
	#EM_68HC16
 69

	)

229 
	#EM_68HC11
 70

	)

230 
	#EM_68HC08
 71

	)

231 
	#EM_68HC05
 72

	)

232 
	#EM_SVX
 73

	)

233 
	#EM_ST19
 74

	)

234 
	#EM_VAX
 75

	)

235 
	#EM_CRIS
 76

	)

236 
	#EM_JAVELIN
 77

	)

237 
	#EM_FIREPATH
 78

	)

238 
	#EM_ZSP
 79

	)

239 
	#EM_MMIX
 80

	)

240 
	#EM_HUANY
 81

	)

241 
	#EM_PRISM
 82

	)

242 
	#EM_AVR
 83

	)

243 
	#EM_FR30
 84

	)

244 
	#EM_D10V
 85

	)

245 
	#EM_D30V
 86

	)

246 
	#EM_V850
 87

	)

247 
	#EM_M32R
 88

	)

248 
	#EM_MN10300
 89

	)

249 
	#EM_MN10200
 90

	)

250 
	#EM_PJ
 91

	)

251 
	#EM_OPENRISC
 92

	)

252 
	#EM_ARC_A5
 93

	)

253 
	#EM_XTENSA
 94

	)

254 
	#EM_NUM
 95

	)

260 
	#EM_ALPHA
 0x9026

	)

264 
	#EV_NONE
 0

	)

265 
	#EV_CURRENT
 1

	)

266 
	#EV_NUM
 2

	)

272 
Elf32_W‹d
 
	msh_«me
;

273 
Elf32_W‹d
 
	msh_ty≥
;

274 
Elf32_W‹d
 
	msh_Êags
;

275 
Elf32_Addr
 
	msh_addr
;

276 
Elf32_Off
 
	msh_off£t
;

277 
Elf32_W‹d
 
	msh_size
;

278 
Elf32_W‹d
 
	msh_lök
;

279 
Elf32_W‹d
 
	msh_öfo
;

280 
Elf32_W‹d
 
	msh_addølign
;

281 
Elf32_W‹d
 
	msh_ítsize
;

282 } 
	tElf32_Shdr
;

286 
Elf64_W‹d
 
	msh_«me
;

287 
Elf64_W‹d
 
	msh_ty≥
;

288 
Elf64_Xw‹d
 
	msh_Êags
;

289 
Elf64_Addr
 
	msh_addr
;

290 
Elf64_Off
 
	msh_off£t
;

291 
Elf64_Xw‹d
 
	msh_size
;

292 
Elf64_W‹d
 
	msh_lök
;

293 
Elf64_W‹d
 
	msh_öfo
;

294 
Elf64_Xw‹d
 
	msh_addølign
;

295 
Elf64_Xw‹d
 
	msh_ítsize
;

296 } 
	tElf64_Shdr
;

300 
	#SHN_UNDEF
 0

	)

301 
	#SHN_LORESERVE
 0xff00

	)

302 
	#SHN_LOPROC
 0xff00

	)

303 
	#SHN_BEFORE
 0xff00

	)

305 
	#SHN_AFTER
 0xff01

	)

307 
	#SHN_HIPROC
 0xff1‡

	)

308 
	#SHN_LOOS
 0xff20

	)

309 
	#SHN_HIOS
 0xff3‡

	)

310 
	#SHN_ABS
 0xfff1

	)

311 
	#SHN_COMMON
 0xfff2

	)

312 
	#SHN_XINDEX
 0xfff‡

	)

313 
	#SHN_HIRESERVE
 0xfff‡

	)

317 
	#SHT_NULL
 0

	)

318 
	#SHT_PROGBITS
 1

	)

319 
	#SHT_SYMTAB
 2

	)

320 
	#SHT_STRTAB
 3

	)

321 
	#SHT_RELA
 4

	)

322 
	#SHT_HASH
 5

	)

323 
	#SHT_DYNAMIC
 6

	)

324 
	#SHT_NOTE
 7

	)

325 
	#SHT_NOBITS
 8

	)

326 
	#SHT_REL
 9

	)

327 
	#SHT_SHLIB
 10

	)

328 
	#SHT_DYNSYM
 11

	)

329 
	#SHT_INIT_ARRAY
 14

	)

330 
	#SHT_FINI_ARRAY
 15

	)

331 
	#SHT_PREINIT_ARRAY
 16

	)

332 
	#SHT_GROUP
 17

	)

333 
	#SHT_SYMTAB_SHNDX
 18

	)

334 
	#SHT_NUM
 19

	)

335 
	#SHT_LOOS
 0x60000000

	)

336 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

337 
	#SHT_GNU_HASH
 0x6ffffff6

	)

338 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

339 
	#SHT_CHECKSUM
 0x6ffffff8

	)

340 
	#SHT_LOSUNW
 0x6fffffÁ

	)

341 
	#SHT_SUNW_move
 0x6fffffÁ

	)

342 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

343 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

344 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

345 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

346 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

347 
	#SHT_HISUNW
 0x6ffffff‡

	)

348 
	#SHT_HIOS
 0x6ffffff‡

	)

349 
	#SHT_LOPROC
 0x70000000

	)

350 
	#SHT_HIPROC
 0x7ffffff‡

	)

351 
	#SHT_LOUSER
 0x80000000

	)

352 
	#SHT_HIUSER
 0x8ffffff‡

	)

356 
	#SHF_WRITE
 (1 << 0Ë

	)

357 
	#SHF_ALLOC
 (1 << 1Ë

	)

358 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

359 
	#SHF_MERGE
 (1 << 4Ë

	)

360 
	#SHF_STRINGS
 (1 << 5Ë

	)

361 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

362 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

363 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

365 
	#SHF_GROUP
 (1 << 9Ë

	)

366 
	#SHF_TLS
 (1 << 10Ë

	)

367 
	#SHF_MASKOS
 0x0ff00000

	)

368 
	#SHF_MASKPROC
 0xf0000000

	)

369 
	#SHF_ORDERED
 (1 << 30Ë

	)

371 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

375 
	#GRP_COMDAT
 0x1

	)

381 
Elf32_W‹d
 
	m°_«me
;

382 
Elf32_Addr
 
	m°_vÆue
;

383 
Elf32_W‹d
 
	m°_size
;

384 
	m°_öfo
;

385 
	m°_Ÿhî
;

386 
Elf32_Se˘i⁄
 
	m°_shndx
;

387 } 
	tElf32_Sym
;

391 
Elf64_W‹d
 
	m°_«me
;

392 
	m°_öfo
;

393 
	m°_Ÿhî
;

394 
Elf64_Se˘i⁄
 
	m°_shndx
;

395 
Elf64_Addr
 
	m°_vÆue
;

396 
Elf64_Xw‹d
 
	m°_size
;

397 } 
	tElf64_Sym
;

404 
Elf32_HÆf
 
	msi_boundto
;

405 
Elf32_HÆf
 
	msi_Êags
;

406 } 
	tElf32_Symöfo
;

410 
Elf64_HÆf
 
	msi_boundto
;

411 
Elf64_HÆf
 
	msi_Êags
;

412 } 
	tElf64_Symöfo
;

415 
	#SYMINFO_BT_SELF
 0xfff‡

	)

416 
	#SYMINFO_BT_PARENT
 0xff„

	)

417 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

420 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

421 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

422 
	#SYMINFO_FLG_COPY
 0x0004

	)

423 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

426 
	#SYMINFO_NONE
 0

	)

427 
	#SYMINFO_CURRENT
 1

	)

428 
	#SYMINFO_NUM
 2

	)

433 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

434 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

435 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

438 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

439 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

440 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

444 
	#STB_LOCAL
 0

	)

445 
	#STB_GLOBAL
 1

	)

446 
	#STB_WEAK
 2

	)

447 
	#STB_NUM
 3

	)

448 
	#STB_LOOS
 10

	)

449 
	#STB_GNU_UNIQUE
 10

	)

450 
	#STB_HIOS
 12

	)

451 
	#STB_LOPROC
 13

	)

452 
	#STB_HIPROC
 15

	)

456 
	#STT_NOTYPE
 0

	)

457 
	#STT_OBJECT
 1

	)

458 
	#STT_FUNC
 2

	)

459 
	#STT_SECTION
 3

	)

460 
	#STT_FILE
 4

	)

461 
	#STT_COMMON
 5

	)

462 
	#STT_TLS
 6

	)

463 
	#STT_NUM
 7

	)

464 
	#STT_LOOS
 10

	)

465 
	#STT_GNU_IFUNC
 10

	)

466 
	#STT_HIOS
 12

	)

467 
	#STT_LOPROC
 13

	)

468 
	#STT_HIPROC
 15

	)

475 
	#STN_UNDEF
 0

	)

480 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

483 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

486 
	#STV_DEFAULT
 0

	)

487 
	#STV_INTERNAL
 1

	)

488 
	#STV_HIDDEN
 2

	)

489 
	#STV_PROTECTED
 3

	)

496 
Elf32_Addr
 
	mr_off£t
;

497 
Elf32_W‹d
 
	mr_öfo
;

498 } 
	tElf32_Rñ
;

507 
Elf64_Addr
 
	mr_off£t
;

508 
Elf64_Xw‹d
 
	mr_öfo
;

509 } 
	tElf64_Rñ
;

515 
Elf32_Addr
 
	mr_off£t
;

516 
Elf32_W‹d
 
	mr_öfo
;

517 
Elf32_Sw‹d
 
	mr_addíd
;

518 } 
	tElf32_Rña
;

522 
Elf64_Addr
 
	mr_off£t
;

523 
Elf64_Xw‹d
 
	mr_öfo
;

524 
Elf64_Sxw‹d
 
	mr_addíd
;

525 } 
	tElf64_Rña
;

529 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

530 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

531 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

533 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

534 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

535 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

541 
Elf32_W‹d
 
	mp_ty≥
;

542 
Elf32_Off
 
	mp_off£t
;

543 
Elf32_Addr
 
	mp_vaddr
;

544 
Elf32_Addr
 
	mp_∑ddr
;

545 
Elf32_W‹d
 
	mp_fûesz
;

546 
Elf32_W‹d
 
	mp_memsz
;

547 
Elf32_W‹d
 
	mp_Êags
;

548 
Elf32_W‹d
 
	mp_Æign
;

549 } 
	tElf32_Phdr
;

553 
Elf64_W‹d
 
	mp_ty≥
;

554 
Elf64_W‹d
 
	mp_Êags
;

555 
Elf64_Off
 
	mp_off£t
;

556 
Elf64_Addr
 
	mp_vaddr
;

557 
Elf64_Addr
 
	mp_∑ddr
;

558 
Elf64_Xw‹d
 
	mp_fûesz
;

559 
Elf64_Xw‹d
 
	mp_memsz
;

560 
Elf64_Xw‹d
 
	mp_Æign
;

561 } 
	tElf64_Phdr
;

567 
	#PN_XNUM
 0xffff

	)

571 
	#PT_NULL
 0

	)

572 
	#PT_LOAD
 1

	)

573 
	#PT_DYNAMIC
 2

	)

574 
	#PT_INTERP
 3

	)

575 
	#PT_NOTE
 4

	)

576 
	#PT_SHLIB
 5

	)

577 
	#PT_PHDR
 6

	)

578 
	#PT_TLS
 7

	)

579 
	#PT_NUM
 8

	)

580 
	#PT_LOOS
 0x60000000

	)

581 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

582 
	#PT_GNU_STACK
 0x6474e551

	)

583 
	#PT_GNU_RELRO
 0x6474e552

	)

584 
	#PT_LOSUNW
 0x6fffffÁ

	)

585 
	#PT_SUNWBSS
 0x6fffffÁ

	)

586 
	#PT_SUNWSTACK
 0x6ffffffb

	)

587 
	#PT_HISUNW
 0x6fffffff

	)

588 
	#PT_HIOS
 0x6ffffff‡

	)

589 
	#PT_LOPROC
 0x70000000

	)

590 
	#PT_HIPROC
 0x7ffffff‡

	)

594 
	#PF_X
 (1 << 0Ë

	)

595 
	#PF_W
 (1 << 1Ë

	)

596 
	#PF_R
 (1 << 2Ë

	)

597 
	#PF_MASKOS
 0x0ff00000

	)

598 
	#PF_MASKPROC
 0xf0000000

	)

602 
	#NT_PRSTATUS
 1

	)

603 
	#NT_FPREGSET
 2

	)

604 
	#NT_PRPSINFO
 3

	)

605 
	#NT_PRXREG
 4

	)

606 
	#NT_TASKSTRUCT
 4

	)

607 
	#NT_PLATFORM
 5

	)

608 
	#NT_AUXV
 6

	)

609 
	#NT_GWINDOWS
 7

	)

610 
	#NT_ASRS
 8

	)

611 
	#NT_PSTATUS
 10

	)

612 
	#NT_PSINFO
 13

	)

613 
	#NT_PRCRED
 14

	)

614 
	#NT_UTSNAME
 15

	)

615 
	#NT_LWPSTATUS
 16

	)

616 
	#NT_LWPSINFO
 17

	)

617 
	#NT_PRFPXREG
 20

	)

618 
	#NT_PRXFPREG
 0x46e62b7‡

	)

619 
	#NT_PPC_VMX
 0x100

	)

620 
	#NT_PPC_SPE
 0x101

	)

621 
	#NT_PPC_VSX
 0x102

	)

622 
	#NT_386_TLS
 0x200

	)

623 
	#NT_386_IOPERM
 0x201

	)

624 
	#NT_X86_XSTATE
 0x202

	)

628 
	#NT_VERSION
 1

	)

635 
Elf32_Sw‹d
 
	md_èg
;

638 
Elf32_W‹d
 
	md_vÆ
;

639 
Elf32_Addr
 
	md_±r
;

640 } 
	md_un
;

641 } 
	tElf32_Dyn
;

645 
Elf64_Sxw‹d
 
	md_èg
;

648 
Elf64_Xw‹d
 
	md_vÆ
;

649 
Elf64_Addr
 
	md_±r
;

650 } 
	md_un
;

651 } 
	tElf64_Dyn
;

655 
	#DT_NULL
 0

	)

656 
	#DT_NEEDED
 1

	)

657 
	#DT_PLTRELSZ
 2

	)

658 
	#DT_PLTGOT
 3

	)

659 
	#DT_HASH
 4

	)

660 
	#DT_STRTAB
 5

	)

661 
	#DT_SYMTAB
 6

	)

662 
	#DT_RELA
 7

	)

663 
	#DT_RELASZ
 8

	)

664 
	#DT_RELAENT
 9

	)

665 
	#DT_STRSZ
 10

	)

666 
	#DT_SYMENT
 11

	)

667 
	#DT_INIT
 12

	)

668 
	#DT_FINI
 13

	)

669 
	#DT_SONAME
 14

	)

670 
	#DT_RPATH
 15

	)

671 
	#DT_SYMBOLIC
 16

	)

672 
	#DT_REL
 17

	)

673 
	#DT_RELSZ
 18

	)

674 
	#DT_RELENT
 19

	)

675 
	#DT_PLTREL
 20

	)

676 
	#DT_DEBUG
 21

	)

677 
	#DT_TEXTREL
 22

	)

678 
	#DT_JMPREL
 23

	)

679 
	#DT_BIND_NOW
 24

	)

680 
	#DT_INIT_ARRAY
 25

	)

681 
	#DT_FINI_ARRAY
 26

	)

682 
	#DT_INIT_ARRAYSZ
 27

	)

683 
	#DT_FINI_ARRAYSZ
 28

	)

684 
	#DT_RUNPATH
 29

	)

685 
	#DT_FLAGS
 30

	)

686 
	#DT_ENCODING
 32

	)

687 
	#DT_PREINIT_ARRAY
 32

	)

688 
	#DT_PREINIT_ARRAYSZ
 33

	)

689 
	#DT_NUM
 34

	)

690 
	#DT_LOOS
 0x6000000d

	)

691 
	#DT_HIOS
 0x6ffff000

	)

692 
	#DT_LOPROC
 0x70000000

	)

693 
	#DT_HIPROC
 0x7ffffff‡

	)

694 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

699 
	#DT_VALRNGLO
 0x6ffffd00

	)

700 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

701 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

702 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

703 
	#DT_CHECKSUM
 0x6ffffdf8

	)

704 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

705 
	#DT_MOVEENT
 0x6ffffdÁ

	)

706 
	#DT_MOVESZ
 0x6ffffdfb

	)

707 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

708 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

710 
	#DT_SYMINSZ
 0x6ffffd„

	)

711 
	#DT_SYMINENT
 0x6ffffdf‡

	)

712 
	#DT_VALRNGHI
 0x6ffffdff

	)

713 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

714 
	#DT_VALNUM
 12

	)

721 
	#DT_ADDRRNGLO
 0x6fff„00

	)

722 
	#DT_GNU_HASH
 0x6fff„f5

	)

723 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

724 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

725 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

726 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

727 
	#DT_CONFIG
 0x6fff„Á

	)

728 
	#DT_DEPAUDIT
 0x6fff„fb

	)

729 
	#DT_AUDIT
 0x6fff„f¯

	)

730 
	#DT_PLTPAD
 0x6fff„fd

	)

731 
	#DT_MOVETAB
 0x6fff„„

	)

732 
	#DT_SYMINFO
 0x6fff„f‡

	)

733 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

734 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

735 
	#DT_ADDRNUM
 11

	)

739 
	#DT_VERSYM
 0x6ffffff0

	)

741 
	#DT_RELACOUNT
 0x6ffffff9

	)

742 
	#DT_RELCOUNT
 0x6fffffÁ

	)

745 
	#DT_FLAGS_1
 0x6ffffffb

	)

746 
	#DT_VERDEF
 0x6ffffff¯

	)

748 
	#DT_VERDEFNUM
 0x6ffffffd

	)

749 
	#DT_VERNEED
 0x6fffff„

	)

751 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

752 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

753 
	#DT_VERSIONTAGNUM
 16

	)

757 
	#DT_AUXILIARY
 0x7ffffffd

	)

758 
	#DT_FILTER
 0x7ffffff‡

	)

759 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

760 
	#DT_EXTRANUM
 3

	)

763 
	#DF_ORIGIN
 0x00000001

	)

764 
	#DF_SYMBOLIC
 0x00000002

	)

765 
	#DF_TEXTREL
 0x00000004

	)

766 
	#DF_BIND_NOW
 0x00000008

	)

767 
	#DF_STATIC_TLS
 0x00000010

	)

771 
	#DF_1_NOW
 0x00000001

	)

772 
	#DF_1_GLOBAL
 0x00000002

	)

773 
	#DF_1_GROUP
 0x00000004

	)

774 
	#DF_1_NODELETE
 0x00000008

	)

775 
	#DF_1_LOADFLTR
 0x00000010

	)

776 
	#DF_1_INITFIRST
 0x00000020

	)

777 
	#DF_1_NOOPEN
 0x00000040

	)

778 
	#DF_1_ORIGIN
 0x00000080

	)

779 
	#DF_1_DIRECT
 0x00000100

	)

780 
	#DF_1_TRANS
 0x00000200

	)

781 
	#DF_1_INTERPOSE
 0x00000400

	)

782 
	#DF_1_NODEFLIB
 0x00000800

	)

783 
	#DF_1_NODUMP
 0x00001000

	)

784 
	#DF_1_CONFALT
 0x00002000

	)

785 
	#DF_1_ENDFILTEE
 0x00004000

	)

786 
	#DF_1_DISPRELDNE
 0x00008000

	)

787 
	#DF_1_DISPRELPND
 0x00010000

	)

790 
	#DTF_1_PARINIT
 0x00000001

	)

791 
	#DTF_1_CONFEXP
 0x00000002

	)

794 
	#DF_P1_LAZYLOAD
 0x00000001

	)

795 
	#DF_P1_GROUPPERM
 0x00000002

	)

802 
Elf32_HÆf
 
	mvd_vîsi⁄
;

803 
Elf32_HÆf
 
	mvd_Êags
;

804 
Elf32_HÆf
 
	mvd_ndx
;

805 
Elf32_HÆf
 
	mvd_˙t
;

806 
Elf32_W‹d
 
	mvd_hash
;

807 
Elf32_W‹d
 
	mvd_aux
;

808 
Elf32_W‹d
 
	mvd_√xt
;

810 } 
	tElf32_Vîdef
;

814 
Elf64_HÆf
 
	mvd_vîsi⁄
;

815 
Elf64_HÆf
 
	mvd_Êags
;

816 
Elf64_HÆf
 
	mvd_ndx
;

817 
Elf64_HÆf
 
	mvd_˙t
;

818 
Elf64_W‹d
 
	mvd_hash
;

819 
Elf64_W‹d
 
	mvd_aux
;

820 
Elf64_W‹d
 
	mvd_√xt
;

822 } 
	tElf64_Vîdef
;

826 
	#VER_DEF_NONE
 0

	)

827 
	#VER_DEF_CURRENT
 1

	)

828 
	#VER_DEF_NUM
 2

	)

831 
	#VER_FLG_BASE
 0x1

	)

832 
	#VER_FLG_WEAK
 0x2

	)

835 
	#VER_NDX_LOCAL
 0

	)

836 
	#VER_NDX_GLOBAL
 1

	)

837 
	#VER_NDX_LORESERVE
 0xff00

	)

838 
	#VER_NDX_ELIMINATE
 0xff01

	)

844 
Elf32_W‹d
 
	mvda_«me
;

845 
Elf32_W‹d
 
	mvda_√xt
;

847 } 
	tElf32_Vîdaux
;

851 
Elf64_W‹d
 
	mvda_«me
;

852 
Elf64_W‹d
 
	mvda_√xt
;

854 } 
	tElf64_Vîdaux
;

861 
Elf32_HÆf
 
	mvn_vîsi⁄
;

862 
Elf32_HÆf
 
	mvn_˙t
;

863 
Elf32_W‹d
 
	mvn_fûe
;

865 
Elf32_W‹d
 
	mvn_aux
;

866 
Elf32_W‹d
 
	mvn_√xt
;

868 } 
	tElf32_Vî√ed
;

872 
Elf64_HÆf
 
	mvn_vîsi⁄
;

873 
Elf64_HÆf
 
	mvn_˙t
;

874 
Elf64_W‹d
 
	mvn_fûe
;

876 
Elf64_W‹d
 
	mvn_aux
;

877 
Elf64_W‹d
 
	mvn_√xt
;

879 } 
	tElf64_Vî√ed
;

883 
	#VER_NEED_NONE
 0

	)

884 
	#VER_NEED_CURRENT
 1

	)

885 
	#VER_NEED_NUM
 2

	)

891 
Elf32_W‹d
 
	mv«_hash
;

892 
Elf32_HÆf
 
	mv«_Êags
;

893 
Elf32_HÆf
 
	mv«_Ÿhî
;

894 
Elf32_W‹d
 
	mv«_«me
;

895 
Elf32_W‹d
 
	mv«_√xt
;

897 } 
	tElf32_Vî«ux
;

901 
Elf64_W‹d
 
	mv«_hash
;

902 
Elf64_HÆf
 
	mv«_Êags
;

903 
Elf64_HÆf
 
	mv«_Ÿhî
;

904 
Elf64_W‹d
 
	mv«_«me
;

905 
Elf64_W‹d
 
	mv«_√xt
;

907 } 
	tElf64_Vî«ux
;

911 
	#VER_FLG_WEAK
 0x2

	)

925 
uöt32_t
 
	ma_ty≥
;

928 
uöt32_t
 
	ma_vÆ
;

932 } 
	ma_un
;

933 } 
	tElf32_auxv_t
;

937 
uöt64_t
 
	ma_ty≥
;

940 
uöt64_t
 
	ma_vÆ
;

944 } 
	ma_un
;

945 } 
	tElf64_auxv_t
;

949 
	#AT_NULL
 0

	)

950 
	#AT_IGNORE
 1

	)

951 
	#AT_EXECFD
 2

	)

952 
	#AT_PHDR
 3

	)

953 
	#AT_PHENT
 4

	)

954 
	#AT_PHNUM
 5

	)

955 
	#AT_PAGESZ
 6

	)

956 
	#AT_BASE
 7

	)

957 
	#AT_FLAGS
 8

	)

958 
	#AT_ENTRY
 9

	)

959 
	#AT_NOTELF
 10

	)

960 
	#AT_UID
 11

	)

961 
	#AT_EUID
 12

	)

962 
	#AT_GID
 13

	)

963 
	#AT_EGID
 14

	)

964 
	#AT_CLKTCK
 17

	)

967 
	#AT_PLATFORM
 15

	)

968 
	#AT_HWCAP
 16

	)

973 
	#AT_FPUCW
 18

	)

976 
	#AT_DCACHEBSIZE
 19

	)

977 
	#AT_ICACHEBSIZE
 20

	)

978 
	#AT_UCACHEBSIZE
 21

	)

982 
	#AT_IGNOREPPC
 22

	)

984 
	#AT_SECURE
 23

	)

986 
	#AT_BASE_PLATFORM
 24

	)

988 
	#AT_RANDOM
 25

	)

990 
	#AT_EXECFN
 31

	)

994 
	#AT_SYSINFO
 32

	)

995 
	#AT_SYSINFO_EHDR
 33

	)

999 
	#AT_L1I_CACHESHAPE
 34

	)

1000 
	#AT_L1D_CACHESHAPE
 35

	)

1001 
	#AT_L2_CACHESHAPE
 36

	)

1002 
	#AT_L3_CACHESHAPE
 37

	)

1009 
Elf32_W‹d
 
	mn_«mesz
;

1010 
Elf32_W‹d
 
	mn_descsz
;

1011 
Elf32_W‹d
 
	mn_ty≥
;

1012 } 
	tElf32_Nhdr
;

1016 
Elf64_W‹d
 
	mn_«mesz
;

1017 
Elf64_W‹d
 
	mn_descsz
;

1018 
Elf64_W‹d
 
	mn_ty≥
;

1019 } 
	tElf64_Nhdr
;

1024 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1027 
	#ELF_NOTE_GNU
 "GNU"

	)

1033 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1044 
	#NT_GNU_ABI_TAG
 1

	)

1045 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1049 
	#ELF_NOTE_OS_LINUX
 0

	)

1050 
	#ELF_NOTE_OS_GNU
 1

	)

1051 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1052 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1060 
	#NT_GNU_HWCAP
 2

	)

1064 
	#NT_GNU_BUILD_ID
 3

	)

1067 
	#NT_GNU_GOLD_VERSION
 4

	)

1073 
Elf32_Xw‹d
 
	mm_vÆue
;

1074 
Elf32_W‹d
 
	mm_öfo
;

1075 
Elf32_W‹d
 
	mm_poff£t
;

1076 
Elf32_HÆf
 
	mm_ª≥©
;

1077 
Elf32_HÆf
 
	mm_°ride
;

1078 } 
	tElf32_Move
;

1082 
Elf64_Xw‹d
 
	mm_vÆue
;

1083 
Elf64_Xw‹d
 
	mm_öfo
;

1084 
Elf64_Xw‹d
 
	mm_poff£t
;

1085 
Elf64_HÆf
 
	mm_ª≥©
;

1086 
Elf64_HÆf
 
	mm_°ride
;

1087 } 
	tElf64_Move
;

1090 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1091 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1092 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1094 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1095 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1096 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1102 
	#EF_CPU32
 0x00810000

	)

1106 
	#R_68K_NONE
 0

	)

1107 
	#R_68K_32
 1

	)

1108 
	#R_68K_16
 2

	)

1109 
	#R_68K_8
 3

	)

1110 
	#R_68K_PC32
 4

	)

1111 
	#R_68K_PC16
 5

	)

1112 
	#R_68K_PC8
 6

	)

1113 
	#R_68K_GOT32
 7

	)

1114 
	#R_68K_GOT16
 8

	)

1115 
	#R_68K_GOT8
 9

	)

1116 
	#R_68K_GOT32O
 10

	)

1117 
	#R_68K_GOT16O
 11

	)

1118 
	#R_68K_GOT8O
 12

	)

1119 
	#R_68K_PLT32
 13

	)

1120 
	#R_68K_PLT16
 14

	)

1121 
	#R_68K_PLT8
 15

	)

1122 
	#R_68K_PLT32O
 16

	)

1123 
	#R_68K_PLT16O
 17

	)

1124 
	#R_68K_PLT8O
 18

	)

1125 
	#R_68K_COPY
 19

	)

1126 
	#R_68K_GLOB_DAT
 20

	)

1127 
	#R_68K_JMP_SLOT
 21

	)

1128 
	#R_68K_RELATIVE
 22

	)

1129 
	#R_68K_TLS_GD32
 25

	)

1130 
	#R_68K_TLS_GD16
 26

	)

1131 
	#R_68K_TLS_GD8
 27

	)

1132 
	#R_68K_TLS_LDM32
 28

	)

1133 
	#R_68K_TLS_LDM16
 29

	)

1134 
	#R_68K_TLS_LDM8
 30

	)

1135 
	#R_68K_TLS_LDO32
 31

	)

1136 
	#R_68K_TLS_LDO16
 32

	)

1137 
	#R_68K_TLS_LDO8
 33

	)

1138 
	#R_68K_TLS_IE32
 34

	)

1139 
	#R_68K_TLS_IE16
 35

	)

1140 
	#R_68K_TLS_IE8
 36

	)

1141 
	#R_68K_TLS_LE32
 37

	)

1143 
	#R_68K_TLS_LE16
 38

	)

1145 
	#R_68K_TLS_LE8
 39

	)

1147 
	#R_68K_TLS_DTPMOD32
 40

	)

1148 
	#R_68K_TLS_DTPREL32
 41

	)

1149 
	#R_68K_TLS_TPREL32
 42

	)

1151 
	#R_68K_NUM
 43

	)

1157 
	#R_386_NONE
 0

	)

1158 
	#R_386_32
 1

	)

1159 
	#R_386_PC32
 2

	)

1160 
	#R_386_GOT32
 3

	)

1161 
	#R_386_PLT32
 4

	)

1162 
	#R_386_COPY
 5

	)

1163 
	#R_386_GLOB_DAT
 6

	)

1164 
	#R_386_JMP_SLOT
 7

	)

1165 
	#R_386_RELATIVE
 8

	)

1166 
	#R_386_GOTOFF
 9

	)

1167 
	#R_386_GOTPC
 10

	)

1168 
	#R_386_32PLT
 11

	)

1169 
	#R_386_TLS_TPOFF
 14

	)

1170 
	#R_386_TLS_IE
 15

	)

1172 
	#R_386_TLS_GOTIE
 16

	)

1174 
	#R_386_TLS_LE
 17

	)

1176 
	#R_386_TLS_GD
 18

	)

1178 
	#R_386_TLS_LDM
 19

	)

1181 
	#R_386_16
 20

	)

1182 
	#R_386_PC16
 21

	)

1183 
	#R_386_8
 22

	)

1184 
	#R_386_PC8
 23

	)

1185 
	#R_386_TLS_GD_32
 24

	)

1187 
	#R_386_TLS_GD_PUSH
 25

	)

1188 
	#R_386_TLS_GD_CALL
 26

	)

1190 
	#R_386_TLS_GD_POP
 27

	)

1191 
	#R_386_TLS_LDM_32
 28

	)

1193 
	#R_386_TLS_LDM_PUSH
 29

	)

1194 
	#R_386_TLS_LDM_CALL
 30

	)

1196 
	#R_386_TLS_LDM_POP
 31

	)

1197 
	#R_386_TLS_LDO_32
 32

	)

1198 
	#R_386_TLS_IE_32
 33

	)

1200 
	#R_386_TLS_LE_32
 34

	)

1202 
	#R_386_TLS_DTPMOD32
 35

	)

1203 
	#R_386_TLS_DTPOFF32
 36

	)

1204 
	#R_386_TLS_TPOFF32
 37

	)

1206 
	#R_386_TLS_GOTDESC
 39

	)

1207 
	#R_386_TLS_DESC_CALL
 40

	)

1210 
	#R_386_TLS_DESC
 41

	)

1214 
	#R_386_IRELATIVE
 42

	)

1216 
	#R_386_NUM
 43

	)

1222 
	#STT_SPARC_REGISTER
 13

	)

1226 
	#EF_SPARCV9_MM
 3

	)

1227 
	#EF_SPARCV9_TSO
 0

	)

1228 
	#EF_SPARCV9_PSO
 1

	)

1229 
	#EF_SPARCV9_RMO
 2

	)

1230 
	#EF_SPARC_LEDATA
 0x800000

	)

1231 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1232 
	#EF_SPARC_32PLUS
 0x000100

	)

1233 
	#EF_SPARC_SUN_US1
 0x000200

	)

1234 
	#EF_SPARC_HAL_R1
 0x000400

	)

1235 
	#EF_SPARC_SUN_US3
 0x000800

	)

1239 
	#R_SPARC_NONE
 0

	)

1240 
	#R_SPARC_8
 1

	)

1241 
	#R_SPARC_16
 2

	)

1242 
	#R_SPARC_32
 3

	)

1243 
	#R_SPARC_DISP8
 4

	)

1244 
	#R_SPARC_DISP16
 5

	)

1245 
	#R_SPARC_DISP32
 6

	)

1246 
	#R_SPARC_WDISP30
 7

	)

1247 
	#R_SPARC_WDISP22
 8

	)

1248 
	#R_SPARC_HI22
 9

	)

1249 
	#R_SPARC_22
 10

	)

1250 
	#R_SPARC_13
 11

	)

1251 
	#R_SPARC_LO10
 12

	)

1252 
	#R_SPARC_GOT10
 13

	)

1253 
	#R_SPARC_GOT13
 14

	)

1254 
	#R_SPARC_GOT22
 15

	)

1255 
	#R_SPARC_PC10
 16

	)

1256 
	#R_SPARC_PC22
 17

	)

1257 
	#R_SPARC_WPLT30
 18

	)

1258 
	#R_SPARC_COPY
 19

	)

1259 
	#R_SPARC_GLOB_DAT
 20

	)

1260 
	#R_SPARC_JMP_SLOT
 21

	)

1261 
	#R_SPARC_RELATIVE
 22

	)

1262 
	#R_SPARC_UA32
 23

	)

1266 
	#R_SPARC_PLT32
 24

	)

1267 
	#R_SPARC_HIPLT22
 25

	)

1268 
	#R_SPARC_LOPLT10
 26

	)

1269 
	#R_SPARC_PCPLT32
 27

	)

1270 
	#R_SPARC_PCPLT22
 28

	)

1271 
	#R_SPARC_PCPLT10
 29

	)

1272 
	#R_SPARC_10
 30

	)

1273 
	#R_SPARC_11
 31

	)

1274 
	#R_SPARC_64
 32

	)

1275 
	#R_SPARC_OLO10
 33

	)

1276 
	#R_SPARC_HH22
 34

	)

1277 
	#R_SPARC_HM10
 35

	)

1278 
	#R_SPARC_LM22
 36

	)

1279 
	#R_SPARC_PC_HH22
 37

	)

1280 
	#R_SPARC_PC_HM10
 38

	)

1281 
	#R_SPARC_PC_LM22
 39

	)

1282 
	#R_SPARC_WDISP16
 40

	)

1283 
	#R_SPARC_WDISP19
 41

	)

1284 
	#R_SPARC_GLOB_JMP
 42

	)

1285 
	#R_SPARC_7
 43

	)

1286 
	#R_SPARC_5
 44

	)

1287 
	#R_SPARC_6
 45

	)

1288 
	#R_SPARC_DISP64
 46

	)

1289 
	#R_SPARC_PLT64
 47

	)

1290 
	#R_SPARC_HIX22
 48

	)

1291 
	#R_SPARC_LOX10
 49

	)

1292 
	#R_SPARC_H44
 50

	)

1293 
	#R_SPARC_M44
 51

	)

1294 
	#R_SPARC_L44
 52

	)

1295 
	#R_SPARC_REGISTER
 53

	)

1296 
	#R_SPARC_UA64
 54

	)

1297 
	#R_SPARC_UA16
 55

	)

1298 
	#R_SPARC_TLS_GD_HI22
 56

	)

1299 
	#R_SPARC_TLS_GD_LO10
 57

	)

1300 
	#R_SPARC_TLS_GD_ADD
 58

	)

1301 
	#R_SPARC_TLS_GD_CALL
 59

	)

1302 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1303 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1304 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1305 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1306 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1307 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1308 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1309 
	#R_SPARC_TLS_IE_HI22
 67

	)

1310 
	#R_SPARC_TLS_IE_LO10
 68

	)

1311 
	#R_SPARC_TLS_IE_LD
 69

	)

1312 
	#R_SPARC_TLS_IE_LDX
 70

	)

1313 
	#R_SPARC_TLS_IE_ADD
 71

	)

1314 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1315 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1316 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1317 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1318 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1319 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1320 
	#R_SPARC_TLS_TPOFF32
 78

	)

1321 
	#R_SPARC_TLS_TPOFF64
 79

	)

1322 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1323 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1324 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1325 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1326 
	#R_SPARC_GOTDATA_OP
 84

	)

1327 
	#R_SPARC_H34
 85

	)

1328 
	#R_SPARC_SIZE32
 86

	)

1329 
	#R_SPARC_SIZE64
 87

	)

1330 
	#R_SPARC_JMP_IREL
 248

	)

1331 
	#R_SPARC_IRELATIVE
 249

	)

1332 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1333 
	#R_SPARC_GNU_VTENTRY
 251

	)

1334 
	#R_SPARC_REV32
 252

	)

1336 
	#R_SPARC_NUM
 253

	)

1340 
	#DT_SPARC_REGISTER
 0x70000001

	)

1341 
	#DT_SPARC_NUM
 2

	)

1347 
	#EF_MIPS_NOREORDER
 1

	)

1348 
	#EF_MIPS_PIC
 2

	)

1349 
	#EF_MIPS_CPIC
 4

	)

1350 
	#EF_MIPS_XGOT
 8

	)

1351 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1352 
	#EF_MIPS_ABI2
 32

	)

1353 
	#EF_MIPS_ABI_ON32
 64

	)

1354 
	#EF_MIPS_ARCH
 0xf0000000

	)

1358 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1359 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1360 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1361 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1362 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1363 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1364 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1368 
	#E_MIPS_ARCH_1
 0x00000000

	)

1369 
	#E_MIPS_ARCH_2
 0x10000000

	)

1370 
	#E_MIPS_ARCH_3
 0x20000000

	)

1371 
	#E_MIPS_ARCH_4
 0x30000000

	)

1372 
	#E_MIPS_ARCH_5
 0x40000000

	)

1373 
	#E_MIPS_ARCH_32
 0x60000000

	)

1374 
	#E_MIPS_ARCH_64
 0x70000000

	)

1378 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1379 
	#SHN_MIPS_TEXT
 0xff01

	)

1380 
	#SHN_MIPS_DATA
 0xff02

	)

1381 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1382 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1386 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1387 
	#SHT_MIPS_MSYM
 0x70000001

	)

1388 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1389 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1390 
	#SHT_MIPS_UCODE
 0x70000004

	)

1391 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1392 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1393 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1394 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1395 
	#SHT_MIPS_RELD
 0x70000009

	)

1396 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1397 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1398 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1399 
	#SHT_MIPS_SHDR
 0x70000010

	)

1400 
	#SHT_MIPS_FDESC
 0x70000011

	)

1401 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1402 
	#SHT_MIPS_DENSE
 0x70000013

	)

1403 
	#SHT_MIPS_PDESC
 0x70000014

	)

1404 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1405 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1406 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1407 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1408 
	#SHT_MIPS_LINE
 0x70000019

	)

1409 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1410 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1411 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1412 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1413 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1414 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1415 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1416 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1417 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1418 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1419 
	#SHT_MIPS_XLATE
 0x70000024

	)

1420 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1421 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1422 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1423 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1424 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1428 
	#SHF_MIPS_GPREL
 0x10000000

	)

1429 
	#SHF_MIPS_MERGE
 0x20000000

	)

1430 
	#SHF_MIPS_ADDR
 0x40000000

	)

1431 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1432 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1433 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1434 
	#SHF_MIPS_NAMES
 0x02000000

	)

1435 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1441 
	#STO_MIPS_DEFAULT
 0x0

	)

1442 
	#STO_MIPS_INTERNAL
 0x1

	)

1443 
	#STO_MIPS_HIDDEN
 0x2

	)

1444 
	#STO_MIPS_PROTECTED
 0x3

	)

1445 
	#STO_MIPS_PLT
 0x8

	)

1446 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1449 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1457 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1458 
Elf32_W‹d
 
	mgt_unu£d
;

1459 } 
	mgt_hódî
;

1462 
Elf32_W‹d
 
	mgt_g_vÆue
;

1463 
Elf32_W‹d
 
	mgt_byãs
;

1464 } 
	mgt_íåy
;

1465 } 
	tElf32_g±ab
;

1471 
Elf32_W‹d
 
	mri_g¥mask
;

1472 
Elf32_W‹d
 
	mri_˝rmask
[4];

1473 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1474 } 
	tElf32_RegInfo
;

1480 
	mköd
;

1482 
	msize
;

1483 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1485 
Elf32_W‹d
 
	möfo
;

1486 } 
	tElf_O±i⁄s
;

1490 
	#ODK_NULL
 0

	)

1491 
	#ODK_REGINFO
 1

	)

1492 
	#ODK_EXCEPTIONS
 2

	)

1493 
	#ODK_PAD
 3

	)

1494 
	#ODK_HWPATCH
 4

	)

1495 
	#ODK_FILL
 5

	)

1496 
	#ODK_TAGS
 6

	)

1497 
	#ODK_HWAND
 7

	)

1498 
	#ODK_HWOR
 8

	)

1502 
	#OEX_FPU_MIN
 0x1‡

	)

1503 
	#OEX_FPU_MAX
 0x1f00

	)

1504 
	#OEX_PAGE0
 0x10000

	)

1505 
	#OEX_SMM
 0x20000

	)

1506 
	#OEX_FPDBUG
 0x40000

	)

1507 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1508 
	#OEX_DISMISS
 0x80000

	)

1510 
	#OEX_FPU_INVAL
 0x10

	)

1511 
	#OEX_FPU_DIV0
 0x08

	)

1512 
	#OEX_FPU_OFLO
 0x04

	)

1513 
	#OEX_FPU_UFLO
 0x02

	)

1514 
	#OEX_FPU_INEX
 0x01

	)

1518 
	#OHW_R4KEOP
 0x1

	)

1519 
	#OHW_R8KPFETCH
 0x2

	)

1520 
	#OHW_R5KEOP
 0x4

	)

1521 
	#OHW_R5KCVTL
 0x8

	)

1523 
	#OPAD_PREFIX
 0x1

	)

1524 
	#OPAD_POSTFIX
 0x2

	)

1525 
	#OPAD_SYMBOL
 0x4

	)

1531 
Elf32_W‹d
 
	mhwp_Êags1
;

1532 
Elf32_W‹d
 
	mhwp_Êags2
;

1533 } 
	tElf_O±i⁄s_Hw
;

1537 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1538 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1542 
	#R_MIPS_NONE
 0

	)

1543 
	#R_MIPS_16
 1

	)

1544 
	#R_MIPS_32
 2

	)

1545 
	#R_MIPS_REL32
 3

	)

1546 
	#R_MIPS_26
 4

	)

1547 
	#R_MIPS_HI16
 5

	)

1548 
	#R_MIPS_LO16
 6

	)

1549 
	#R_MIPS_GPREL16
 7

	)

1550 
	#R_MIPS_LITERAL
 8

	)

1551 
	#R_MIPS_GOT16
 9

	)

1552 
	#R_MIPS_PC16
 10

	)

1553 
	#R_MIPS_CALL16
 11

	)

1554 
	#R_MIPS_GPREL32
 12

	)

1556 
	#R_MIPS_SHIFT5
 16

	)

1557 
	#R_MIPS_SHIFT6
 17

	)

1558 
	#R_MIPS_64
 18

	)

1559 
	#R_MIPS_GOT_DISP
 19

	)

1560 
	#R_MIPS_GOT_PAGE
 20

	)

1561 
	#R_MIPS_GOT_OFST
 21

	)

1562 
	#R_MIPS_GOT_HI16
 22

	)

1563 
	#R_MIPS_GOT_LO16
 23

	)

1564 
	#R_MIPS_SUB
 24

	)

1565 
	#R_MIPS_INSERT_A
 25

	)

1566 
	#R_MIPS_INSERT_B
 26

	)

1567 
	#R_MIPS_DELETE
 27

	)

1568 
	#R_MIPS_HIGHER
 28

	)

1569 
	#R_MIPS_HIGHEST
 29

	)

1570 
	#R_MIPS_CALL_HI16
 30

	)

1571 
	#R_MIPS_CALL_LO16
 31

	)

1572 
	#R_MIPS_SCN_DISP
 32

	)

1573 
	#R_MIPS_REL16
 33

	)

1574 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1575 
	#R_MIPS_PJUMP
 35

	)

1576 
	#R_MIPS_RELGOT
 36

	)

1577 
	#R_MIPS_JALR
 37

	)

1578 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1579 
	#R_MIPS_TLS_DTPREL32
 39

	)

1580 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1581 
	#R_MIPS_TLS_DTPREL64
 41

	)

1582 
	#R_MIPS_TLS_GD
 42

	)

1583 
	#R_MIPS_TLS_LDM
 43

	)

1584 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1585 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1586 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1587 
	#R_MIPS_TLS_TPREL32
 47

	)

1588 
	#R_MIPS_TLS_TPREL64
 48

	)

1589 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1590 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1591 
	#R_MIPS_GLOB_DAT
 51

	)

1592 
	#R_MIPS_COPY
 126

	)

1593 
	#R_MIPS_JUMP_SLOT
 127

	)

1595 
	#R_MIPS_NUM
 128

	)

1599 
	#PT_MIPS_REGINFO
 0x70000000

	)

1600 
	#PT_MIPS_RTPROC
 0x70000001

	)

1601 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1605 
	#PF_MIPS_LOCAL
 0x10000000

	)

1609 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1610 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1611 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1612 
	#DT_MIPS_IVERSION
 0x70000004

	)

1613 
	#DT_MIPS_FLAGS
 0x70000005

	)

1614 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1615 
	#DT_MIPS_MSYM
 0x70000007

	)

1616 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1617 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1618 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1619 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1620 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1621 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1622 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1623 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1624 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1625 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1626 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1627 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1629 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1630 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1632 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1633 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1635 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1637 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1639 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1641 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1643 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1644 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1645 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1646 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1647 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1648 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1649 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1650 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1651 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1652 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1653 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1654 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1656 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1658 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1659 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1660 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1662 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1666 
	#DT_MIPS_RWPLT
 0x70000034

	)

1667 
	#DT_MIPS_NUM
 0x35

	)

1671 
	#RHF_NONE
 0

	)

1672 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1673 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1674 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1675 
	#RHF_NO_MOVE
 (1 << 3)

	)

1676 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1677 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1678 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1679 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1680 
	#RHF_PIXIE
 (1 << 8)

	)

1681 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1682 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1683 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1684 
	#RHF_CORD
 (1 << 12)

	)

1685 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1686 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1692 
Elf32_W‹d
 
	ml_«me
;

1693 
Elf32_W‹d
 
	ml_time_°amp
;

1694 
Elf32_W‹d
 
	ml_checksum
;

1695 
Elf32_W‹d
 
	ml_vîsi⁄
;

1696 
Elf32_W‹d
 
	ml_Êags
;

1697 } 
	tElf32_Lib
;

1701 
Elf64_W‹d
 
	ml_«me
;

1702 
Elf64_W‹d
 
	ml_time_°amp
;

1703 
Elf64_W‹d
 
	ml_checksum
;

1704 
Elf64_W‹d
 
	ml_vîsi⁄
;

1705 
Elf64_W‹d
 
	ml_Êags
;

1706 } 
	tElf64_Lib
;

1711 
	#LL_NONE
 0

	)

1712 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1713 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1714 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1715 
	#LL_EXPORTS
 (1 << 3)

	)

1716 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1717 
	#LL_DELTA
 (1 << 5)

	)

1721 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1728 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1729 
	#EF_PARISC_EXT
 0x00020000

	)

1730 
	#EF_PARISC_LSB
 0x00040000

	)

1731 
	#EF_PARISC_WIDE
 0x00080000

	)

1732 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1734 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1735 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1739 
	#EFA_PARISC_1_0
 0x020b

	)

1740 
	#EFA_PARISC_1_1
 0x0210

	)

1741 
	#EFA_PARISC_2_0
 0x0214

	)

1745 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1747 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1751 
	#SHT_PARISC_EXT
 0x70000000

	)

1752 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1753 
	#SHT_PARISC_DOC
 0x70000002

	)

1757 
	#SHF_PARISC_SHORT
 0x20000000

	)

1758 
	#SHF_PARISC_HUGE
 0x40000000

	)

1759 
	#SHF_PARISC_SBP
 0x80000000

	)

1763 
	#STT_PARISC_MILLICODE
 13

	)

1765 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1766 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1770 
	#R_PARISC_NONE
 0

	)

1771 
	#R_PARISC_DIR32
 1

	)

1772 
	#R_PARISC_DIR21L
 2

	)

1773 
	#R_PARISC_DIR17R
 3

	)

1774 
	#R_PARISC_DIR17F
 4

	)

1775 
	#R_PARISC_DIR14R
 6

	)

1776 
	#R_PARISC_PCREL32
 9

	)

1777 
	#R_PARISC_PCREL21L
 10

	)

1778 
	#R_PARISC_PCREL17R
 11

	)

1779 
	#R_PARISC_PCREL17F
 12

	)

1780 
	#R_PARISC_PCREL14R
 14

	)

1781 
	#R_PARISC_DPREL21L
 18

	)

1782 
	#R_PARISC_DPREL14R
 22

	)

1783 
	#R_PARISC_GPREL21L
 26

	)

1784 
	#R_PARISC_GPREL14R
 30

	)

1785 
	#R_PARISC_LTOFF21L
 34

	)

1786 
	#R_PARISC_LTOFF14R
 38

	)

1787 
	#R_PARISC_SECREL32
 41

	)

1788 
	#R_PARISC_SEGBASE
 48

	)

1789 
	#R_PARISC_SEGREL32
 49

	)

1790 
	#R_PARISC_PLTOFF21L
 50

	)

1791 
	#R_PARISC_PLTOFF14R
 54

	)

1792 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1793 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1794 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1795 
	#R_PARISC_FPTR64
 64

	)

1796 
	#R_PARISC_PLABEL32
 65

	)

1797 
	#R_PARISC_PLABEL21L
 66

	)

1798 
	#R_PARISC_PLABEL14R
 70

	)

1799 
	#R_PARISC_PCREL64
 72

	)

1800 
	#R_PARISC_PCREL22F
 74

	)

1801 
	#R_PARISC_PCREL14WR
 75

	)

1802 
	#R_PARISC_PCREL14DR
 76

	)

1803 
	#R_PARISC_PCREL16F
 77

	)

1804 
	#R_PARISC_PCREL16WF
 78

	)

1805 
	#R_PARISC_PCREL16DF
 79

	)

1806 
	#R_PARISC_DIR64
 80

	)

1807 
	#R_PARISC_DIR14WR
 83

	)

1808 
	#R_PARISC_DIR14DR
 84

	)

1809 
	#R_PARISC_DIR16F
 85

	)

1810 
	#R_PARISC_DIR16WF
 86

	)

1811 
	#R_PARISC_DIR16DF
 87

	)

1812 
	#R_PARISC_GPREL64
 88

	)

1813 
	#R_PARISC_GPREL14WR
 91

	)

1814 
	#R_PARISC_GPREL14DR
 92

	)

1815 
	#R_PARISC_GPREL16F
 93

	)

1816 
	#R_PARISC_GPREL16WF
 94

	)

1817 
	#R_PARISC_GPREL16DF
 95

	)

1818 
	#R_PARISC_LTOFF64
 96

	)

1819 
	#R_PARISC_LTOFF14WR
 99

	)

1820 
	#R_PARISC_LTOFF14DR
 100

	)

1821 
	#R_PARISC_LTOFF16F
 101

	)

1822 
	#R_PARISC_LTOFF16WF
 102

	)

1823 
	#R_PARISC_LTOFF16DF
 103

	)

1824 
	#R_PARISC_SECREL64
 104

	)

1825 
	#R_PARISC_SEGREL64
 112

	)

1826 
	#R_PARISC_PLTOFF14WR
 115

	)

1827 
	#R_PARISC_PLTOFF14DR
 116

	)

1828 
	#R_PARISC_PLTOFF16F
 117

	)

1829 
	#R_PARISC_PLTOFF16WF
 118

	)

1830 
	#R_PARISC_PLTOFF16DF
 119

	)

1831 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1832 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1833 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1834 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1835 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1836 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1837 
	#R_PARISC_LORESERVE
 128

	)

1838 
	#R_PARISC_COPY
 128

	)

1839 
	#R_PARISC_IPLT
 129

	)

1840 
	#R_PARISC_EPLT
 130

	)

1841 
	#R_PARISC_TPREL32
 153

	)

1842 
	#R_PARISC_TPREL21L
 154

	)

1843 
	#R_PARISC_TPREL14R
 158

	)

1844 
	#R_PARISC_LTOFF_TP21L
 162

	)

1845 
	#R_PARISC_LTOFF_TP14R
 166

	)

1846 
	#R_PARISC_LTOFF_TP14F
 167

	)

1847 
	#R_PARISC_TPREL64
 216

	)

1848 
	#R_PARISC_TPREL14WR
 219

	)

1849 
	#R_PARISC_TPREL14DR
 220

	)

1850 
	#R_PARISC_TPREL16F
 221

	)

1851 
	#R_PARISC_TPREL16WF
 222

	)

1852 
	#R_PARISC_TPREL16DF
 223

	)

1853 
	#R_PARISC_LTOFF_TP64
 224

	)

1854 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1855 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1856 
	#R_PARISC_LTOFF_TP16F
 229

	)

1857 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1858 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1859 
	#R_PARISC_GNU_VTENTRY
 232

	)

1860 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1861 
	#R_PARISC_TLS_GD21L
 234

	)

1862 
	#R_PARISC_TLS_GD14R
 235

	)

1863 
	#R_PARISC_TLS_GDCALL
 236

	)

1864 
	#R_PARISC_TLS_LDM21L
 237

	)

1865 
	#R_PARISC_TLS_LDM14R
 238

	)

1866 
	#R_PARISC_TLS_LDMCALL
 239

	)

1867 
	#R_PARISC_TLS_LDO21L
 240

	)

1868 
	#R_PARISC_TLS_LDO14R
 241

	)

1869 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1870 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1871 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1872 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1873 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1874 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1875 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1876 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1877 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1878 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1879 
	#R_PARISC_HIRESERVE
 255

	)

1883 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1884 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1885 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1886 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1887 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1888 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1889 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1890 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1891 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1892 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1893 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1894 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1895 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1896 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1897 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1899 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1900 
	#PT_PARISC_UNWIND
 0x70000001

	)

1904 
	#PF_PARISC_SBP
 0x08000000

	)

1906 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1907 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1908 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1909 
	#PF_HP_CODE
 0x01000000

	)

1910 
	#PF_HP_MODIFY
 0x02000000

	)

1911 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1912 
	#PF_HP_SBP
 0x08000000

	)

1919 
	#EF_ALPHA_32BIT
 1

	)

1920 
	#EF_ALPHA_CANRELAX
 2

	)

1925 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1926 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1930 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1933 
	#STO_ALPHA_NOPV
 0x80

	)

1934 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1938 
	#R_ALPHA_NONE
 0

	)

1939 
	#R_ALPHA_REFLONG
 1

	)

1940 
	#R_ALPHA_REFQUAD
 2

	)

1941 
	#R_ALPHA_GPREL32
 3

	)

1942 
	#R_ALPHA_LITERAL
 4

	)

1943 
	#R_ALPHA_LITUSE
 5

	)

1944 
	#R_ALPHA_GPDISP
 6

	)

1945 
	#R_ALPHA_BRADDR
 7

	)

1946 
	#R_ALPHA_HINT
 8

	)

1947 
	#R_ALPHA_SREL16
 9

	)

1948 
	#R_ALPHA_SREL32
 10

	)

1949 
	#R_ALPHA_SREL64
 11

	)

1950 
	#R_ALPHA_GPRELHIGH
 17

	)

1951 
	#R_ALPHA_GPRELLOW
 18

	)

1952 
	#R_ALPHA_GPREL16
 19

	)

1953 
	#R_ALPHA_COPY
 24

	)

1954 
	#R_ALPHA_GLOB_DAT
 25

	)

1955 
	#R_ALPHA_JMP_SLOT
 26

	)

1956 
	#R_ALPHA_RELATIVE
 27

	)

1957 
	#R_ALPHA_TLS_GD_HI
 28

	)

1958 
	#R_ALPHA_TLSGD
 29

	)

1959 
	#R_ALPHA_TLS_LDM
 30

	)

1960 
	#R_ALPHA_DTPMOD64
 31

	)

1961 
	#R_ALPHA_GOTDTPREL
 32

	)

1962 
	#R_ALPHA_DTPREL64
 33

	)

1963 
	#R_ALPHA_DTPRELHI
 34

	)

1964 
	#R_ALPHA_DTPRELLO
 35

	)

1965 
	#R_ALPHA_DTPREL16
 36

	)

1966 
	#R_ALPHA_GOTTPREL
 37

	)

1967 
	#R_ALPHA_TPREL64
 38

	)

1968 
	#R_ALPHA_TPRELHI
 39

	)

1969 
	#R_ALPHA_TPRELLO
 40

	)

1970 
	#R_ALPHA_TPREL16
 41

	)

1972 
	#R_ALPHA_NUM
 46

	)

1975 
	#LITUSE_ALPHA_ADDR
 0

	)

1976 
	#LITUSE_ALPHA_BASE
 1

	)

1977 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1978 
	#LITUSE_ALPHA_JSR
 3

	)

1979 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1980 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1983 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1984 
	#DT_ALPHA_NUM
 1

	)

1989 
	#EF_PPC_EMB
 0x80000000

	)

1992 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1993 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1997 
	#R_PPC_NONE
 0

	)

1998 
	#R_PPC_ADDR32
 1

	)

1999 
	#R_PPC_ADDR24
 2

	)

2000 
	#R_PPC_ADDR16
 3

	)

2001 
	#R_PPC_ADDR16_LO
 4

	)

2002 
	#R_PPC_ADDR16_HI
 5

	)

2003 
	#R_PPC_ADDR16_HA
 6

	)

2004 
	#R_PPC_ADDR14
 7

	)

2005 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2006 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2007 
	#R_PPC_REL24
 10

	)

2008 
	#R_PPC_REL14
 11

	)

2009 
	#R_PPC_REL14_BRTAKEN
 12

	)

2010 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2011 
	#R_PPC_GOT16
 14

	)

2012 
	#R_PPC_GOT16_LO
 15

	)

2013 
	#R_PPC_GOT16_HI
 16

	)

2014 
	#R_PPC_GOT16_HA
 17

	)

2015 
	#R_PPC_PLTREL24
 18

	)

2016 
	#R_PPC_COPY
 19

	)

2017 
	#R_PPC_GLOB_DAT
 20

	)

2018 
	#R_PPC_JMP_SLOT
 21

	)

2019 
	#R_PPC_RELATIVE
 22

	)

2020 
	#R_PPC_LOCAL24PC
 23

	)

2021 
	#R_PPC_UADDR32
 24

	)

2022 
	#R_PPC_UADDR16
 25

	)

2023 
	#R_PPC_REL32
 26

	)

2024 
	#R_PPC_PLT32
 27

	)

2025 
	#R_PPC_PLTREL32
 28

	)

2026 
	#R_PPC_PLT16_LO
 29

	)

2027 
	#R_PPC_PLT16_HI
 30

	)

2028 
	#R_PPC_PLT16_HA
 31

	)

2029 
	#R_PPC_SDAREL16
 32

	)

2030 
	#R_PPC_SECTOFF
 33

	)

2031 
	#R_PPC_SECTOFF_LO
 34

	)

2032 
	#R_PPC_SECTOFF_HI
 35

	)

2033 
	#R_PPC_SECTOFF_HA
 36

	)

2036 
	#R_PPC_TLS
 67

	)

2037 
	#R_PPC_DTPMOD32
 68

	)

2038 
	#R_PPC_TPREL16
 69

	)

2039 
	#R_PPC_TPREL16_LO
 70

	)

2040 
	#R_PPC_TPREL16_HI
 71

	)

2041 
	#R_PPC_TPREL16_HA
 72

	)

2042 
	#R_PPC_TPREL32
 73

	)

2043 
	#R_PPC_DTPREL16
 74

	)

2044 
	#R_PPC_DTPREL16_LO
 75

	)

2045 
	#R_PPC_DTPREL16_HI
 76

	)

2046 
	#R_PPC_DTPREL16_HA
 77

	)

2047 
	#R_PPC_DTPREL32
 78

	)

2048 
	#R_PPC_GOT_TLSGD16
 79

	)

2049 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2050 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2051 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2052 
	#R_PPC_GOT_TLSLD16
 83

	)

2053 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2054 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2055 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2056 
	#R_PPC_GOT_TPREL16
 87

	)

2057 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2058 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2059 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2060 
	#R_PPC_GOT_DTPREL16
 91

	)

2061 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2062 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2063 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2067 
	#R_PPC_EMB_NADDR32
 101

	)

2068 
	#R_PPC_EMB_NADDR16
 102

	)

2069 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2070 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2071 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2072 
	#R_PPC_EMB_SDAI16
 106

	)

2073 
	#R_PPC_EMB_SDA2I16
 107

	)

2074 
	#R_PPC_EMB_SDA2REL
 108

	)

2075 
	#R_PPC_EMB_SDA21
 109

	)

2076 
	#R_PPC_EMB_MRKREF
 110

	)

2077 
	#R_PPC_EMB_RELSEC16
 111

	)

2078 
	#R_PPC_EMB_RELST_LO
 112

	)

2079 
	#R_PPC_EMB_RELST_HI
 113

	)

2080 
	#R_PPC_EMB_RELST_HA
 114

	)

2081 
	#R_PPC_EMB_BIT_FLD
 115

	)

2082 
	#R_PPC_EMB_RELSDA
 116

	)

2085 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2086 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2087 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2088 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2089 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2090 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2093 
	#R_PPC_IRELATIVE
 248

	)

2096 
	#R_PPC_REL16
 249

	)

2097 
	#R_PPC_REL16_LO
 250

	)

2098 
	#R_PPC_REL16_HI
 251

	)

2099 
	#R_PPC_REL16_HA
 252

	)

2103 
	#R_PPC_TOC16
 255

	)

2106 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2107 
	#DT_PPC_NUM
 1

	)

2110 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2111 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2112 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2113 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2114 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2115 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2116 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2117 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2118 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2119 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2120 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2121 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2122 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2123 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2124 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2125 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2126 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2127 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2129 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2130 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2131 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2132 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2134 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2135 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2136 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2137 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2138 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2139 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2140 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2141 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2143 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2144 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2145 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2146 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2147 
	#R_PPC64_ADDR30
 37

	)

2148 
	#R_PPC64_ADDR64
 38

	)

2149 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2150 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2151 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2152 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2153 
	#R_PPC64_UADDR64
 43

	)

2154 
	#R_PPC64_REL64
 44

	)

2155 
	#R_PPC64_PLT64
 45

	)

2156 
	#R_PPC64_PLTREL64
 46

	)

2157 
	#R_PPC64_TOC16
 47

	)

2158 
	#R_PPC64_TOC16_LO
 48

	)

2159 
	#R_PPC64_TOC16_HI
 49

	)

2160 
	#R_PPC64_TOC16_HA
 50

	)

2161 
	#R_PPC64_TOC
 51

	)

2162 
	#R_PPC64_PLTGOT16
 52

	)

2163 
	#R_PPC64_PLTGOT16_LO
 53

	)

2164 
	#R_PPC64_PLTGOT16_HI
 54

	)

2165 
	#R_PPC64_PLTGOT16_HA
 55

	)

2167 
	#R_PPC64_ADDR16_DS
 56

	)

2168 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2169 
	#R_PPC64_GOT16_DS
 58

	)

2170 
	#R_PPC64_GOT16_LO_DS
 59

	)

2171 
	#R_PPC64_PLT16_LO_DS
 60

	)

2172 
	#R_PPC64_SECTOFF_DS
 61

	)

2173 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2174 
	#R_PPC64_TOC16_DS
 63

	)

2175 
	#R_PPC64_TOC16_LO_DS
 64

	)

2176 
	#R_PPC64_PLTGOT16_DS
 65

	)

2177 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2180 
	#R_PPC64_TLS
 67

	)

2181 
	#R_PPC64_DTPMOD64
 68

	)

2182 
	#R_PPC64_TPREL16
 69

	)

2183 
	#R_PPC64_TPREL16_LO
 70

	)

2184 
	#R_PPC64_TPREL16_HI
 71

	)

2185 
	#R_PPC64_TPREL16_HA
 72

	)

2186 
	#R_PPC64_TPREL64
 73

	)

2187 
	#R_PPC64_DTPREL16
 74

	)

2188 
	#R_PPC64_DTPREL16_LO
 75

	)

2189 
	#R_PPC64_DTPREL16_HI
 76

	)

2190 
	#R_PPC64_DTPREL16_HA
 77

	)

2191 
	#R_PPC64_DTPREL64
 78

	)

2192 
	#R_PPC64_GOT_TLSGD16
 79

	)

2193 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2194 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2195 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2196 
	#R_PPC64_GOT_TLSLD16
 83

	)

2197 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2198 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2199 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2200 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2201 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2202 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2203 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2204 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2205 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2206 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2207 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2208 
	#R_PPC64_TPREL16_DS
 95

	)

2209 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2210 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2211 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2212 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2213 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2214 
	#R_PPC64_DTPREL16_DS
 101

	)

2215 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2216 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2217 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2218 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2219 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2222 
	#R_PPC64_JMP_IREL
 247

	)

2223 
	#R_PPC64_IRELATIVE
 248

	)

2224 
	#R_PPC64_REL16
 249

	)

2225 
	#R_PPC64_REL16_LO
 250

	)

2226 
	#R_PPC64_REL16_HI
 251

	)

2227 
	#R_PPC64_REL16_HA
 252

	)

2230 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2231 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2232 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2233 
	#DT_PPC64_NUM
 3

	)

2239 
	#EF_ARM_RELEXEC
 0x01

	)

2240 
	#EF_ARM_HASENTRY
 0x02

	)

2241 
	#EF_ARM_INTERWORK
 0x04

	)

2242 
	#EF_ARM_APCS_26
 0x08

	)

2243 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2244 
	#EF_ARM_PIC
 0x20

	)

2245 
	#EF_ARM_ALIGN8
 0x40

	)

2246 
	#EF_ARM_NEW_ABI
 0x80

	)

2247 
	#EF_ARM_OLD_ABI
 0x100

	)

2248 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2249 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2250 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2255 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2256 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2257 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2258 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2261 
	#EF_ARM_BE8
 0x00800000

	)

2262 
	#EF_ARM_LE8
 0x00400000

	)

2264 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2265 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2266 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2267 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2268 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2269 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2270 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2273 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2274 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2277 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2278 
	#SHF_ARM_COMDEF
 0x80000000

	)

2282 
	#PF_ARM_SB
 0x10000000

	)

2284 
	#PF_ARM_PI
 0x20000000

	)

2285 
	#PF_ARM_ABS
 0x40000000

	)

2288 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2291 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2292 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2293 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2298 
	#R_ARM_NONE
 0

	)

2299 
	#R_ARM_PC24
 1

	)

2300 
	#R_ARM_ABS32
 2

	)

2301 
	#R_ARM_REL32
 3

	)

2302 
	#R_ARM_PC13
 4

	)

2303 
	#R_ARM_ABS16
 5

	)

2304 
	#R_ARM_ABS12
 6

	)

2305 
	#R_ARM_THM_ABS5
 7

	)

2306 
	#R_ARM_ABS8
 8

	)

2307 
	#R_ARM_SBREL32
 9

	)

2308 
	#R_ARM_THM_PC22
 10

	)

2309 
	#R_ARM_THM_PC8
 11

	)

2310 
	#R_ARM_AMP_VCALL9
 12

	)

2311 
	#R_ARM_SWI24
 13

	)

2312 
	#R_ARM_TLS_DESC
 13

	)

2313 
	#R_ARM_THM_SWI8
 14

	)

2314 
	#R_ARM_XPC25
 15

	)

2315 
	#R_ARM_THM_XPC22
 16

	)

2316 
	#R_ARM_TLS_DTPMOD32
 17

	)

2317 
	#R_ARM_TLS_DTPOFF32
 18

	)

2318 
	#R_ARM_TLS_TPOFF32
 19

	)

2319 
	#R_ARM_COPY
 20

	)

2320 
	#R_ARM_GLOB_DAT
 21

	)

2321 
	#R_ARM_JUMP_SLOT
 22

	)

2322 
	#R_ARM_RELATIVE
 23

	)

2323 
	#R_ARM_GOTOFF
 24

	)

2324 
	#R_ARM_GOTPC
 25

	)

2325 
	#R_ARM_GOT32
 26

	)

2326 
	#R_ARM_PLT32
 27

	)

2327 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2328 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2329 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2330 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2331 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2332 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2333 
	#R_ARM_TLS_GOTDESC
 90

	)

2334 
	#R_ARM_TLS_CALL
 91

	)

2335 
	#R_ARM_TLS_DESCSEQ
 92

	)

2336 
	#R_ARM_THM_TLS_CALL
 93

	)

2337 
	#R_ARM_GNU_VTENTRY
 100

	)

2338 
	#R_ARM_GNU_VTINHERIT
 101

	)

2339 
	#R_ARM_THM_PC11
 102

	)

2340 
	#R_ARM_THM_PC9
 103

	)

2341 
	#R_ARM_TLS_GD32
 104

	)

2343 
	#R_ARM_TLS_LDM32
 105

	)

2345 
	#R_ARM_TLS_LDO32
 106

	)

2347 
	#R_ARM_TLS_IE32
 107

	)

2349 
	#R_ARM_TLS_LE32
 108

	)

2351 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2352 
	#R_ARM_IRELATIVE
 160

	)

2353 
	#R_ARM_RXPC25
 249

	)

2354 
	#R_ARM_RSBREL32
 250

	)

2355 
	#R_ARM_THM_RPC22
 251

	)

2356 
	#R_ARM_RREL32
 252

	)

2357 
	#R_ARM_RABS22
 253

	)

2358 
	#R_ARM_RPC24
 254

	)

2359 
	#R_ARM_RBASE
 255

	)

2361 
	#R_ARM_NUM
 256

	)

2366 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2367 
	#EF_IA_64_ABI64
 0x00000010

	)

2368 
	#EF_IA_64_ARCH
 0xff000000

	)

2371 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2372 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2373 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2374 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2375 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2378 
	#PF_IA_64_NORECOV
 0x80000000

	)

2381 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2382 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2385 
	#SHF_IA_64_SHORT
 0x10000000

	)

2386 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2389 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2390 
	#DT_IA_64_NUM
 1

	)

2393 
	#R_IA64_NONE
 0x00

	)

2394 
	#R_IA64_IMM14
 0x21

	)

2395 
	#R_IA64_IMM22
 0x22

	)

2396 
	#R_IA64_IMM64
 0x23

	)

2397 
	#R_IA64_DIR32MSB
 0x24

	)

2398 
	#R_IA64_DIR32LSB
 0x25

	)

2399 
	#R_IA64_DIR64MSB
 0x26

	)

2400 
	#R_IA64_DIR64LSB
 0x27

	)

2401 
	#R_IA64_GPREL22
 0x2®

	)

2402 
	#R_IA64_GPREL64I
 0x2b

	)

2403 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2404 
	#R_IA64_GPREL32LSB
 0x2d

	)

2405 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2406 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2407 
	#R_IA64_LTOFF22
 0x32

	)

2408 
	#R_IA64_LTOFF64I
 0x33

	)

2409 
	#R_IA64_PLTOFF22
 0x3®

	)

2410 
	#R_IA64_PLTOFF64I
 0x3b

	)

2411 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2412 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2413 
	#R_IA64_FPTR64I
 0x43

	)

2414 
	#R_IA64_FPTR32MSB
 0x44

	)

2415 
	#R_IA64_FPTR32LSB
 0x45

	)

2416 
	#R_IA64_FPTR64MSB
 0x46

	)

2417 
	#R_IA64_FPTR64LSB
 0x47

	)

2418 
	#R_IA64_PCREL60B
 0x48

	)

2419 
	#R_IA64_PCREL21B
 0x49

	)

2420 
	#R_IA64_PCREL21M
 0x4®

	)

2421 
	#R_IA64_PCREL21F
 0x4b

	)

2422 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2423 
	#R_IA64_PCREL32LSB
 0x4d

	)

2424 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2425 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2426 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2427 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2428 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2429 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2430 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2431 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2432 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2433 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2434 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2435 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2436 
	#R_IA64_SECREL32MSB
 0x64

	)

2437 
	#R_IA64_SECREL32LSB
 0x65

	)

2438 
	#R_IA64_SECREL64MSB
 0x66

	)

2439 
	#R_IA64_SECREL64LSB
 0x67

	)

2440 
	#R_IA64_REL32MSB
 0x6¯

	)

2441 
	#R_IA64_REL32LSB
 0x6d

	)

2442 
	#R_IA64_REL64MSB
 0x6ê

	)

2443 
	#R_IA64_REL64LSB
 0x6‡

	)

2444 
	#R_IA64_LTV32MSB
 0x74

	)

2445 
	#R_IA64_LTV32LSB
 0x75

	)

2446 
	#R_IA64_LTV64MSB
 0x76

	)

2447 
	#R_IA64_LTV64LSB
 0x77

	)

2448 
	#R_IA64_PCREL21BI
 0x79

	)

2449 
	#R_IA64_PCREL22
 0x7®

	)

2450 
	#R_IA64_PCREL64I
 0x7b

	)

2451 
	#R_IA64_IPLTMSB
 0x80

	)

2452 
	#R_IA64_IPLTLSB
 0x81

	)

2453 
	#R_IA64_COPY
 0x84

	)

2454 
	#R_IA64_SUB
 0x85

	)

2455 
	#R_IA64_LTOFF22X
 0x86

	)

2456 
	#R_IA64_LDXMOV
 0x87

	)

2457 
	#R_IA64_TPREL14
 0x91

	)

2458 
	#R_IA64_TPREL22
 0x92

	)

2459 
	#R_IA64_TPREL64I
 0x93

	)

2460 
	#R_IA64_TPREL64MSB
 0x96

	)

2461 
	#R_IA64_TPREL64LSB
 0x97

	)

2462 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2463 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2464 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2465 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2466 
	#R_IA64_DTPREL14
 0xb1

	)

2467 
	#R_IA64_DTPREL22
 0xb2

	)

2468 
	#R_IA64_DTPREL64I
 0xb3

	)

2469 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2470 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2471 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2472 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2473 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2478 
	#EF_SH_MACH_MASK
 0x1f

	)

2479 
	#EF_SH_UNKNOWN
 0x0

	)

2480 
	#EF_SH1
 0x1

	)

2481 
	#EF_SH2
 0x2

	)

2482 
	#EF_SH3
 0x3

	)

2483 
	#EF_SH_DSP
 0x4

	)

2484 
	#EF_SH3_DSP
 0x5

	)

2485 
	#EF_SH4AL_DSP
 0x6

	)

2486 
	#EF_SH3E
 0x8

	)

2487 
	#EF_SH4
 0x9

	)

2488 
	#EF_SH2E
 0xb

	)

2489 
	#EF_SH4A
 0xc

	)

2490 
	#EF_SH2A
 0xd

	)

2491 
	#EF_SH4_NOFPU
 0x10

	)

2492 
	#EF_SH4A_NOFPU
 0x11

	)

2493 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2494 
	#EF_SH2A_NOFPU
 0x13

	)

2495 
	#EF_SH3_NOMMU
 0x14

	)

2496 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2497 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2498 
	#EF_SH2A_SH4
 0x17

	)

2499 
	#EF_SH2A_SH3E
 0x18

	)

2502 
	#R_SH_NONE
 0

	)

2503 
	#R_SH_DIR32
 1

	)

2504 
	#R_SH_REL32
 2

	)

2505 
	#R_SH_DIR8WPN
 3

	)

2506 
	#R_SH_IND12W
 4

	)

2507 
	#R_SH_DIR8WPL
 5

	)

2508 
	#R_SH_DIR8WPZ
 6

	)

2509 
	#R_SH_DIR8BP
 7

	)

2510 
	#R_SH_DIR8W
 8

	)

2511 
	#R_SH_DIR8L
 9

	)

2512 
	#R_SH_SWITCH16
 25

	)

2513 
	#R_SH_SWITCH32
 26

	)

2514 
	#R_SH_USES
 27

	)

2515 
	#R_SH_COUNT
 28

	)

2516 
	#R_SH_ALIGN
 29

	)

2517 
	#R_SH_CODE
 30

	)

2518 
	#R_SH_DATA
 31

	)

2519 
	#R_SH_LABEL
 32

	)

2520 
	#R_SH_SWITCH8
 33

	)

2521 
	#R_SH_GNU_VTINHERIT
 34

	)

2522 
	#R_SH_GNU_VTENTRY
 35

	)

2523 
	#R_SH_TLS_GD_32
 144

	)

2524 
	#R_SH_TLS_LD_32
 145

	)

2525 
	#R_SH_TLS_LDO_32
 146

	)

2526 
	#R_SH_TLS_IE_32
 147

	)

2527 
	#R_SH_TLS_LE_32
 148

	)

2528 
	#R_SH_TLS_DTPMOD32
 149

	)

2529 
	#R_SH_TLS_DTPOFF32
 150

	)

2530 
	#R_SH_TLS_TPOFF32
 151

	)

2531 
	#R_SH_GOT32
 160

	)

2532 
	#R_SH_PLT32
 161

	)

2533 
	#R_SH_COPY
 162

	)

2534 
	#R_SH_GLOB_DAT
 163

	)

2535 
	#R_SH_JMP_SLOT
 164

	)

2536 
	#R_SH_RELATIVE
 165

	)

2537 
	#R_SH_GOTOFF
 166

	)

2538 
	#R_SH_GOTPC
 167

	)

2540 
	#R_SH_NUM
 256

	)

2546 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2550 
	#R_390_NONE
 0

	)

2551 
	#R_390_8
 1

	)

2552 
	#R_390_12
 2

	)

2553 
	#R_390_16
 3

	)

2554 
	#R_390_32
 4

	)

2555 
	#R_390_PC32
 5

	)

2556 
	#R_390_GOT12
 6

	)

2557 
	#R_390_GOT32
 7

	)

2558 
	#R_390_PLT32
 8

	)

2559 
	#R_390_COPY
 9

	)

2560 
	#R_390_GLOB_DAT
 10

	)

2561 
	#R_390_JMP_SLOT
 11

	)

2562 
	#R_390_RELATIVE
 12

	)

2563 
	#R_390_GOTOFF32
 13

	)

2564 
	#R_390_GOTPC
 14

	)

2565 
	#R_390_GOT16
 15

	)

2566 
	#R_390_PC16
 16

	)

2567 
	#R_390_PC16DBL
 17

	)

2568 
	#R_390_PLT16DBL
 18

	)

2569 
	#R_390_PC32DBL
 19

	)

2570 
	#R_390_PLT32DBL
 20

	)

2571 
	#R_390_GOTPCDBL
 21

	)

2572 
	#R_390_64
 22

	)

2573 
	#R_390_PC64
 23

	)

2574 
	#R_390_GOT64
 24

	)

2575 
	#R_390_PLT64
 25

	)

2576 
	#R_390_GOTENT
 26

	)

2577 
	#R_390_GOTOFF16
 27

	)

2578 
	#R_390_GOTOFF64
 28

	)

2579 
	#R_390_GOTPLT12
 29

	)

2580 
	#R_390_GOTPLT16
 30

	)

2581 
	#R_390_GOTPLT32
 31

	)

2582 
	#R_390_GOTPLT64
 32

	)

2583 
	#R_390_GOTPLTENT
 33

	)

2584 
	#R_390_PLTOFF16
 34

	)

2585 
	#R_390_PLTOFF32
 35

	)

2586 
	#R_390_PLTOFF64
 36

	)

2587 
	#R_390_TLS_LOAD
 37

	)

2588 
	#R_390_TLS_GDCALL
 38

	)

2590 
	#R_390_TLS_LDCALL
 39

	)

2592 
	#R_390_TLS_GD32
 40

	)

2594 
	#R_390_TLS_GD64
 41

	)

2596 
	#R_390_TLS_GOTIE12
 42

	)

2598 
	#R_390_TLS_GOTIE32
 43

	)

2600 
	#R_390_TLS_GOTIE64
 44

	)

2602 
	#R_390_TLS_LDM32
 45

	)

2604 
	#R_390_TLS_LDM64
 46

	)

2606 
	#R_390_TLS_IE32
 47

	)

2608 
	#R_390_TLS_IE64
 48

	)

2610 
	#R_390_TLS_IEENT
 49

	)

2612 
	#R_390_TLS_LE32
 50

	)

2614 
	#R_390_TLS_LE64
 51

	)

2616 
	#R_390_TLS_LDO32
 52

	)

2618 
	#R_390_TLS_LDO64
 53

	)

2620 
	#R_390_TLS_DTPMOD
 54

	)

2621 
	#R_390_TLS_DTPOFF
 55

	)

2622 
	#R_390_TLS_TPOFF
 56

	)

2624 
	#R_390_20
 57

	)

2625 
	#R_390_GOT20
 58

	)

2626 
	#R_390_GOTPLT20
 59

	)

2627 
	#R_390_TLS_GOTIE20
 60

	)

2630 
	#R_390_NUM
 61

	)

2634 
	#R_CRIS_NONE
 0

	)

2635 
	#R_CRIS_8
 1

	)

2636 
	#R_CRIS_16
 2

	)

2637 
	#R_CRIS_32
 3

	)

2638 
	#R_CRIS_8_PCREL
 4

	)

2639 
	#R_CRIS_16_PCREL
 5

	)

2640 
	#R_CRIS_32_PCREL
 6

	)

2641 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2642 
	#R_CRIS_GNU_VTENTRY
 8

	)

2643 
	#R_CRIS_COPY
 9

	)

2644 
	#R_CRIS_GLOB_DAT
 10

	)

2645 
	#R_CRIS_JUMP_SLOT
 11

	)

2646 
	#R_CRIS_RELATIVE
 12

	)

2647 
	#R_CRIS_16_GOT
 13

	)

2648 
	#R_CRIS_32_GOT
 14

	)

2649 
	#R_CRIS_16_GOTPLT
 15

	)

2650 
	#R_CRIS_32_GOTPLT
 16

	)

2651 
	#R_CRIS_32_GOTREL
 17

	)

2652 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2653 
	#R_CRIS_32_PLT_PCREL
 19

	)

2655 
	#R_CRIS_NUM
 20

	)

2659 
	#R_X86_64_NONE
 0

	)

2660 
	#R_X86_64_64
 1

	)

2661 
	#R_X86_64_PC32
 2

	)

2662 
	#R_X86_64_GOT32
 3

	)

2663 
	#R_X86_64_PLT32
 4

	)

2664 
	#R_X86_64_COPY
 5

	)

2665 
	#R_X86_64_GLOB_DAT
 6

	)

2666 
	#R_X86_64_JUMP_SLOT
 7

	)

2667 
	#R_X86_64_RELATIVE
 8

	)

2668 
	#R_X86_64_GOTPCREL
 9

	)

2670 
	#R_X86_64_32
 10

	)

2671 
	#R_X86_64_32S
 11

	)

2672 
	#R_X86_64_16
 12

	)

2673 
	#R_X86_64_PC16
 13

	)

2674 
	#R_X86_64_8
 14

	)

2675 
	#R_X86_64_PC8
 15

	)

2676 
	#R_X86_64_DTPMOD64
 16

	)

2677 
	#R_X86_64_DTPOFF64
 17

	)

2678 
	#R_X86_64_TPOFF64
 18

	)

2679 
	#R_X86_64_TLSGD
 19

	)

2681 
	#R_X86_64_TLSLD
 20

	)

2683 
	#R_X86_64_DTPOFF32
 21

	)

2684 
	#R_X86_64_GOTTPOFF
 22

	)

2686 
	#R_X86_64_TPOFF32
 23

	)

2687 
	#R_X86_64_PC64
 24

	)

2688 
	#R_X86_64_GOTOFF64
 25

	)

2689 
	#R_X86_64_GOTPC32
 26

	)

2691 
	#R_X86_64_GOT64
 27

	)

2692 
	#R_X86_64_GOTPCREL64
 28

	)

2694 
	#R_X86_64_GOTPC64
 29

	)

2695 
	#R_X86_64_GOTPLT64
 30

	)

2696 
	#R_X86_64_PLTOFF64
 31

	)

2698 
	#R_X86_64_SIZE32
 32

	)

2699 
	#R_X86_64_SIZE64
 33

	)

2700 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2701 
	#R_X86_64_TLSDESC_CALL
 35

	)

2703 
	#R_X86_64_TLSDESC
 36

	)

2704 
	#R_X86_64_IRELATIVE
 37

	)

2706 
	#R_X86_64_NUM
 38

	)

2710 
	#R_MN10300_NONE
 0

	)

2711 
	#R_MN10300_32
 1

	)

2712 
	#R_MN10300_16
 2

	)

2713 
	#R_MN10300_8
 3

	)

2714 
	#R_MN10300_PCREL32
 4

	)

2715 
	#R_MN10300_PCREL16
 5

	)

2716 
	#R_MN10300_PCREL8
 6

	)

2717 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2718 
	#R_MN10300_GNU_VTENTRY
 8

	)

2719 
	#R_MN10300_24
 9

	)

2720 
	#R_MN10300_GOTPC32
 10

	)

2721 
	#R_MN10300_GOTPC16
 11

	)

2722 
	#R_MN10300_GOTOFF32
 12

	)

2723 
	#R_MN10300_GOTOFF24
 13

	)

2724 
	#R_MN10300_GOTOFF16
 14

	)

2725 
	#R_MN10300_PLT32
 15

	)

2726 
	#R_MN10300_PLT16
 16

	)

2727 
	#R_MN10300_GOT32
 17

	)

2728 
	#R_MN10300_GOT24
 18

	)

2729 
	#R_MN10300_GOT16
 19

	)

2730 
	#R_MN10300_COPY
 20

	)

2731 
	#R_MN10300_GLOB_DAT
 21

	)

2732 
	#R_MN10300_JMP_SLOT
 22

	)

2733 
	#R_MN10300_RELATIVE
 23

	)

2735 
	#R_MN10300_NUM
 24

	)

2739 
	#R_M32R_NONE
 0

	)

2740 
	#R_M32R_16
 1

	)

2741 
	#R_M32R_32
 2

	)

2742 
	#R_M32R_24
 3

	)

2743 
	#R_M32R_10_PCREL
 4

	)

2744 
	#R_M32R_18_PCREL
 5

	)

2745 
	#R_M32R_26_PCREL
 6

	)

2746 
	#R_M32R_HI16_ULO
 7

	)

2747 
	#R_M32R_HI16_SLO
 8

	)

2748 
	#R_M32R_LO16
 9

	)

2749 
	#R_M32R_SDA16
 10

	)

2750 
	#R_M32R_GNU_VTINHERIT
 11

	)

2751 
	#R_M32R_GNU_VTENTRY
 12

	)

2753 
	#R_M32R_16_RELA
 33

	)

2754 
	#R_M32R_32_RELA
 34

	)

2755 
	#R_M32R_24_RELA
 35

	)

2756 
	#R_M32R_10_PCREL_RELA
 36

	)

2757 
	#R_M32R_18_PCREL_RELA
 37

	)

2758 
	#R_M32R_26_PCREL_RELA
 38

	)

2759 
	#R_M32R_HI16_ULO_RELA
 39

	)

2760 
	#R_M32R_HI16_SLO_RELA
 40

	)

2761 
	#R_M32R_LO16_RELA
 41

	)

2762 
	#R_M32R_SDA16_RELA
 42

	)

2763 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2764 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2765 
	#R_M32R_REL32
 45

	)

2767 
	#R_M32R_GOT24
 48

	)

2768 
	#R_M32R_26_PLTREL
 49

	)

2769 
	#R_M32R_COPY
 50

	)

2770 
	#R_M32R_GLOB_DAT
 51

	)

2771 
	#R_M32R_JMP_SLOT
 52

	)

2772 
	#R_M32R_RELATIVE
 53

	)

2773 
	#R_M32R_GOTOFF
 54

	)

2774 
	#R_M32R_GOTPC24
 55

	)

2775 
	#R_M32R_GOT16_HI_ULO
 56

	)

2777 
	#R_M32R_GOT16_HI_SLO
 57

	)

2779 
	#R_M32R_GOT16_LO
 58

	)

2780 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2782 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2784 
	#R_M32R_GOTPC_LO
 61

	)

2786 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2788 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2790 
	#R_M32R_GOTOFF_LO
 64

	)

2791 
	#R_M32R_NUM
 256

	)

2794 
	g__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/envz.h

20 #i‚de‡
_ENVZ_H


21 
	#_ENVZ_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<î∫o.h
>

29 
	~<¨gz.h
>

31 
__BEGIN_DECLS


34 *
	$ívz_íåy
 (
__c⁄°
 *
__ª°ri˘
 
__ívz
, 
size_t
 
__ívz_Àn
,

35 
__c⁄°
 *
__ª°ri˘
 
__«me
)

36 
__THROW
 
__©åibuã_puª__
;

40 *
	$ívz_gë
 (
__c⁄°
 *
__ª°ri˘
 
__ívz
, 
size_t
 
__ívz_Àn
,

41 
__c⁄°
 *
__ª°ri˘
 
__«me
)

42 
__THROW
 
__©åibuã_puª__
;

50 
îr‹_t
 
	$ívz_add
 (**
__ª°ri˘
 
__ívz
,

51 
size_t
 *
__ª°ri˘
 
__ívz_Àn
,

52 
__c⁄°
 *
__ª°ri˘
 
__«me
,

53 
__c⁄°
 *
__ª°ri˘
 
__vÆue
Ë
__THROW
;

58 
îr‹_t
 
	$ívz_mîge
 (**
__ª°ri˘
 
__ívz
,

59 
size_t
 *
__ª°ri˘
 
__ívz_Àn
,

60 
__c⁄°
 *
__ª°ri˘
 
__ívz2
,

61 
size_t
 
__ívz2_Àn
, 
__ovîride
Ë
__THROW
;

64 
	$ívz_ªmove
 (**
__ª°ri˘
 
__ívz
,

65 
size_t
 *
__ª°ri˘
 
__ívz_Àn
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
;

69 
	$ívz_°rù
 (**
__ª°ri˘
 
__ívz
,

70 
size_t
 *
__ª°ri˘
 
__ívz_Àn
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/err.h

20 #i‚def 
_ERR_H


21 
	#_ERR_H
 1

	)

23 
	~<„©uªs.h
>

25 
	#__√ed___va_li°


	)

26 
	~<°d¨g.h
>

27 #i‚def 
__GNUC_VA_LIST


28 
	#__gnuc_va_li°
 
__±r_t


	)

31 
__BEGIN_DECLS


35 
	$w¨n
 (
__c⁄°
 *
__f‹m©
, ...)

36 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

37 
	$vw¨n
 (
__c⁄°
 *
__f‹m©
, 
__gnuc_va_li°
)

38 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

41 
	$w¨nx
 (
__c⁄°
 *
__f‹m©
, ...)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

43 
	$vw¨nx
 (
__c⁄°
 *
__f‹m©
, 
__gnuc_va_li°
)

44 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

47 
	$îr
 (
__°©us
, 
__c⁄°
 *
__f‹m©
, ...)

48 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

49 
	$vîr
 (
__°©us
, 
__c⁄°
 *
__f‹m©
, 
__gnuc_va_li°
)

50 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

51 
	$îrx
 (
__°©us
, 
__c⁄°
 *
__f‹m©
, ...)

52 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

53 
	$vîrx
 (
__°©us
, 
__c⁄°
 *, 
__gnuc_va_li°
)

54 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

56 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/error.h

20 #i‚de‡
_ERROR_H


21 
	#_ERROR_H
 1

	)

23 
	~<„©uªs.h
>

26 
__BEGIN_DECLS


32 
	$îr‹
 (
__°©us
, 
__î∫um
, 
__c⁄°
 *
__f‹m©
, ...)

33 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

35 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, 
__c⁄°
 *
__‚ame
,

36 
__löío
, 
__c⁄°
 *
__f‹m©
, ...)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));

42 (*
îr‹_¥öt_¥og«me
) ();

45 
îr‹_mesßge_cou¡
;

49 
îr‹_⁄e_≥r_löe
;

52 #i‡
deföed
 
__exã∫_Æways_ölöe
 && deföed 
__va_¨g_∑ck


53 
	~<bôs/îr‹.h
>

56 
__END_DECLS


	@/usr/include/eti.h

35 #i‚de‡
NCURSES_ETI_H_ö˛


36 
	#NCURSES_ETI_H_ö˛
 1

	)

38 
	#E_OK
 (0)

	)

39 
	#E_SYSTEM_ERROR
 (-1)

	)

40 
	#E_BAD_ARGUMENT
 (-2)

	)

41 
	#E_POSTED
 (-3)

	)

42 
	#E_CONNECTED
 (-4)

	)

43 
	#E_BAD_STATE
 (-5)

	)

44 
	#E_NO_ROOM
 (-6)

	)

45 
	#E_NOT_POSTED
 (-7)

	)

46 
	#E_UNKNOWN_COMMAND
 (-8)

	)

47 
	#E_NO_MATCH
 (-9)

	)

48 
	#E_NOT_SELECTABLE
 (-10)

	)

49 
	#E_NOT_CONNECTED
 (-11)

	)

50 
	#E_REQUEST_DENIED
 (-12)

	)

51 
	#E_INVALID_FIELD
 (-13)

	)

52 
	#E_CURRENT
 (-14)

	)

	@/usr/include/etip.h

36 #i‚de‡
NCURSES_ETIP_H_ö˛


37 
	#NCURSES_ETIP_H_ö˛
 1

	)

40 #i‚de‡
HAVE_BUILTIN_H


41 
	#HAVE_BUILTIN_H
 0

	)

44 #i‚de‡
HAVE_GXX_BUILTIN_H


45 
	#HAVE_GXX_BUILTIN_H
 0

	)

48 #i‚de‡
HAVE_GPP_BUILTIN_H


49 
	#HAVE_GPP_BUILTIN_H
 0

	)

52 #i‚de‡
HAVE_IOSTREAM


53 
	#HAVE_IOSTREAM
 1

	)

56 #i‚de‡
HAVE_TYPEINFO


57 
	#HAVE_TYPEINFO
 1

	)

60 #i‚de‡
HAVE_VALUES_H


61 
	#HAVE_VALUES_H
 0

	)

64 #i‚de‡
ETIP_NEEDS_MATH_H


65 
	#ETIP_NEEDS_MATH_H
 0

	)

68 #i‚de‡
ETIP_NEEDS_MATH_EXCEPTION


69 
	#ETIP_NEEDS_MATH_EXCEPTION
 0

	)

72 #i‚de‡
CPP_HAS_PARAM_INIT


73 
	#CPP_HAS_PARAM_INIT
 0

	)

76 #i‚de‡
CPP_HAS_STATIC_CAST


77 
	#CPP_HAS_STATIC_CAST
 1

	)

80 #i‚de‡
IOSTREAM_NAMESPACE


81 
	#IOSTREAM_NAMESPACE
 1

	)

84 #ifde‡
__GNUG__


85 #i‡((
__GNUG__
 <2Ë&& (
__GNUC_MINOR__
 < 8))

86 #i‡
HAVE_TYPEINFO


87 
	~<ty≥öfo
>

92 #i‡
deföed
(
__GNUG__
)

93 #i‡
HAVE_BUILTIN_H
 || 
HAVE_GXX_BUILTIN_H
 || 
HAVE_GPP_BUILTIN_H


94 #i‡
ETIP_NEEDS_MATH_H


95 #i‡
ETIP_NEEDS_MATH_EXCEPTION


96 #unde‡
ex˚±i⁄


97 
	#ex˚±i⁄
 
m©h_ex˚±i⁄


	)

99 
	~<m©h.h
>

101 #unde‡
ex˚±i⁄


102 
	#ex˚±i⁄
 
buûtö_ex˚±i⁄


	)

103 #i‡
HAVE_GPP_BUILTIN_H


104 
	~<gµ/buûtö.h
>

105 #ñi‡
HAVE_GXX_BUILTIN_H


106 
	~<g++/buûtö.h
>

108 
	~<buûtö.h
>

110 #unde‡
ex˚±i⁄


112 #ñi‡
deföed
 (
__SUNPRO_CC
)

113 
	~<gíîic.h
>

116 
	~<ncur£s_dŒ.h
>

119 #i‡
HAVE_VALUES_H


120 
	~<vÆues.h
>

123 
	~<as£π.h
>

124 
	~<ëi.h
>

125 
	~<î∫o.h
>

129 #i‡
CPP_HAS_PARAM_INIT


130 
	#NCURSES_PARAM_INIT
(
vÆue
Ë
	)
value

132 
	#NCURSES_PARAM_INIT
(
vÆue
Ë

	)

135 #i‡
CPP_HAS_STATIC_CAST


136 
	#STATIC_CAST
(
s
Ë
°©ic_ˇ°
<s>

	)

138 
	#STATIC_CAST
(
s
Ë(s)

	)

142 
˛ass
 
NCURSES_IMPEXP
 
NCur£sP™ñ
;

143 
˛ass
 
NCURSES_IMPEXP
 
	gNCur£sMíu
;

144 
˛ass
 
NCURSES_IMPEXP
 
	gNCur£sF‹m
;

146 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sEx˚±i⁄


148 
	mpublic
:

149 c⁄° *
mesßge
;

150 
	mîr‹no
;

152 
	$NCur£sEx˚±i⁄
 (c⁄° * 
msg
, 
îr
)

153 : 
	`mesßge
(
msg
), 
	$îr‹no
 (
îr
)

156 
	$NCur£sEx˚±i⁄
 (c⁄° * 
msg
)

157 : 
	`mesßge
(
msg
), 
	$îr‹no
 (
E_SYSTEM_ERROR
)

158 {
	}
};

160 
	gNCur£sEx˚±i⁄
& 
	g›î©‹
=(c⁄° 
NCur£sEx˚±i⁄
& 
rhs
)

162 
îr‹no
 = 
rhs
.errorno;

163  *
	gthis
;

166 
	$NCur£sEx˚±i⁄
(c⁄° 
NCur£sEx˚±i⁄
& 
rhs
)

167 : 
	`mesßge
(
rhs
.
mesßge
), 
	$îr‹no
(
rhs
.
îr‹no
)

169 
	}
}

171 
vútuÆ
 c⁄° *
	$˛as¢ame
() const {

173 
	}
}

175 
	gvútuÆ
 ~
	$NCur£sEx˚±i⁄
()

177 
	}
}

180 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sP™ñEx˚±i⁄
 : 
public
 
NCur£sEx˚±i⁄


182 
public
:

183 c⁄° 
NCur£sP™ñ
* 
p
;

185 
	$NCur£sP™ñEx˚±i⁄
 (c⁄° *
msg
, 
îr
) :

186 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

187 
	$p
 (
NULL
)

190 
	$NCur£sP™ñEx˚±i⁄
 (c⁄° 
NCur£sP™ñ
* 
∑√l
,

191 c⁄° *
msg
,

192 
îr
) :

193 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

194 
	$p
 (
∑√l
)

195 {
	}
};

197 
	$NCur£sP™ñEx˚±i⁄
 (
îr
) :

198 
	`NCur£sEx˚±i⁄
 ("∑√»libøryÉº‹", 
îr
),

199 
	$p
 (
NULL
)

200 {
	}
};

202 
	$NCur£sP™ñEx˚±i⁄
 (c⁄° 
NCur£sP™ñ
* 
∑√l
,

203 
îr
) :

204 
	`NCur£sEx˚±i⁄
 ("∑√»libøryÉº‹", 
îr
),

205 
	$p
 (
∑√l
)

206 {
	}
};

208 
	gNCur£sP™ñEx˚±i⁄
& 
	g›î©‹
=(c⁄° 
NCur£sP™ñEx˚±i⁄
& 
rhs
)

210 i‡(
this
 !&
rhs
) {

211 
NCur£sEx˚±i⁄
::
›î©‹
=(
rhs
);

212 
	gp
 = 
rhs
.
p
;

214  *
	gthis
;

217 
	$NCur£sP™ñEx˚±i⁄
(c⁄° 
NCur£sP™ñEx˚±i⁄
& 
rhs
)

218 : 
	`NCur£sEx˚±i⁄
(
rhs
), 
	$p
(
rhs
.
p
)

220 
	}
}

222 
vútuÆ
 c⁄° *
	$˛as¢ame
() const {

224 
	}
}

226 
	gvútuÆ
 ~
	$NCur£sP™ñEx˚±i⁄
()

228 
	}
}

231 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sMíuEx˚±i⁄
 : 
public
 
NCur£sEx˚±i⁄


233 
public
:

234 c⁄° 
NCur£sMíu
* 
m
;

236 
	$NCur£sMíuEx˚±i⁄
 (c⁄° *
msg
, 
îr
) :

237 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

238 
	$m
 (
NULL
)

241 
	$NCur£sMíuEx˚±i⁄
 (c⁄° 
NCur£sMíu
* 
míu
,

242 c⁄° *
msg
,

243 
îr
) :

244 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

245 
	$m
 (
míu
)

246 {
	}
};

248 
	$NCur£sMíuEx˚±i⁄
 (
îr
) :

249 
	`NCur£sEx˚±i⁄
 ("míuÜibøryÉº‹", 
îr
),

250 
	$m
 (
NULL
)

251 {
	}
};

253 
	$NCur£sMíuEx˚±i⁄
 (c⁄° 
NCur£sMíu
* 
míu
,

254 
îr
) :

255 
	`NCur£sEx˚±i⁄
 ("míuÜibøryÉº‹", 
îr
),

256 
	$m
 (
míu
)

257 {
	}
};

259 
	gNCur£sMíuEx˚±i⁄
& 
	g›î©‹
=(c⁄° 
NCur£sMíuEx˚±i⁄
& 
rhs
)

261 i‡(
this
 !&
rhs
) {

262 
NCur£sEx˚±i⁄
::
›î©‹
=(
rhs
);

263 
	gm
 = 
rhs
.
m
;

265  *
	gthis
;

268 
	$NCur£sMíuEx˚±i⁄
(c⁄° 
NCur£sMíuEx˚±i⁄
& 
rhs
)

269 : 
	`NCur£sEx˚±i⁄
(
rhs
), 
	$m
(
rhs
.
m
)

271 
	}
}

273 
vútuÆ
 c⁄° *
	$˛as¢ame
() const {

275 
	}
}

277 
	gvútuÆ
 ~
	$NCur£sMíuEx˚±i⁄
()

279 
	}
}

282 ˛as†
	cNCURSES_IMPEXP
 
	mNCur£sF‹mEx˚±i⁄
 : 
public
 
NCur£sEx˚±i⁄


284 
public
:

285 c⁄° 
NCur£sF‹m
* 
f
;

287 
	$NCur£sF‹mEx˚±i⁄
 (c⁄° *
msg
, 
îr
) :

288 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

289 
	$f
 (
NULL
)

292 
	$NCur£sF‹mEx˚±i⁄
 (c⁄° 
NCur£sF‹m
* 
f‹m
,

293 c⁄° *
msg
,

294 
îr
) :

295 
	`NCur£sEx˚±i⁄
 (
msg
, 
îr
),

296 
	$f
 (
f‹m
)

297 {
	}
};

299 
	$NCur£sF‹mEx˚±i⁄
 (
îr
) :

300 
	`NCur£sEx˚±i⁄
 ("f‹mÜibøryÉº‹", 
îr
),

301 
	$f
 (
NULL
)

302 {
	}
};

304 
	$NCur£sF‹mEx˚±i⁄
 (c⁄° 
NCur£sF‹m
* 
f‹m
,

305 
îr
) :

306 
	`NCur£sEx˚±i⁄
 ("f‹mÜibøryÉº‹", 
îr
),

307 
	$f
 (
f‹m
)

308 {
	}
};

310 
	gNCur£sF‹mEx˚±i⁄
& 
	g›î©‹
=(c⁄° 
NCur£sF‹mEx˚±i⁄
& 
rhs
)

312 i‡(
this
 !&
rhs
) {

313 
NCur£sEx˚±i⁄
::
›î©‹
=(
rhs
);

314 
	gf
 = 
rhs
.
f
;

316  *
	gthis
;

319 
	$NCur£sF‹mEx˚±i⁄
(c⁄° 
NCur£sF‹mEx˚±i⁄
& 
rhs
)

320 : 
	`NCur£sEx˚±i⁄
(
rhs
), 
	$f
(
rhs
.
f
)

322 
	}
}

324 
vútuÆ
 c⁄° *
	$˛as¢ame
() const {

326 
	}
}

328 
	gvútuÆ
 ~
	$NCur£sF‹mEx˚±i⁄
()

330 
	}
}

333 #i‡!((
deföed
(
__GNUG__
Ë&& deföed(
__EXCEPTIONS
)Ë|| deföed(
__SUNPRO_CC
))

334 #i‡
HAVE_IOSTREAM


335 
	~<io°ªam
>

336 #i‡
IOSTREAM_NAMESPACE


337 
usög
 
	g°d
::
˚º
;

338 
usög
 
	g°d
::
ídl
;

341 
	~<io°ªam.h
>

343 "C" 
exô
();

346 
ölöe
 
	$THROW
(c⁄° 
NCur£sEx˚±i⁄
 *
e
) {

347 #i‡
	`deföed
(
__GNUG__
Ë&& deföed(
__EXCEPTIONS
)

348 #i‡((
__GNUG__
 <2Ë&& (
__GNUC_MINOR__
 < 8))

349 (*
lib_îr‹_h™dÀr
)(
e
 ?É->
	`˛as¢ame
(Ë: "",É ?É->
mesßge
 : "");

351 
	#CPP_HAS_TRY_CATCH
 1

	)

353 #ñi‡
	`deföed
(
__SUNPRO_CC
)

354 #i‡!
	`deföed
(
__SUNPRO_CC_COMPAT
) || (__SUNPRO_CC_COMPAT < 5)

355 
	`gíîi˚º‹
(1, ((
e
 !0Ë? (*)”->
mesßge
) : ""));

357 
	#CPP_HAS_TRY_CATCH
 1

	)

360 i‡(
e
)

361 
˚º
 << 
e
->
mesßge
 << 
ídl
;

362 
	`exô
(0);

365 #i‚de‡
CPP_HAS_TRY_CATCH


366 
	#CPP_HAS_TRY_CATCH
 0

	)

367 
	#NCURSES_CPP_TRY


	)

368 
	#NCURSES_CPP_CATCH
(
e
Ëi‡(
Ál£
)

	)

369 
	#THROWS
(
s
Ë

	)

370 #ñi‡
CPP_HAS_TRY_CATCH


371 
throw
 *
e
;

372 
	#NCURSES_CPP_TRY
 
åy


	)

373 
	#NCURSES_CPP_CATCH
(
e
Ë
	`ˇtch
”)

	)

374 
	#THROWS
(
s
Ë
	`throw
(s)

	)

376 
	}
}

	@/usr/include/execinfo.h

19 #i‚de‡
_EXECINFO_H


20 
	#_EXECINFO_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


28 
	$backåa˚
 (**
__¨øy
, 
__size
Ë
	`__n⁄nuŒ
 ((1));

33 **
	$backåa˚_symbﬁs
 (*
__c⁄°
 *
__¨øy
, 
__size
)

34 
__THROW
 
	`__n⁄nuŒ
 ((1));

39 
	$backåa˚_symbﬁs_fd
 (*
__c⁄°
 *
__¨øy
, 
__size
, 
__fd
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1));

42 
__END_DECLS


	@/usr/include/expat.h

5 #i‚de‡
Ex∑t_INCLUDED


6 
	#Ex∑t_INCLUDED
 1

	)

8 #ifde‡
__VMS


11 
	#XML_SëPro˚ssögIn°ru˘i⁄H™dÀr
 
XML_SëPro˚ssögIn°rH™dÀr


	)

12 
	#XML_SëU≈¨£dE¡ôyDe˛H™dÀr
 
XML_SëU≈¨£dE¡De˛H™dÀr


	)

13 
	#XML_SëSèπName•a˚De˛H™dÀr
 
XML_SëSèπName•cDe˛H™dÀr


	)

14 
	#XML_SëExã∫ÆE¡ôyRefH™dÀrArg
 
XML_SëExã∫ÆE¡RefH™dÀrArg


	)

17 
	~<°dlib.h
>

18 
	~"ex∑t_exã∫Æ.h
"

20 #ifde‡
__˝lu•lus


24 
XML_P¨£rSåu˘
;

25 
XML_P¨£rSåu˘
 *
	tXML_P¨£r
;

28 
	tXML_Boﬁ
;

29 
	#XML_TRUE
 ((
XML_Boﬁ
Ë1)

	)

30 
	#XML_FALSE
 ((
XML_Boﬁ
Ë0)

	)

45 
	eXML_Sètus
 {

46 
XML_STATUS_ERROR
 = 0,

47 
	#XML_STATUS_ERROR
 
XML_STATUS_ERROR


	)

48 
XML_STATUS_OK
 = 1,

49 
	#XML_STATUS_OK
 
XML_STATUS_OK


	)

50 
XML_STATUS_SUSPENDED
 = 2

51 
	#XML_STATUS_SUSPENDED
 
XML_STATUS_SUSPENDED


	)

54 
	eXML_Eº‹
 {

55 
XML_ERROR_NONE
,

56 
XML_ERROR_NO_MEMORY
,

57 
XML_ERROR_SYNTAX
,

58 
XML_ERROR_NO_ELEMENTS
,

59 
XML_ERROR_INVALID_TOKEN
,

60 
XML_ERROR_UNCLOSED_TOKEN
,

61 
XML_ERROR_PARTIAL_CHAR
,

62 
XML_ERROR_TAG_MISMATCH
,

63 
XML_ERROR_DUPLICATE_ATTRIBUTE
,

64 
XML_ERROR_JUNK_AFTER_DOC_ELEMENT
,

65 
XML_ERROR_PARAM_ENTITY_REF
,

66 
XML_ERROR_UNDEFINED_ENTITY
,

67 
XML_ERROR_RECURSIVE_ENTITY_REF
,

68 
XML_ERROR_ASYNC_ENTITY
,

69 
XML_ERROR_BAD_CHAR_REF
,

70 
XML_ERROR_BINARY_ENTITY_REF
,

71 
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
,

72 
XML_ERROR_MISPLACED_XML_PI
,

73 
XML_ERROR_UNKNOWN_ENCODING
,

74 
XML_ERROR_INCORRECT_ENCODING
,

75 
XML_ERROR_UNCLOSED_CDATA_SECTION
,

76 
XML_ERROR_EXTERNAL_ENTITY_HANDLING
,

77 
XML_ERROR_NOT_STANDALONE
,

78 
XML_ERROR_UNEXPECTED_STATE
,

79 
XML_ERROR_ENTITY_DECLARED_IN_PE
,

80 
XML_ERROR_FEATURE_REQUIRES_XML_DTD
,

81 
XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING
,

83 
XML_ERROR_UNBOUND_PREFIX
,

85 
XML_ERROR_UNDECLARING_PREFIX
,

86 
XML_ERROR_INCOMPLETE_PE
,

87 
XML_ERROR_XML_DECL
,

88 
XML_ERROR_TEXT_DECL
,

89 
XML_ERROR_PUBLICID
,

90 
XML_ERROR_SUSPENDED
,

91 
XML_ERROR_NOT_SUSPENDED
,

92 
XML_ERROR_ABORTED
,

93 
XML_ERROR_FINISHED
,

94 
XML_ERROR_SUSPEND_PE
,

96 
XML_ERROR_RESERVED_PREFIX_XML
,

97 
XML_ERROR_RESERVED_PREFIX_XMLNS
,

98 
XML_ERROR_RESERVED_NAMESPACE_URI


101 
	eXML_C⁄ã¡_Ty≥
 {

102 
XML_CTYPE_EMPTY
 = 1,

103 
XML_CTYPE_ANY
,

104 
XML_CTYPE_MIXED
,

105 
XML_CTYPE_NAME
,

106 
XML_CTYPE_CHOICE
,

107 
XML_CTYPE_SEQ


110 
	eXML_C⁄ã¡_Qu™t
 {

111 
XML_CQUANT_NONE
,

112 
XML_CQUANT_OPT
,

113 
XML_CQUANT_REP
,

114 
XML_CQUANT_PLUS


135 
XML_˝
 
	tXML_C⁄ã¡
;

137 
	sXML_˝
 {

138 
XML_C⁄ã¡_Ty≥
 
ty≥
;

139 
XML_C⁄ã¡_Qu™t
 
qu™t
;

140 
XML_Ch¨
 * 
«me
;

141 
numchûdªn
;

142 
XML_C⁄ã¡
 * 
chûdªn
;

150 (
XMLCALL
 *
	tXML_EÀmítDe˛H™dÀr
Ë(*
	tu£rD©a
,

151 c⁄° 
	tXML_Ch¨
 *
	t«me
,

152 
	tXML_C⁄ã¡
 *
	tmodñ
);

154 
XMLPARSEAPI
()

155 
XML_SëEÀmítDe˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

156 
XML_EÀmítDe˛H™dÀr
 
ñde˛
);

166 (
XMLCALL
 *
	tXML_Aâli°De˛H™dÀr
) (

167 *
	tu£rD©a
,

168 c⁄° 
	tXML_Ch¨
 *
	tñ«me
,

169 c⁄° 
	tXML_Ch¨
 *
	t©äame
,

170 c⁄° 
	tXML_Ch¨
 *
	t©t_ty≥
,

171 c⁄° 
	tXML_Ch¨
 *
	tdÊt
,

172 
	ti§equúed
);

174 
XMLPARSEAPI
()

175 
XML_SëAâli°De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

176 
XML_Aâli°De˛H™dÀr
 
©tde˛
);

186 (
XMLCALL
 *
	tXML_XmlDe˛H™dÀr
Ë(*
	tu£rD©a
,

187 c⁄° 
	tXML_Ch¨
 *
	tvîsi⁄
,

188 c⁄° 
	tXML_Ch¨
 *
	tícodög
,

189 
	t°™dÆ⁄e
);

191 
XMLPARSEAPI
()

192 
XML_SëXmlDe˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

193 
XML_XmlDe˛H™dÀr
 
xmlde˛
);

197 *(*
mÆloc_f˙
)(
size_t
 
size
);

198 *(*
ªÆloc_f˙
)(*
±r
, 
size_t
 
size
);

199 (*
‰ì_f˙
)(*
±r
);

200 } 
	tXML_Mem‹y_H™dlög_Suôe
;

205 
XMLPARSEAPI
(
XML_P¨£r
)

206 
XML_P¨£rCª©e
(c⁄° 
XML_Ch¨
 *
ícodög
);

219 
XMLPARSEAPI
(
XML_P¨£r
)

220 
XML_P¨£rCª©eNS
(c⁄° 
XML_Ch¨
 *
ícodög
, XML_Ch¨ 
«me•a˚Sï¨©‹
);

232 
XMLPARSEAPI
(
XML_P¨£r
)

233 
XML_P¨£rCª©e_MM
(c⁄° 
XML_Ch¨
 *
ícodög
,

234 c⁄° 
XML_Mem‹y_H™dlög_Suôe
 *
memsuôe
,

235 c⁄° 
XML_Ch¨
 *
«me•a˚Sï¨©‹
);

246 
XMLPARSEAPI
(
XML_Boﬁ
)

247 
XML_P¨£rRe£t
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ícodög
);

252 (
XMLCALL
 *
	tXML_SèπEÀmítH™dÀr
Ë(*
	tu£rD©a
,

253 c⁄° 
	tXML_Ch¨
 *
	t«me
,

254 c⁄° 
	tXML_Ch¨
 **
	t©ts
);

256 (
XMLCALL
 *
	tXML_EndEÀmítH™dÀr
Ë(*
	tu£rD©a
,

257 c⁄° 
	tXML_Ch¨
 *
	t«me
);

261 (
XMLCALL
 *
	tXML_Ch¨a˘îD©aH™dÀr
Ë(*
	tu£rD©a
,

262 c⁄° 
	tXML_Ch¨
 *
	ts
,

263 
	tÀn
);

266 (
XMLCALL
 *
	tXML_Pro˚ssögIn°ru˘i⁄H™dÀr
) (

267 *
	tu£rD©a
,

268 c⁄° 
	tXML_Ch¨
 *
	tèrgë
,

269 c⁄° 
	tXML_Ch¨
 *
	td©a
);

272 (
XMLCALL
 *
	tXML_CommítH™dÀr
Ë(*
	tu£rD©a
,

273 c⁄° 
	tXML_Ch¨
 *
	td©a
);

275 (
XMLCALL
 *
	tXML_SèπCd©aSe˘i⁄H™dÀr
Ë(*
	tu£rD©a
);

276 (
XMLCALL
 *
	tXML_EndCd©aSe˘i⁄H™dÀr
Ë(*
	tu£rD©a
);

291 (
XMLCALL
 *
	tXML_DeÁu…H™dÀr
Ë(*
	tu£rD©a
,

292 c⁄° 
	tXML_Ch¨
 *
	ts
,

293 
	tÀn
);

298 (
XMLCALL
 *
	tXML_SèπDo˘y≥De˛H™dÀr
) (

299 *
	tu£rD©a
,

300 c⁄° 
	tXML_Ch¨
 *
	tdo˘y≥Name
,

301 c⁄° 
	tXML_Ch¨
 *
	tsysid
,

302 c⁄° 
	tXML_Ch¨
 *
	tpubid
,

303 
	thas_öã∫Æ_sub£t
);

309 (
XMLCALL
 *
	tXML_EndDo˘y≥De˛H™dÀr
)(*
	tu£rD©a
);

329 (
XMLCALL
 *
	tXML_E¡ôyDe˛H™dÀr
) (

330 *
	tu£rD©a
,

331 c⁄° 
	tXML_Ch¨
 *
	títôyName
,

332 
	tis_∑ømëî_ítôy
,

333 c⁄° 
	tXML_Ch¨
 *
	tvÆue
,

334 
	tvÆue_Àngth
,

335 c⁄° 
	tXML_Ch¨
 *
	tba£
,

336 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
,

337 c⁄° 
	tXML_Ch¨
 *
	tpublicId
,

338 c⁄° 
	tXML_Ch¨
 *
	tnŸ©i⁄Name
);

340 
XMLPARSEAPI
()

341 
XML_SëE¡ôyDe˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

342 
XML_E¡ôyDe˛H™dÀr
 
h™dÀr
);

353 (
XMLCALL
 *
	tXML_U≈¨£dE¡ôyDe˛H™dÀr
) (

354 *
	tu£rD©a
,

355 c⁄° 
	tXML_Ch¨
 *
	títôyName
,

356 c⁄° 
	tXML_Ch¨
 *
	tba£
,

357 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
,

358 c⁄° 
	tXML_Ch¨
 *
	tpublicId
,

359 c⁄° 
	tXML_Ch¨
 *
	tnŸ©i⁄Name
);

365 (
XMLCALL
 *
	tXML_NŸ©i⁄De˛H™dÀr
) (

366 *
	tu£rD©a
,

367 c⁄° 
	tXML_Ch¨
 *
	tnŸ©i⁄Name
,

368 c⁄° 
	tXML_Ch¨
 *
	tba£
,

369 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
,

370 c⁄° 
	tXML_Ch¨
 *
	tpublicId
);

378 (
XMLCALL
 *
	tXML_SèπName•a˚De˛H™dÀr
) (

379 *
	tu£rD©a
,

380 c⁄° 
	tXML_Ch¨
 *
	t¥efix
,

381 c⁄° 
	tXML_Ch¨
 *
	turi
);

383 (
XMLCALL
 *
	tXML_EndName•a˚De˛H™dÀr
) (

384 *
	tu£rD©a
,

385 c⁄° 
	tXML_Ch¨
 *
	t¥efix
);

396 (
XMLCALL
 *
	tXML_NŸSèndÆ⁄eH™dÀr
Ë(*
	tu£rD©a
);

432 (
XMLCALL
 *
	tXML_Exã∫ÆE¡ôyRefH™dÀr
) (

433 
	tXML_P¨£r
 
	t∑r£r
,

434 c⁄° 
	tXML_Ch¨
 *
	tc⁄ãxt
,

435 c⁄° 
	tXML_Ch¨
 *
	tba£
,

436 c⁄° 
	tXML_Ch¨
 *
	tsy°emId
,

437 c⁄° 
	tXML_Ch¨
 *
	tpublicId
);

449 (
XMLCALL
 *
	tXML_Skù≥dE¡ôyH™dÀr
) (

450 *
	tu£rD©a
,

451 c⁄° 
	tXML_Ch¨
 *
	títôyName
,

452 
	tis_∑ømëî_ítôy
);

507 
m≠
[256];

508 *
d©a
;

509 (
XMLCALL
 *
c⁄vît
)(*
d©a
, c⁄° *
s
);

510 (
XMLCALL
 *
ªÀa£
)(*
d©a
);

511 } 
	tXML_Encodög
;

528 (
XMLCALL
 *
	tXML_UnknownEncodögH™dÀr
) (

529 *
	tícodögH™dÀrD©a
,

530 c⁄° 
	tXML_Ch¨
 *
	t«me
,

531 
	tXML_Encodög
 *
	töfo
);

533 
XMLPARSEAPI
()

534 
XML_SëEÀmítH™dÀr
(
XML_P¨£r
 
∑r£r
,

535 
XML_SèπEÀmítH™dÀr
 
°¨t
,

536 
XML_EndEÀmítH™dÀr
 
íd
);

538 
XMLPARSEAPI
()

539 
XML_SëSèπEÀmítH™dÀr
(
XML_P¨£r
 
∑r£r
,

540 
XML_SèπEÀmítH™dÀr
 
h™dÀr
);

542 
XMLPARSEAPI
()

543 
XML_SëEndEÀmítH™dÀr
(
XML_P¨£r
 
∑r£r
,

544 
XML_EndEÀmítH™dÀr
 
h™dÀr
);

546 
XMLPARSEAPI
()

547 
XML_SëCh¨a˘îD©aH™dÀr
(
XML_P¨£r
 
∑r£r
,

548 
XML_Ch¨a˘îD©aH™dÀr
 
h™dÀr
);

550 
XMLPARSEAPI
()

551 
XML_SëPro˚ssögIn°ru˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

552 
XML_Pro˚ssögIn°ru˘i⁄H™dÀr
 
h™dÀr
);

553 
XMLPARSEAPI
()

554 
XML_SëCommítH™dÀr
(
XML_P¨£r
 
∑r£r
,

555 
XML_CommítH™dÀr
 
h™dÀr
);

557 
XMLPARSEAPI
()

558 
XML_SëCd©aSe˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

559 
XML_SèπCd©aSe˘i⁄H™dÀr
 
°¨t
,

560 
XML_EndCd©aSe˘i⁄H™dÀr
 
íd
);

562 
XMLPARSEAPI
()

563 
XML_SëSèπCd©aSe˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

564 
XML_SèπCd©aSe˘i⁄H™dÀr
 
°¨t
);

566 
XMLPARSEAPI
()

567 
XML_SëEndCd©aSe˘i⁄H™dÀr
(
XML_P¨£r
 
∑r£r
,

568 
XML_EndCd©aSe˘i⁄H™dÀr
 
íd
);

574 
XMLPARSEAPI
()

575 
XML_SëDeÁu…H™dÀr
(
XML_P¨£r
 
∑r£r
,

576 
XML_DeÁu…H™dÀr
 
h™dÀr
);

582 
XMLPARSEAPI
()

583 
XML_SëDeÁu…H™dÀrEx∑nd
(
XML_P¨£r
 
∑r£r
,

584 
XML_DeÁu…H™dÀr
 
h™dÀr
);

586 
XMLPARSEAPI
()

587 
XML_SëDo˘y≥De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

588 
XML_SèπDo˘y≥De˛H™dÀr
 
°¨t
,

589 
XML_EndDo˘y≥De˛H™dÀr
 
íd
);

591 
XMLPARSEAPI
()

592 
XML_SëSèπDo˘y≥De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

593 
XML_SèπDo˘y≥De˛H™dÀr
 
°¨t
);

595 
XMLPARSEAPI
()

596 
XML_SëEndDo˘y≥De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

597 
XML_EndDo˘y≥De˛H™dÀr
 
íd
);

599 
XMLPARSEAPI
()

600 
XML_SëU≈¨£dE¡ôyDe˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

601 
XML_U≈¨£dE¡ôyDe˛H™dÀr
 
h™dÀr
);

603 
XMLPARSEAPI
()

604 
XML_SëNŸ©i⁄De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

605 
XML_NŸ©i⁄De˛H™dÀr
 
h™dÀr
);

607 
XMLPARSEAPI
()

608 
XML_SëName•a˚De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

609 
XML_SèπName•a˚De˛H™dÀr
 
°¨t
,

610 
XML_EndName•a˚De˛H™dÀr
 
íd
);

612 
XMLPARSEAPI
()

613 
XML_SëSèπName•a˚De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

614 
XML_SèπName•a˚De˛H™dÀr
 
°¨t
);

616 
XMLPARSEAPI
()

617 
XML_SëEndName•a˚De˛H™dÀr
(
XML_P¨£r
 
∑r£r
,

618 
XML_EndName•a˚De˛H™dÀr
 
íd
);

620 
XMLPARSEAPI
()

621 
XML_SëNŸSèndÆ⁄eH™dÀr
(
XML_P¨£r
 
∑r£r
,

622 
XML_NŸSèndÆ⁄eH™dÀr
 
h™dÀr
);

624 
XMLPARSEAPI
()

625 
XML_SëExã∫ÆE¡ôyRefH™dÀr
(
XML_P¨£r
 
∑r£r
,

626 
XML_Exã∫ÆE¡ôyRefH™dÀr
 
h™dÀr
);

632 
XMLPARSEAPI
()

633 
XML_SëExã∫ÆE¡ôyRefH™dÀrArg
(
XML_P¨£r
 
∑r£r
,

634 *
¨g
);

636 
XMLPARSEAPI
()

637 
XML_SëSkù≥dE¡ôyH™dÀr
(
XML_P¨£r
 
∑r£r
,

638 
XML_Skù≥dE¡ôyH™dÀr
 
h™dÀr
);

640 
XMLPARSEAPI
()

641 
XML_SëUnknownEncodögH™dÀr
(
XML_P¨£r
 
∑r£r
,

642 
XML_UnknownEncodögH™dÀr
 
h™dÀr
,

643 *
ícodögH™dÀrD©a
);

649 
XMLPARSEAPI
()

650 
XML_DeÁu…Cuºít
(
XML_P¨£r
 
∑r£r
);

666 
XMLPARSEAPI
()

667 
XML_SëRëu∫NSTrùÀt
(
XML_P¨£r
 
∑r£r
, 
do_n°
);

670 
XMLPARSEAPI
()

671 
XML_SëU£rD©a
(
XML_P¨£r
 
∑r£r
, *
u£rD©a
);

674 
	#XML_GëU£rD©a
(
∑r£r
Ë(*(**)’¨£r))

	)

682 
XMLPARSEAPI
(
XML_Sètus
)

683 
XML_SëEncodög
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ícodög
);

689 
XMLPARSEAPI
()

690 
XML_U£P¨£rAsH™dÀrArg
(
XML_P¨£r
 
∑r£r
);

710 
XMLPARSEAPI
(
XML_Eº‹
)

711 
XML_U£F‹eignDTD
(
XML_P¨£r
 
∑r£r
, 
XML_Boﬁ
 
u£DTD
);

722 
XMLPARSEAPI
(
XML_Sètus
)

723 
XML_SëBa£
(
XML_P¨£r
 
∑r£r
, c⁄° 
XML_Ch¨
 *
ba£
);

725 
XMLPARSEAPI
(c⁄° 
XML_Ch¨
 *)

726 
XML_GëBa£
(
XML_P¨£r
 
∑r£r
);

734 
XMLPARSEAPI
()

735 
XML_GëS≥cifõdAâribuãCou¡
(
XML_P¨£r
 
∑r£r
);

742 
XMLPARSEAPI
()

743 
XML_GëIdAâribuãIndex
(
XML_P¨£r
 
∑r£r
);

754 
XMLPARSEAPI
(
XML_Sètus
)

755 
XML_P¨£
(
XML_P¨£r
 
∑r£r
, c⁄° *
s
, 
Àn
, 
isFöÆ
);

757 
XMLPARSEAPI
(*)

758 
XML_GëBuf„r
(
XML_P¨£r
 
∑r£r
, 
Àn
);

760 
XMLPARSEAPI
(
XML_Sètus
)

761 
XML_P¨£Buf„r
(
XML_P¨£r
 
∑r£r
, 
Àn
, 
isFöÆ
);

794 
XMLPARSEAPI
(
XML_Sètus
)

795 
XML_St›P¨£r
(
XML_P¨£r
 
∑r£r
, 
XML_Boﬁ
 
ªsumabÀ
);

809 
XMLPARSEAPI
(
XML_Sètus
)

810 
XML_ResumeP¨£r
(
XML_P¨£r
 
∑r£r
);

812 
	eXML_P¨sög
 {

813 
XML_INITIALIZED
,

814 
XML_PARSING
,

815 
XML_FINISHED
,

816 
XML_SUSPENDED


820 
XML_P¨sög
 
∑rsög
;

821 
XML_Boﬁ
 
föÆBuf„r
;

822 } 
	tXML_P¨sögSètus
;

829 
XMLPARSEAPI
()

830 
XML_GëP¨sögSètus
(
XML_P¨£r
 
∑r£r
, 
XML_P¨sögSètus
 *
°©us
);

848 
XMLPARSEAPI
(
XML_P¨£r
)

849 
XML_Exã∫ÆE¡ôyP¨£rCª©e
(
XML_P¨£r
 
∑r£r
,

850 c⁄° 
XML_Ch¨
 *
c⁄ãxt
,

851 c⁄° 
XML_Ch¨
 *
ícodög
);

853 
	eXML_P¨amE¡ôyP¨sög
 {

854 
XML_PARAM_ENTITY_PARSING_NEVER
,

855 
XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE
,

856 
XML_PARAM_ENTITY_PARSING_ALWAYS


882 
XMLPARSEAPI
()

883 
XML_SëP¨amE¡ôyP¨sög
(
XML_P¨£r
 
∑r£r
,

884 
XML_P¨amE¡ôyP¨sög
 
∑rsög
);

891 
XMLPARSEAPI
()

892 
XML_SëHashSÆt
(
XML_P¨£r
 
∑r£r
,

893 
hash_ß…
);

898 
XMLPARSEAPI
(
XML_Eº‹
)

899 
XML_GëEº‹Code
(
XML_P¨£r
 
∑r£r
);

917 
XMLPARSEAPI
(
XML_Size
Ë
XML_GëCuºítLöeNumbî
(
XML_P¨£r
 
∑r£r
);

918 
XMLPARSEAPI
(
XML_Size
Ë
XML_GëCuºítCﬁumnNumbî
(
XML_P¨£r
 
∑r£r
);

919 
XMLPARSEAPI
(
XML_Index
Ë
XML_GëCuºítByãIndex
(
XML_P¨£r
 
∑r£r
);

924 
XMLPARSEAPI
()

925 
XML_GëCuºítByãCou¡
(
XML_P¨£r
 
∑r£r
);

937 
XMLPARSEAPI
(const *)

938 
XML_GëI≈utC⁄ãxt
(
XML_P¨£r
 
∑r£r
,

939 *
off£t
,

940 *
size
);

943 
	#XML_GëEº‹LöeNumbî
 
XML_GëCuºítLöeNumbî


	)

944 
	#XML_GëEº‹CﬁumnNumbî
 
XML_GëCuºítCﬁumnNumbî


	)

945 
	#XML_GëEº‹ByãIndex
 
XML_GëCuºítByãIndex


	)

948 
XMLPARSEAPI
()

949 
XML_FªeC⁄ã¡Modñ
(
XML_P¨£r
 
∑r£r
, 
XML_C⁄ã¡
 *
modñ
);

952 
XMLPARSEAPI
(*)

953 
XML_MemMÆloc
(
XML_P¨£r
 
∑r£r
, 
size_t
 
size
);

955 
XMLPARSEAPI
(*)

956 
XML_MemRóŒoc
(
XML_P¨£r
 
∑r£r
, *
±r
, 
size_t
 
size
);

958 
XMLPARSEAPI
()

959 
XML_MemFªe
(
XML_P¨£r
 
∑r£r
, *
±r
);

962 
XMLPARSEAPI
()

963 
XML_P¨£rFªe
(
XML_P¨£r
 
∑r£r
);

966 
XMLPARSEAPI
(c⁄° 
XML_LCh¨
 *)

967 
XML_Eº‹Såög
(
XML_Eº‹
 
code
);

970 
XMLPARSEAPI
(c⁄° 
XML_LCh¨
 *)

971 
XML_Ex∑tVîsi⁄
();

974 
maj‹
;

975 
mö‹
;

976 
mi¸o
;

977 } 
	tXML_Ex∑t_Vîsi⁄
;

982 
XMLPARSEAPI
(
XML_Ex∑t_Vîsi⁄
)

983 
XML_Ex∑tVîsi⁄Info
();

986 
	eXML_FótuªEnum
 {

987 
XML_FEATURE_END
 = 0,

988 
XML_FEATURE_UNICODE
,

989 
XML_FEATURE_UNICODE_WCHAR_T
,

990 
XML_FEATURE_DTD
,

991 
XML_FEATURE_CONTEXT_BYTES
,

992 
XML_FEATURE_MIN_SIZE
,

993 
XML_FEATURE_SIZEOF_XML_CHAR
,

994 
XML_FEATURE_SIZEOF_XML_LCHAR
,

995 
XML_FEATURE_NS
,

996 
XML_FEATURE_LARGE_SIZE


1001 
XML_FótuªEnum
 
„©uª
;

1002 c⁄° 
XML_LCh¨
 *
«me
;

1003 
vÆue
;

1004 } 
	tXML_Fótuª
;

1006 
XMLPARSEAPI
(c⁄° 
XML_Fótuª
 *)

1007 
XML_GëFótuªLi°
();

1015 
	#XML_MAJOR_VERSION
 2

	)

1016 
	#XML_MINOR_VERSION
 0

	)

1017 
	#XML_MICRO_VERSION
 1

	)

1019 #ifde‡
__˝lu•lus


	@/usr/include/expat_config.h

5 
	#BYTEORDER
 1234

	)

8 
	#HAVE_BCOPY
 1

	)

11 
	#HAVE_DLFCN_H
 1

	)

14 
	#HAVE_FCNTL_H
 1

	)

17 
	#HAVE_GETPAGESIZE
 1

	)

20 
	#HAVE_INTTYPES_H
 1

	)

23 
	#HAVE_MEMMOVE
 1

	)

26 
	#HAVE_MEMORY_H
 1

	)

32 
	#HAVE_STDINT_H
 1

	)

35 
	#HAVE_STDLIB_H
 1

	)

38 
	#HAVE_STRINGS_H
 1

	)

41 
	#HAVE_STRING_H
 1

	)

44 
	#HAVE_SYS_STAT_H
 1

	)

47 
	#HAVE_SYS_TYPES_H
 1

	)

50 
	#HAVE_UNISTD_H
 1

	)

53 
	#PACKAGE_BUGREPORT
 "ex∑t-bugs@libex∑t.‹g"

	)

56 
	#PACKAGE_NAME
 "ex∑t"

	)

59 
	#PACKAGE_STRING
 "ex∑à2.0.1"

	)

62 
	#PACKAGE_TARNAME
 "ex∑t"

	)

65 
	#PACKAGE_VERSION
 "2.0.1"

	)

68 
	#STDC_HEADERS
 1

	)

75 
	#XML_CONTEXT_BYTES
 1024

	)

78 
	#XML_DTD
 1

	)

81 
	#XML_NS
 1

	)

	@/usr/include/expat_external.h

5 #i‚de‡
Ex∑t_Exã∫Æ_INCLUDED


6 
	#Ex∑t_Exã∫Æ_INCLUDED
 1

	)

10 #i‡
deföed
(
_MSC_EXTENSIONS
Ë&& !deföed(
__BEOS__
Ë&& !deföed(
__CYGWIN__
)

11 
	#XML_USE_MSC_EXTENSIONS
 1

	)

36 #i‚de‡
XMLCALL


37 #i‡
deföed
(
_MSC_VER
)

38 
	#XMLCALL
 
__cde˛


	)

39 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__i386
Ë&& !deföed(
__INTEL_COMPILER
)

40 
	#XMLCALL
 
	`__©åibuã__
((
cde˛
))

	)

52 
	#XMLCALL


	)

57 #i‡!
deföed
(
XML_STATIC
Ë&& !deföed(
XMLIMPORT
)

58 #i‚de‡
XML_BUILDING_EXPAT


61 #ifde‡
XML_USE_MSC_EXTENSIONS


62 
	#XMLIMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

70 #i‚de‡
XMLIMPORT


71 
	#XMLIMPORT


	)

75 
	#XMLPARSEAPI
(
ty≥
Ë
XMLIMPORT
Åy≥ 
XMLCALL


	)

77 #ifde‡
__˝lu•lus


81 #ifde‡
XML_UNICODE_WCHAR_T


82 
	#XML_UNICODE


	)

85 #ifde‡
XML_UNICODE


86 #ifde‡
XML_UNICODE_WCHAR_T


87 
wch¨_t
 
	tXML_Ch¨
;

88 
wch¨_t
 
	tXML_LCh¨
;

90 
	tXML_Ch¨
;

91 
	tXML_LCh¨
;

94 
	tXML_Ch¨
;

95 
	tXML_LCh¨
;

98 #ifde‡
XML_LARGE_SIZE


99 #i‡
deföed
(
XML_USE_MSC_EXTENSIONS
Ë&& 
_MSC_VER
 < 1400

100 
__öt64
 
	tXML_Index
;

101 
	t__öt64
 
	tXML_Size
;

103 
	tXML_Index
;

104 
	tXML_Size
;

107 
	tXML_Index
;

108 
	tXML_Size
;

111 #ifde‡
__˝lu•lus


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/fenv.h

23 #i‚de‡
_FENV_H


24 
	#_FENV_H
 1

	)

26 
	~<„©uªs.h
>

58 
	~<bôs/„nv.h
>

60 
__BEGIN_DECLS


65 
	$„˛óªx˚±
 (
__ex˚±s
Ë
__THROW
;

69 
	$„gëex˚±Êag
 (
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

72 
	$„øi£ex˚±
 (
__ex˚±s
Ë
__THROW
;

76 
	$„£ãx˚±Êag
 (
__c⁄°
 
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

80 
	$„ã°ex˚±
 (
__ex˚±s
Ë
__THROW
;

86 
	$„gëround
 (Ë
__THROW
;

89 
	$„£åound
 (
__roundög_dúe˘i⁄
Ë
__THROW
;

96 
	$„gëív
 (
„nv_t
 *
__ívp
Ë
__THROW
;

101 
	$„hﬁdex˚±
 (
„nv_t
 *
__ívp
Ë
__THROW
;

105 
	$„£ãnv
 (
__c⁄°
 
„nv_t
 *
__ívp
Ë
__THROW
;

110 
	$„upd©ìnv
 (
__c⁄°
 
„nv_t
 *
__ívp
Ë
__THROW
;

114 #ifde‡
__OPTIMIZE__


115 
	~<bôs/„nvölöe.h
>

118 #ifde‡
__USE_GNU


123 
	$„íabÀex˚±
 (
__ex˚±s
Ë
__THROW
;

128 
	$„dißbÀex˚±
 (
__ex˚±s
Ë
__THROW
;

131 
	$„gëex˚±
 (Ë
__THROW
;

134 
__END_DECLS


	@/usr/include/fmtmsg.h

20 #i‚de‡
__FMTMSG_H


21 
	#__FMTMSG_H
 1

	)

23 
	~<„©uªs.h
>

26 
__BEGIN_DECLS


31 
	mMM_HARD
 = 0x001,

32 
	#MM_HARD
 
MM_HARD


	)

33 
	mMM_SOFT
 = 0x002,

34 
	#MM_SOFT
 
MM_SOFT


	)

35 
	mMM_FIRM
 = 0x004,

36 
	#MM_FIRM
 
MM_FIRM


	)

37 
	mMM_APPL
 = 0x008,

38 
	#MM_APPL
 
MM_APPL


	)

39 
	mMM_UTIL
 = 0x010,

40 
	#MM_UTIL
 
MM_UTIL


	)

41 
	mMM_OPSYS
 = 0x020,

42 
	#MM_OPSYS
 
MM_OPSYS


	)

43 
	mMM_RECOVER
 = 0x040,

44 
	#MM_RECOVER
 
MM_RECOVER


	)

45 
	mMM_NRECOV
 = 0x080,

46 
	#MM_NRECOV
 
MM_NRECOV


	)

47 
	mMM_PRINT
 = 0x100,

48 
	#MM_PRINT
 
MM_PRINT


	)

49 
	mMM_CONSOLE
 = 0x200

50 
	#MM_CONSOLE
 
MM_CONSOLE


	)

56 
	mMM_NOSEV
 = 0,

57 
	#MM_NOSEV
 
MM_NOSEV


	)

58 
	mMM_HALT
,

59 
	#MM_HALT
 
MM_HALT


	)

60 
	mMM_ERROR
,

61 
	#MM_ERROR
 
MM_ERROR


	)

62 
	mMM_WARNING
,

64 
	#MM_WARNING
 
MM_WARNING


	)

65 
	mMM_INFO


66 
	#MM_INFO
 
MM_INFO


	)

71 
	#MM_NULLLBL
 ((*Ë0)

	)

72 
	#MM_NULLSEV
 0

	)

73 
	#MM_NULLMC
 ((Ë0)

	)

74 
	#MM_NULLTXT
 ((*Ë0)

	)

75 
	#MM_NULLACT
 ((*Ë0)

	)

76 
	#MM_NULLTAG
 ((*Ë0)

	)

82 
	mMM_NOTOK
 = -1,

83 
	#MM_NOTOK
 
MM_NOTOK


	)

84 
	mMM_OK
 = 0,

85 
	#MM_OK
 
MM_OK


	)

86 
	mMM_NOMSG
 = 1,

87 
	#MM_NOMSG
 
MM_NOMSG


	)

88 
	mMM_NOCON
 = 4

89 
	#MM_NOCON
 
MM_NOCON


	)

95 
fmtmsg
 (
__˛assifiˇti⁄
, 
__c⁄°
 *
__œbñ
,

96 
__£vîôy
, 
__c⁄°
 *
__ãxt
,

97 
__c⁄°
 *
__a˘i⁄
, __c⁄° *
__èg
);

99 #ifde‡
__USE_SVID


101 
	$add£vîôy
 (
__£vîôy
, 
__c⁄°
 *
__°rög
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/fnmatch.h

19 #i‚def 
_FNMATCH_H


20 
	#_FNMATCH_H
 1

	)

22 #ifdef 
__˝lu•lus


27 #i‡(
deföed
 
__STDC__
 && __STDC__Ë|| deföed 
__˝lu•lus


28 
	#__c⁄°
 c⁄°

	)

30 
	#__c⁄°


	)

36 #unde‡
FNM_PATHNAME


37 #unde‡
FNM_NOESCAPE


38 #unde‡
FNM_PERIOD


41 
	#FNM_PATHNAME
 (1 << 0Ë

	)

42 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

43 
	#FNM_PERIOD
 (1 << 2Ë

	)

45 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


46 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

47 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

48 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

49 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

53 
	#FNM_NOMATCH
 1

	)

59 #ifde‡
_XOPEN_SOURCE


60 
	#FNM_NOSYS
 (-1)

	)

65 
‚m©ch
 (
__c⁄°
 *
__∑âîn
, __c⁄° *
__«me
,

66 
__Êags
);

68 #ifdef 
__˝lu•lus


	@/usr/include/form.h

35 #i‚de‡
FORM_H


36 
	#FORM_H


	)

38 
	~<cur£s.h
>

39 
	~<ëi.h
>

41 #ifde‡
__˝lu•lus


45 #i‚de‡
FORM_PRIV_H


46 *
	tFIELD_CELL
;

49 #i‚de‡
NCURSES_FIELD_INTERNALS


50 
	#NCURSES_FIELD_INTERNALS


	)

53 
	tF‹m_O±i⁄s
;

54 
	tFõld_O±i⁄s
;

61 
	gpmö
;

62 
	gpmax
;

63 
	gsmö
;

64 
	gsmax
;

65 } 
	t_PAGE
;

71 
	sfõldnode
 {

72 
	g°©us
;

73 
	grows
;

74 
	gcﬁs
;

75 
	g‰ow
;

76 
	gfcﬁ
;

77 
	gdrows
;

78 
	gdcﬁs
;

79 
	gmaxgrow
;

80 
	gƒow
;

81 
	gnbuf
;

82 
	gju°
;

83 
	g∑ge
;

84 
	gödex
;

85 
	g∑d
;

86 
chty≥
 
	gf‹e
;

87 
chty≥
 
	gback
;

88 
Fõld_O±i⁄s
 
	g›ts
;

89 
fõldnode
 * 
	g¢ext
;

90 
fõldnode
 * 
	g•ªv
;

91 
fõldnode
 * 
	glök
;

92 
f‹mnode
 * 
	gf‹m
;

93 
ty≥node
 * 
	gty≥
;

94 * 
	g¨g
;

95 
FIELD_CELL
 * 
	gbuf
;

96 * 
	gu§±r
;

105 
	gNCURSES_FIELD_INTERNALS


106 } 
	tFIELD
;

113 
	sf‹mnode
 {

114 
	g°©us
;

115 
	grows
;

116 
	gcﬁs
;

117 
	gcuºow
;

118 
	gcurcﬁ
;

119 
	gt›row
;

120 
	gbegöcﬁ
;

121 
	gmaxfõld
;

122 
	gmax∑ge
;

123 
	gcuΩage
;

124 
F‹m_O±i⁄s
 
	g›ts
;

125 
WINDOW
 * 
	gwö
;

126 
WINDOW
 * 
	gsub
;

127 
WINDOW
 * 
	gw
;

128 
FIELD
 ** 
	gfõld
;

129 
FIELD
 * 
	gcuºít
;

130 
_PAGE
 * 
	g∑ge
;

131 * 
	gu§±r
;

133 (*
	gf‹möô
)(
	gf‹mnode
 *);

134 (*
	gf‹mãrm
)(
	gf‹mnode
 *);

135 (*
	gfõldöô
)(
	gf‹mnode
 *);

136 (*
	gfõldãrm
)(
	gf‹mnode
 *);

138 } 
	tFORM
;

145 
	sty≥node
 {

146 
	g°©us
;

147 
	gªf
;

148 
ty≥node
 * 
	gÀ·
;

149 
ty≥node
 * 
	gright
;

151 * (*
	gmakórg
)(
	gva_li°
 *);

152 * (*
	gc›y¨g
)(const *);

153 (*
	g‰ì¨g
)(*);

155 #i‡
NCURSES_INTEROP_FUNCS


157 
boﬁ
 (*
ofcheck
)(
	gFIELD
 *,const *);

158 
boﬁ
 (*
gfcheck
)(
	gFORM
*,
	gFIELD
 *,const *);

159 } 
	gfõldcheck
;

161 
boﬁ
 (*
occheck
)(,const *);

162 
boﬁ
 (*
gccheck
)(,
	gFORM
*,

163 
	gFIELD
*,const *);

164 } 
	gch¨check
;

166 
boﬁ
 (*
⁄ext
)(
	gFIELD
 *,const *);

167 
boﬁ
 (*
g√xt
)(
	gFORM
*,
	gFIELD
*,const *);

168 } 
	gíum_√xt
;

170 
boﬁ
 (*
›ªv
)(
	gFIELD
 *,const *);

171 
boﬁ
 (*
g¥ev
)(
	gFORM
*,
	gFIELD
*,const *);

172 } 
	gíum_¥ev
;

173 * (*
	ggíîiˇrg
)(*);

175 
boﬁ
 (*
fcheck
)(
	gFIELD
 *,const *);

176 
boﬁ
 (*
ccheck
)(,const *);

178 
boﬁ
 (*
√xt
)(
	gFIELD
 *,const *);

179 
boﬁ
 (*
¥ev
)(
	gFIELD
 *,const *);

181 } 
	tFIELDTYPE
;

183 (*
	gF‹m_Hook
)(
	tFORM
 *);

190 
	#NO_JUSTIFICATION
 (0)

	)

191 
	#JUSTIFY_LEFT
 (1)

	)

192 
	#JUSTIFY_CENTER
 (2)

	)

193 
	#JUSTIFY_RIGHT
 (3)

	)

196 
	#O_VISIBLE
 (0x0001U)

	)

197 
	#O_ACTIVE
 (0x0002U)

	)

198 
	#O_PUBLIC
 (0x0004U)

	)

199 
	#O_EDIT
 (0x0008U)

	)

200 
	#O_WRAP
 (0x0010U)

	)

201 
	#O_BLANK
 (0x0020U)

	)

202 
	#O_AUTOSKIP
 (0x0040U)

	)

203 
	#O_NULLOK
 (0x0080U)

	)

204 
	#O_PASSOK
 (0x0100U)

	)

205 
	#O_STATIC
 (0x0200U)

	)

208 
	#O_NL_OVERLOAD
 (0x0001U)

	)

209 
	#O_BS_OVERLOAD
 (0x0002U)

	)

212 
	#REQ_NEXT_PAGE
 (
KEY_MAX
 + 1Ë

	)

213 
	#REQ_PREV_PAGE
 (
KEY_MAX
 + 2Ë

	)

214 
	#REQ_FIRST_PAGE
 (
KEY_MAX
 + 3Ë

	)

215 
	#REQ_LAST_PAGE
 (
KEY_MAX
 + 4Ë

	)

217 
	#REQ_NEXT_FIELD
 (
KEY_MAX
 + 5Ë

	)

218 
	#REQ_PREV_FIELD
 (
KEY_MAX
 + 6Ë

	)

219 
	#REQ_FIRST_FIELD
 (
KEY_MAX
 + 7Ë

	)

220 
	#REQ_LAST_FIELD
 (
KEY_MAX
 + 8Ë

	)

221 
	#REQ_SNEXT_FIELD
 (
KEY_MAX
 + 9Ë

	)

222 
	#REQ_SPREV_FIELD
 (
KEY_MAX
 + 10Ë

	)

223 
	#REQ_SFIRST_FIELD
 (
KEY_MAX
 + 11Ë

	)

224 
	#REQ_SLAST_FIELD
 (
KEY_MAX
 + 12Ë

	)

225 
	#REQ_LEFT_FIELD
 (
KEY_MAX
 + 13Ë

	)

226 
	#REQ_RIGHT_FIELD
 (
KEY_MAX
 + 14Ë

	)

227 
	#REQ_UP_FIELD
 (
KEY_MAX
 + 15Ë

	)

228 
	#REQ_DOWN_FIELD
 (
KEY_MAX
 + 16Ë

	)

230 
	#REQ_NEXT_CHAR
 (
KEY_MAX
 + 17Ë

	)

231 
	#REQ_PREV_CHAR
 (
KEY_MAX
 + 18Ë

	)

232 
	#REQ_NEXT_LINE
 (
KEY_MAX
 + 19Ë

	)

233 
	#REQ_PREV_LINE
 (
KEY_MAX
 + 20Ë

	)

234 
	#REQ_NEXT_WORD
 (
KEY_MAX
 + 21Ë

	)

235 
	#REQ_PREV_WORD
 (
KEY_MAX
 + 22Ë

	)

236 
	#REQ_BEG_FIELD
 (
KEY_MAX
 + 23Ë

	)

237 
	#REQ_END_FIELD
 (
KEY_MAX
 + 24Ë

	)

238 
	#REQ_BEG_LINE
 (
KEY_MAX
 + 25Ë

	)

239 
	#REQ_END_LINE
 (
KEY_MAX
 + 26Ë

	)

240 
	#REQ_LEFT_CHAR
 (
KEY_MAX
 + 27Ë

	)

241 
	#REQ_RIGHT_CHAR
 (
KEY_MAX
 + 28Ë

	)

242 
	#REQ_UP_CHAR
 (
KEY_MAX
 + 29Ë

	)

243 
	#REQ_DOWN_CHAR
 (
KEY_MAX
 + 30Ë

	)

245 
	#REQ_NEW_LINE
 (
KEY_MAX
 + 31Ë

	)

246 
	#REQ_INS_CHAR
 (
KEY_MAX
 + 32Ë

	)

247 
	#REQ_INS_LINE
 (
KEY_MAX
 + 33Ë

	)

248 
	#REQ_DEL_CHAR
 (
KEY_MAX
 + 34Ë

	)

249 
	#REQ_DEL_PREV
 (
KEY_MAX
 + 35Ë

	)

250 
	#REQ_DEL_LINE
 (
KEY_MAX
 + 36Ë

	)

251 
	#REQ_DEL_WORD
 (
KEY_MAX
 + 37Ë

	)

252 
	#REQ_CLR_EOL
 (
KEY_MAX
 + 38Ë

	)

253 
	#REQ_CLR_EOF
 (
KEY_MAX
 + 39Ë

	)

254 
	#REQ_CLR_FIELD
 (
KEY_MAX
 + 40Ë

	)

255 
	#REQ_OVL_MODE
 (
KEY_MAX
 + 41Ë

	)

256 
	#REQ_INS_MODE
 (
KEY_MAX
 + 42Ë

	)

257 
	#REQ_SCR_FLINE
 (
KEY_MAX
 + 43Ë

	)

258 
	#REQ_SCR_BLINE
 (
KEY_MAX
 + 44Ë

	)

259 
	#REQ_SCR_FPAGE
 (
KEY_MAX
 + 45Ë

	)

260 
	#REQ_SCR_BPAGE
 (
KEY_MAX
 + 46Ë

	)

261 
	#REQ_SCR_FHPAGE
 (
KEY_MAX
 + 47Ë

	)

262 
	#REQ_SCR_BHPAGE
 (
KEY_MAX
 + 48Ë

	)

263 
	#REQ_SCR_FCHAR
 (
KEY_MAX
 + 49Ë

	)

264 
	#REQ_SCR_BCHAR
 (
KEY_MAX
 + 50Ë

	)

265 
	#REQ_SCR_HFLINE
 (
KEY_MAX
 + 51Ë

	)

266 
	#REQ_SCR_HBLINE
 (
KEY_MAX
 + 52Ë

	)

267 
	#REQ_SCR_HFHALF
 (
KEY_MAX
 + 53Ë

	)

268 
	#REQ_SCR_HBHALF
 (
KEY_MAX
 + 54Ë

	)

270 
	#REQ_VALIDATION
 (
KEY_MAX
 + 55Ë

	)

271 
	#REQ_NEXT_CHOICE
 (
KEY_MAX
 + 56Ë

	)

272 
	#REQ_PREV_CHOICE
 (
KEY_MAX
 + 57Ë

	)

274 
	#MIN_FORM_COMMAND
 (
KEY_MAX
 + 1Ë

	)

275 
	#MAX_FORM_COMMAND
 (
KEY_MAX
 + 57Ë

	)

277 #i‡
deföed
(
MAX_COMMAND
)

278 #i‡(
MAX_FORM_COMMAND
 > 
MAX_COMMAND
)

279 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_FORM_COMMAND
 i†
gª©î
 
th™
 
MAX_COMMAND


280 #ñi‡(
MAX_COMMAND
 !(
KEY_MAX
 + 128))

281 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_COMMAND
 i†
Æªady
 
öc⁄si°íéy
 
deföed
.

284 
	#MAX_COMMAND
 (
KEY_MAX
 + 128)

	)

290 
NCURSES_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_ALPHA
;

291 
NCURSES_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_ALNUM
;

292 
NCURSES_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_ENUM
;

293 
NCURSES_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_INTEGER
;

294 
NCURSES_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_NUMERIC
;

295 
NCURSES_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_REGEXP
;

301 
NCURSES_EXPORT_VAR
(
FIELDTYPE
 *Ë
TYPE_IPV4
;

306 
NCURSES_EXPORT
(
FIELDTYPE
 *Ë
√w_fõldty≥
 (

307 
boﬁ
 (* c⁄° 
fõld_check
)(
FIELD
 *,const *),

308 
boﬁ
 (* c⁄° 
ch¨_check
)(,const *));

309 
NCURSES_EXPORT
(
FIELDTYPE
 *Ë
lök_fõldty≥
(

310 
FIELDTYPE
 *, FIELDTYPE *);

312 
NCURSES_EXPORT
(Ë
‰ì_fõldty≥
 (
FIELDTYPE
 *);

313 
NCURSES_EXPORT
(Ë
£t_fõldty≥_¨g
 (
FIELDTYPE
 *,

314 * (* c⁄° 
make_¨g
)(
va_li°
 *),

315 * (* c⁄° 
c›y_¨g
)(const *),

316 (* c⁄° 
‰ì_¨g
)(*));

317 
NCURSES_EXPORT
(Ë
£t_fõldty≥_choi˚
 (
FIELDTYPE
 *,

318 
boﬁ
 (* c⁄° 
√xt_choi˚
)(
FIELD
 *,const *),

319 
boﬁ
 (* c⁄° 
¥ev_choi˚
)(
FIELD
 *,const *));

324 
NCURSES_EXPORT
(
FIELD
 *Ë
√w_fõld
 (,,,,,);

325 
NCURSES_EXPORT
(
FIELD
 *Ë
dup_fõld
 (FIELD *,,);

326 
NCURSES_EXPORT
(
FIELD
 *Ë
lök_fõld
 (FIELD *,,);

328 
NCURSES_EXPORT
(Ë
‰ì_fõld
 (
FIELD
 *);

329 
NCURSES_EXPORT
(Ë
fõld_öfo
 (c⁄° 
FIELD
 *,*,*,*,*,*,*);

330 
NCURSES_EXPORT
(Ë
dy«mic_fõld_öfo
 (c⁄° 
FIELD
 *,*,*,*);

331 
NCURSES_EXPORT
(Ë
£t_max_fõld
 ( 
FIELD
 *,);

332 
NCURSES_EXPORT
(Ë
move_fõld
 (
FIELD
 *,,);

333 
NCURSES_EXPORT
(Ë
£t_fõld_ty≥
 (
FIELD
 *,
FIELDTYPE
 *,...);

334 
NCURSES_EXPORT
(Ë
£t_√w_∑ge
 (
FIELD
 *,
boﬁ
);

335 
NCURSES_EXPORT
(Ë
£t_fõld_ju°
 (
FIELD
 *,);

336 
NCURSES_EXPORT
(Ë
fõld_ju°
 (c⁄° 
FIELD
 *);

337 
NCURSES_EXPORT
(Ë
£t_fõld_f‹e
 (
FIELD
 *,
chty≥
);

338 
NCURSES_EXPORT
(Ë
£t_fõld_back
 (
FIELD
 *,
chty≥
);

339 
NCURSES_EXPORT
(Ë
£t_fõld_∑d
 (
FIELD
 *,);

340 
NCURSES_EXPORT
(Ë
fõld_∑d
 (c⁄° 
FIELD
 *);

341 
NCURSES_EXPORT
(Ë
£t_fõld_buf„r
 (
FIELD
 *,,const *);

342 
NCURSES_EXPORT
(Ë
£t_fõld_°©us
 (
FIELD
 *,
boﬁ
);

343 
NCURSES_EXPORT
(Ë
£t_fõld_u£Ωå
 (
FIELD
 *, *);

344 
NCURSES_EXPORT
(Ë
£t_fõld_›ts
 (
FIELD
 *,
Fõld_O±i⁄s
);

345 
NCURSES_EXPORT
(Ë
fõld_›ts_⁄
 (
FIELD
 *,
Fõld_O±i⁄s
);

346 
NCURSES_EXPORT
(Ë
fõld_›ts_off
 (
FIELD
 *,
Fõld_O±i⁄s
);

348 
NCURSES_EXPORT
(
chty≥
Ë
fõld_f‹e
 (c⁄° 
FIELD
 *);

349 
NCURSES_EXPORT
(
chty≥
Ë
fõld_back
 (c⁄° 
FIELD
 *);

351 
NCURSES_EXPORT
(
boﬁ
Ë
√w_∑ge
 (c⁄° 
FIELD
 *);

352 
NCURSES_EXPORT
(
boﬁ
Ë
fõld_°©us
 (c⁄° 
FIELD
 *);

354 
NCURSES_EXPORT
(*Ë
fõld_¨g
 (c⁄° 
FIELD
 *);

356 
NCURSES_EXPORT
(*Ë
fõld_u£Ωå
 (c⁄° 
FIELD
 *);

358 
NCURSES_EXPORT
(
FIELDTYPE
 *Ë
fõld_ty≥
 (c⁄° 
FIELD
 *);

360 
NCURSES_EXPORT
(*Ë
fõld_buf„r
 (c⁄° 
FIELD
 *,);

362 
NCURSES_EXPORT
(
Fõld_O±i⁄s
Ë
fõld_›ts
 (c⁄° 
FIELD
 *);

368 
NCURSES_EXPORT
(
FORM
 *Ë
√w_f‹m
 (
FIELD
 **);

370 
NCURSES_EXPORT
(
FIELD
 **Ë
f‹m_fõlds
 (c⁄° 
FORM
 *);

371 
NCURSES_EXPORT
(
FIELD
 *Ë
cuºít_fõld
 (c⁄° 
FORM
 *);

373 
NCURSES_EXPORT
(
WINDOW
 *Ë
f‹m_wö
 (c⁄° 
FORM
 *);

374 
NCURSES_EXPORT
(
WINDOW
 *Ë
f‹m_sub
 (c⁄° 
FORM
 *);

376 
NCURSES_EXPORT
(
F‹m_Hook
Ë
f‹m_öô
 (c⁄° 
FORM
 *);

377 
NCURSES_EXPORT
(
F‹m_Hook
Ë
f‹m_ãrm
 (c⁄° 
FORM
 *);

378 
NCURSES_EXPORT
(
F‹m_Hook
Ë
fõld_öô
 (c⁄° 
FORM
 *);

379 
NCURSES_EXPORT
(
F‹m_Hook
Ë
fõld_ãrm
 (c⁄° 
FORM
 *);

381 
NCURSES_EXPORT
(Ë
‰ì_f‹m
 (
FORM
 *);

382 
NCURSES_EXPORT
(Ë
£t_f‹m_fõlds
 (
FORM
 *,
FIELD
 **);

383 
NCURSES_EXPORT
(Ë
fõld_cou¡
 (c⁄° 
FORM
 *);

384 
NCURSES_EXPORT
(Ë
£t_f‹m_wö
 (
FORM
 *,
WINDOW
 *);

385 
NCURSES_EXPORT
(Ë
£t_f‹m_sub
 (
FORM
 *,
WINDOW
 *);

386 
NCURSES_EXPORT
(Ë
£t_cuºít_fõld
 (
FORM
 *,
FIELD
 *);

387 
NCURSES_EXPORT
(Ë
fõld_ödex
 (c⁄° 
FIELD
 *);

388 
NCURSES_EXPORT
(Ë
£t_f‹m_∑ge
 (
FORM
 *,);

389 
NCURSES_EXPORT
(Ë
f‹m_∑ge
 (c⁄° 
FORM
 *);

390 
NCURSES_EXPORT
(Ë
sˇÀ_f‹m
 (c⁄° 
FORM
 *,*,*);

391 
NCURSES_EXPORT
(Ë
£t_f‹m_öô
 (
FORM
 *,
F‹m_Hook
);

392 
NCURSES_EXPORT
(Ë
£t_f‹m_ãrm
 (
FORM
 *,
F‹m_Hook
);

393 
NCURSES_EXPORT
(Ë
£t_fõld_öô
 (
FORM
 *,
F‹m_Hook
);

394 
NCURSES_EXPORT
(Ë
£t_fõld_ãrm
 (
FORM
 *,
F‹m_Hook
);

395 
NCURSES_EXPORT
(Ë
po°_f‹m
 (
FORM
 *);

396 
NCURSES_EXPORT
(Ë
u≈o°_f‹m
 (
FORM
 *);

397 
NCURSES_EXPORT
(Ë
pos_f‹m_curs‹
 (
FORM
 *);

398 
NCURSES_EXPORT
(Ë
f‹m_drivî
 (
FORM
 *,);

399 
NCURSES_EXPORT
(Ë
£t_f‹m_u£Ωå
 (
FORM
 *,*);

400 
NCURSES_EXPORT
(Ë
£t_f‹m_›ts
 (
FORM
 *,
F‹m_O±i⁄s
);

401 
NCURSES_EXPORT
(Ë
f‹m_›ts_⁄
 (
FORM
 *,
F‹m_O±i⁄s
);

402 
NCURSES_EXPORT
(Ë
f‹m_›ts_off
 (
FORM
 *,
F‹m_O±i⁄s
);

403 
NCURSES_EXPORT
(Ë
f‹m_ªque°_by_«me
 (const *);

405 
NCURSES_EXPORT
(c⁄° *Ë
f‹m_ªque°_«me
 ();

407 
NCURSES_EXPORT
(*Ë
f‹m_u£Ωå
 (c⁄° 
FORM
 *);

409 
NCURSES_EXPORT
(
F‹m_O±i⁄s
Ë
f‹m_›ts
 (c⁄° 
FORM
 *);

411 
NCURSES_EXPORT
(
boﬁ
Ë
d©a_ahód
 (c⁄° 
FORM
 *);

412 
NCURSES_EXPORT
(
boﬁ
Ë
d©a_behöd
 (c⁄° 
FORM
 *);

414 #i‡
NCURSES_SP_FUNCS


415 
NCURSES_EXPORT
(
FORM
 *Ë
NCURSES_SP_NAME
(
√w_f‹m
Ë(
SCREEN
*, 
FIELD
 **);

418 #ifde‡
__˝lu•lus


	@/usr/include/fstab.h

32 #i‚de‡
_FSTAB_H


33 
	#_FSTAB_H
 1

	)

35 
	~<„©uªs.h
>

48 
	#_PATH_FSTAB
 "/ëc/f°ab"

	)

49 
	#FSTAB
 "/ëc/f°ab"

	)

51 
	#FSTAB_RW
 "rw"

	)

52 
	#FSTAB_RQ
 "rq"

	)

53 
	#FSTAB_RO
 "ro"

	)

54 
	#FSTAB_SW
 "sw"

	)

55 
	#FSTAB_XX
 "xx"

	)

57 
	sf°ab


59 *
	mfs_•ec
;

60 *
	mfs_fûe
;

61 *
	mfs_vf°y≥
;

62 *
	mfs_m¡›s
;

63 c⁄° *
	mfs_ty≥
;

64 
	mfs_‰eq
;

65 
	mfs_∑s¢o
;

69 
__BEGIN_DECLS


71 
f°ab
 *
	$gëf£¡
 (Ë
__THROW
;

72 
f°ab
 *
	$gëfs•ec
 (
__c⁄°
 *
__«me
Ë
__THROW
;

73 
f°ab
 *
	$gëfsfûe
 (
__c⁄°
 *
__«me
Ë
__THROW
;

74 
	$£tf£¡
 (Ë
__THROW
;

75 
	$ídf£¡
 (Ë
__THROW
;

77 
__END_DECLS


	@/usr/include/ft2build.h

52 #i‚de‡
__FT2_BUILD_UNIX_H__


53 
	#__FT2_BUILD_UNIX_H__


	)

56 
	~<‰ìty≥/c⁄fig/·hódî.h
>

	@/usr/include/fts.h

32 #i‚def 
_FTS_H


33 
	#_FTS_H
 1

	)

35 
	~<„©uªs.h
>

36 
	~<sys/ty≥s.h
>

40 #ifde‡
__USE_FILE_OFFSET64


46 
_·£¡
 *
	m·s_cur
;

47 
_·£¡
 *
	m·s_chûd
;

48 
_·£¡
 **
	m·s_¨øy
;

49 
dev_t
 
	m·s_dev
;

50 *
	m·s_∑th
;

51 
	m·s_rfd
;

52 
	m·s_∑thÀn
;

53 
	m·s_nôems
;

54 (*
	m·s_com∑r
) (const *, const *);

56 
	#FTS_COMFOLLOW
 0x0001

	)

57 
	#FTS_LOGICAL
 0x0002

	)

58 
	#FTS_NOCHDIR
 0x0004

	)

59 
	#FTS_NOSTAT
 0x0008

	)

60 
	#FTS_PHYSICAL
 0x0010

	)

61 
	#FTS_SEEDOT
 0x0020

	)

62 
	#FTS_XDEV
 0x0040

	)

63 
	#FTS_WHITEOUT
 0x0080

	)

64 
	#FTS_OPTIONMASK
 0x00f‡

	)

66 
	#FTS_NAMEONLY
 0x0100

	)

67 
	#FTS_STOP
 0x0200

	)

68 
	m·s_›ti⁄s
;

69 } 
	tFTS
;

71 
	s_·£¡
 {

72 
_·£¡
 *
	m·s_cy˛e
;

73 
_·£¡
 *
	m·s_∑ª¡
;

74 
_·£¡
 *
	m·s_lök
;

75 
	m·s_numbî
;

76 *
	m·s_poöãr
;

77 *
	m·s_ac˝©h
;

78 *
	m·s_∑th
;

79 
	m·s_î∫o
;

80 
	m·s_symfd
;

81 
u_sh‹t
 
	m·s_∑thÀn
;

82 
u_sh‹t
 
	m·s_«mñí
;

84 
öo_t
 
	m·s_öo
;

85 
dev_t
 
	m·s_dev
;

86 
∆ök_t
 
	m·s_∆ök
;

88 
	#FTS_ROOTPARENTLEVEL
 -1

	)

89 
	#FTS_ROOTLEVEL
 0

	)

90 
	m·s_Àvñ
;

92 
	#FTS_D
 1

	)

93 
	#FTS_DC
 2

	)

94 
	#FTS_DEFAULT
 3

	)

95 
	#FTS_DNR
 4

	)

96 
	#FTS_DOT
 5

	)

97 
	#FTS_DP
 6

	)

98 
	#FTS_ERR
 7

	)

99 
	#FTS_F
 8

	)

100 
	#FTS_INIT
 9

	)

101 
	#FTS_NS
 10

	)

102 
	#FTS_NSOK
 11

	)

103 
	#FTS_SL
 12

	)

104 
	#FTS_SLNONE
 13

	)

105 
	#FTS_W
 14

	)

106 
u_sh‹t
 
	m·s_öfo
;

108 
	#FTS_DONTCHDIR
 0x01

	)

109 
	#FTS_SYMFOLLOW
 0x02

	)

110 
u_sh‹t
 
	m·s_Êags
;

112 
	#FTS_AGAIN
 1

	)

113 
	#FTS_FOLLOW
 2

	)

114 
	#FTS_NOINSTR
 3

	)

115 
	#FTS_SKIP
 4

	)

116 
u_sh‹t
 
	m·s_ö°r
;

118 
°©
 *
	m·s_°©p
;

119 
	m·s_«me
[1];

120 } 
	tFTSENT
;

122 
__BEGIN_DECLS


123 
FTSENT
 *
·s_chûdªn
 (
FTS
 *, );

124 
·s_˛o£
 (
FTS
 *);

125 
FTS
 *
·s_›í
 (* const *, ,

126 (*)(c⁄° 
FTSENT
 **, const FTSENT **));

127 
FTSENT
 *
	`·s_ªad
 (
FTS
 *);

128 
	$·s_£t
 (
FTS
 *, 
FTSENT
 *, Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/ftw.h

23 #i‚de‡
_FTW_H


24 
	#_FTW_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/°©.h
>

32 
__BEGIN_DECLS


38 
	mFTW_F
,

39 
	#FTW_F
 
FTW_F


	)

40 
	mFTW_D
,

41 
	#FTW_D
 
FTW_D


	)

42 
	mFTW_DNR
,

43 
	#FTW_DNR
 
FTW_DNR


	)

44 
	mFTW_NS
,

45 
	#FTW_NS
 
FTW_NS


	)

47 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


49 
	mFTW_SL
,

50 
	#FTW_SL
 
FTW_SL


	)

53 #ifde‡
__USE_XOPEN_EXTENDED


55 
	mFTW_DP
,

56 
	#FTW_DP
 
FTW_DP


	)

57 
	mFTW_SLN


58 
	#FTW_SLN
 
FTW_SLN


	)

64 #ifde‡
__USE_XOPEN_EXTENDED


68 
	mFTW_PHYS
 = 1,

69 
	#FTW_PHYS
 
FTW_PHYS


	)

70 
	mFTW_MOUNT
 = 2,

72 
	#FTW_MOUNT
 
FTW_MOUNT


	)

73 
	mFTW_CHDIR
 = 4,

74 
	#FTW_CHDIR
 
FTW_CHDIR


	)

75 
	mFTW_DEPTH
 = 8

76 
	#FTW_DEPTH
 
FTW_DEPTH


	)

77 #ifde‡
__USE_GNU


79 
	mFTW_ACTIONRETVAL
 = 16

81 
	#FTW_ACTIONRETVAL
 
FTW_ACTIONRETVAL


	)

85 #ifde‡
__USE_GNU


89 
	mFTW_CONTINUE
 = 0,

91 
	#FTW_CONTINUE
 
FTW_CONTINUE


	)

92 
	mFTW_STOP
 = 1,

94 
	#FTW_STOP
 
FTW_STOP


	)

95 
	mFTW_SKIP_SUBTREE
 = 2,

98 
	#FTW_SKIP_SUBTREE
 
FTW_SKIP_SUBTREE


	)

99 
	mFTW_SKIP_SIBLINGS
 = 3,

101 
	#FTW_SKIP_SIBLINGS
 
FTW_SKIP_SIBLINGS


	)

106 
	sFTW


108 
	mba£
;

109 
	mÀvñ
;

115 (*
	t__·w_func_t
Ë(
	t__c⁄°
 *
	t__fûíame
,

116 
	t__c⁄°
 
	t°©
 *
	t__°©us
, 
	t__Êag
);

117 #ifde‡
__USE_LARGEFILE64


118 (*
	t__·w64_func_t
Ë(
	t__c⁄°
 *
	t__fûíame
,

119 
	t__c⁄°
 
	t°©64
 *
	t__°©us
, 
	t__Êag
);

121 #ifde‡
__USE_XOPEN_EXTENDED


122 (*
	t__n·w_func_t
Ë(
	t__c⁄°
 *
	t__fûíame
,

123 
	t__c⁄°
 
	t°©
 *
	t__°©us
, 
	t__Êag
,

124 
	tFTW
 *
	t__öfo
);

125 #ifde‡
__USE_LARGEFILE64


126 (*
	t__n·w64_func_t
Ë(
	t__c⁄°
 *
	t__fûíame
,

127 
	t__c⁄°
 
	t°©64
 *
	t__°©us
,

128 
	t__Êag
, 
	tFTW
 *
	t__öfo
);

136 #i‚de‡
__USE_FILE_OFFSET64


137 
	$·w
 (
__c⁄°
 *
__dú
, 
__·w_func_t
 
__func
, 
__des¸ùt‹s
)

138 
	`__n⁄nuŒ
 ((1, 2));

140 #ifde‡
__REDIRECT


141 
	`__REDIRECT
 (
·w
, (
__c⁄°
 *
__dú
, 
__·w_func_t
 
__func
,

142 
__des¸ùt‹s
), 
·w64
Ë
	`__n⁄nuŒ
 ((1, 2));

144 
	#·w
 
·w64


	)

147 #ifde‡
__USE_LARGEFILE64


148 
	$·w64
 (
__c⁄°
 *
__dú
, 
__·w64_func_t
 
__func
,

149 
__des¸ùt‹s
Ë
	`__n⁄nuŒ
 ((1, 2));

152 #ifde‡
__USE_XOPEN_EXTENDED


158 #i‚de‡
__USE_FILE_OFFSET64


159 
	$n·w
 (
__c⁄°
 *
__dú
, 
__n·w_func_t
 
__func
, 
__des¸ùt‹s
,

160 
__Êag
Ë
	`__n⁄nuŒ
 ((1, 2));

162 #ifde‡
__REDIRECT


163 
	`__REDIRECT
 (
n·w
, (
__c⁄°
 *
__dú
, 
__n·w_func_t
 
__func
,

164 
__des¸ùt‹s
, 
__Êag
), 
n·w64
)

165 
	`__n⁄nuŒ
 ((1, 2));

167 
	#n·w
 
n·w64


	)

170 #ifde‡
__USE_LARGEFILE64


171 
	$n·w64
 (
__c⁄°
 *
__dú
, 
__n·w64_func_t
 
__func
,

172 
__des¸ùt‹s
, 
__Êag
Ë
	`__n⁄nuŒ
 ((1, 2));

176 
__END_DECLS


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/gettext-po.h

18 #i‚de‡
_GETTEXT_PO_H


19 
	#_GETTEXT_PO_H
 1

	)

21 
	~<°dlib.h
>

23 #ifde‡
__˝lu•lus


31 
	#LIBGETTEXTPO_VERSION
 0x001201

	)

32 
libgëãxço_vîsi⁄
;

37 
po_fûe
 *
	tpo_fûe_t
;

41 
po_mesßge_ôî©‹
 *
	tpo_mesßge_ôî©‹_t
;

44 
po_mesßge
 *
	tpo_mesßge_t
;

47 
po_fûïos
 *
	tpo_fûïos_t
;

50 
	spo_îr‹_h™dÀr


56 (*
	gîr‹
Ë(
	g°©us
, 
	gî∫um
,

57 c⁄° *
	gf‹m©
, ...)

58 #i‡((
__GNUC__
 =3 && 
__GNUC_MINOR__
 >1Ë|| __GNUC__ > 3Ë&& !
__STRICT_ANSI__


59 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4)))

68 (*
	gîr‹_©_löe
Ë(
	g°©us
, 
	gî∫um
,

69 c⁄° *
	gfûíame
, 
	glöío
,

70 c⁄° *
	gf‹m©
, ...)

71 #i‡((
__GNUC__
 =3 && 
__GNUC_MINOR__
 >1Ë|| __GNUC__ > 3Ë&& !
__STRICT_ANSI__


72 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 5, 6)))

78 (*
	gmu…ûöe_w¨nög
Ë(*
	g¥efix
, *
	gmesßge
);

84 (*
	gmu…ûöe_îr‹
Ë(*
	g¥efix
, *
	gmesßge
);

86 c⁄° 
	tpo_îr‹_h™dÀr
 *
	tpo_îr‹_h™dÀr_t
;

89 
	#PO_SEVERITY_WARNING
 0

	)

90 
	#PO_SEVERITY_ERROR
 1

	)

91 
	#PO_SEVERITY_FATAL_ERROR
 2

	)

92 
	spo_xîr‹_h™dÀr


103 (*
	gxîr‹
Ë(
	g£vîôy
,

104 
po_mesßge_t
 
	gmesßge
,

105 c⁄° *
	gfûíame
, 
size_t
 
	glöío
, size_à
	gcﬁumn
,

106 
	gmu…ûöe_p
, c⁄° *
	gmesßge_ãxt
);

111 (*
	gxîr‹2
Ë(
	g£vîôy
,

112 
po_mesßge_t
 
	gmesßge1
,

113 c⁄° *
	gfûíame1
, 
size_t
 
	glöío1
, size_à
	gcﬁumn1
,

114 
	gmu…ûöe_p1
, c⁄° *
	gmesßge_ãxt1
,

115 
po_mesßge_t
 
	gmesßge2
,

116 c⁄° *
	gfûíame2
, 
size_t
 
	glöío2
, size_à
	gcﬁumn2
,

117 
	gmu…ûöe_p2
, c⁄° *
	gmesßge_ãxt2
);

119 c⁄° 
	tpo_xîr‹_h™dÀr
 *
	tpo_xîr‹_h™dÀr_t
;

131 
po_fûe_t
 
po_fûe_¸óã
 ();

135 
	#po_fûe_ªad
 
po_fûe_ªad_v3


	)

136 
po_fûe_t
 
po_fûe_ªad
 (c⁄° *
fûíame
,

137 
po_xîr‹_h™dÀr_t
 
h™dÀr
);

141 
	#po_fûe_wrôe
 
po_fûe_wrôe_v2


	)

142 
po_fûe_t
 
po_fûe_wrôe
 (po_fûe_à
fûe
, c⁄° *
fûíame
,

143 
po_xîr‹_h™dÀr_t
 
h™dÀr
);

146 
po_fûe_‰ì
 (
po_fûe_t
 
fûe
);

149 c⁄° * c⁄° * 
po_fûe_domaös
 (
po_fûe_t
 
fûe
);

157 c⁄° * 
po_fûe_domaö_hódî
 (
po_fûe_t
 
fûe
, c⁄° *
domaö
);

162 * 
po_hódî_fõld
 (c⁄° *
hódî
, c⁄° *
fõld
);

167 * 
po_hódî_£t_fõld
 (c⁄° *
hódî
, c⁄° *
fõld
, c⁄° *
vÆue
);

174 
po_mesßge_ôî©‹_t
 
po_mesßge_ôî©‹
 (
po_fûe_t
 
fûe
, c⁄° *
domaö
);

177 
po_mesßge_ôî©‹_‰ì
 (
po_mesßge_ôî©‹_t
 
ôî©‹
);

181 
po_mesßge_t
 
po_√xt_mesßge
 (
po_mesßge_ôî©‹_t
 
ôî©‹
);

186 
po_mesßge_ö£π
 (
po_mesßge_ôî©‹_t
 
ôî©‹
, 
po_mesßge_t
 
mesßge
);

193 
po_mesßge_t
 
po_mesßge_¸óã
 ();

197 c⁄° * 
po_mesßge_msg˘xt
 (
po_mesßge_t
 
mesßge
);

201 
po_mesßge_£t_msg˘xt
 (
po_mesßge_t
 
mesßge
, c⁄° *
msg˘xt
);

204 c⁄° * 
po_mesßge_msgid
 (
po_mesßge_t
 
mesßge
);

207 
po_mesßge_£t_msgid
 (
po_mesßge_t
 
mesßge
, c⁄° *
msgid
);

211 c⁄° * 
po_mesßge_msgid_∂uøl
 (
po_mesßge_t
 
mesßge
);

215 
po_mesßge_£t_msgid_∂uøl
 (
po_mesßge_t
 
mesßge
, c⁄° *
msgid_∂uøl
);

219 c⁄° * 
po_mesßge_msg°r
 (
po_mesßge_t
 
mesßge
);

223 
po_mesßge_£t_msg°r
 (
po_mesßge_t
 
mesßge
, c⁄° *
msg°r
);

227 c⁄° * 
po_mesßge_msg°r_∂uøl
 (
po_mesßge_t
 
mesßge
, 
ödex
);

231 
po_mesßge_£t_msg°r_∂uøl
 (
po_mesßge_t
 
mesßge
, 
ödex
, c⁄° *
msg°r
);

234 c⁄° * 
po_mesßge_commíts
 (
po_mesßge_t
 
mesßge
);

238 
po_mesßge_£t_commíts
 (
po_mesßge_t
 
mesßge
, c⁄° *
commíts
);

241 c⁄° * 
po_mesßge_exåa˘ed_commíts
 (
po_mesßge_t
 
mesßge
);

245 
po_mesßge_£t_exåa˘ed_commíts
 (
po_mesßge_t
 
mesßge
, c⁄° *
commíts
);

249 
po_fûïos_t
 
po_mesßge_fûïos
 (
po_mesßge_t
 
mesßge
, 
i
);

254 
po_mesßge_ªmove_fûïos
 (
po_mesßge_t
 
mesßge
, 
i
);

261 
po_mesßge_add_fûïos
 (
po_mesßge_t
 
mesßge
, c⁄° *
fûe
, 
size_t
 
°¨t_löe
);

264 c⁄° * 
po_mesßge_¥ev_msg˘xt
 (
po_mesßge_t
 
mesßge
);

267 
po_mesßge_£t_¥ev_msg˘xt
 (
po_mesßge_t
 
mesßge
, c⁄° *
¥ev_msg˘xt
);

271 c⁄° * 
po_mesßge_¥ev_msgid
 (
po_mesßge_t
 
mesßge
);

275 
po_mesßge_£t_¥ev_msgid
 (
po_mesßge_t
 
mesßge
, c⁄° *
¥ev_msgid
);

279 c⁄° * 
po_mesßge_¥ev_msgid_∂uøl
 (
po_mesßge_t
 
mesßge
);

283 
po_mesßge_£t_¥ev_msgid_∂uøl
 (
po_mesßge_t
 
mesßge
, c⁄° *
¥ev_msgid_∂uøl
);

286 
po_mesßge_is_obsﬁëe
 (
po_mesßge_t
 
mesßge
);

289 
po_mesßge_£t_obsﬁëe
 (
po_mesßge_t
 
mesßge
, 
obsﬁëe
);

292 
po_mesßge_is_fuzzy
 (
po_mesßge_t
 
mesßge
);

295 
po_mesßge_£t_fuzzy
 (
po_mesßge_t
 
mesßge
, 
fuzzy
);

299 
po_mesßge_is_f‹m©
 (
po_mesßge_t
 
mesßge
, c⁄° *
f‹m©_ty≥
);

302 
po_mesßge_£t_f‹m©
 (
po_mesßge_t
 
mesßge
, c⁄° *
f‹m©_ty≥
, 
vÆue
);

306 
po_mesßge_is_ønge
 (
po_mesßge_t
 
mesßge
, *
möp
, *
maxp
);

311 
po_mesßge_£t_ønge
 (
po_mesßge_t
 
mesßge
, 
mö
, 
max
);

317 c⁄° * 
po_fûïos_fûe
 (
po_fûïos_t
 
fûïos
);

321 
size_t
 
po_fûïos_°¨t_löe
 (
po_fûïos_t
 
fûïos
);

327 c⁄° * c⁄° * 
po_f‹m©_li°
 ();

332 c⁄° * 
po_f‹m©_¥ëty_«me
 (c⁄° *
f‹m©_ty≥
);

339 
po_fûe_check_Æl
 (
po_fûe_t
 
fûe
, 
po_xîr‹_h™dÀr_t
 
h™dÀr
);

344 
po_mesßge_check_Æl
 (
po_mesßge_t
 
mesßge
, 
po_mesßge_ôî©‹_t
 
ôî©‹
, 
po_xîr‹_h™dÀr_t
 
h™dÀr
);

349 
	#po_mesßge_check_f‹m©
 
po_mesßge_check_f‹m©_v2


	)

350 
po_mesßge_check_f‹m©
 (
po_mesßge_t
 
mesßge
, 
po_xîr‹_h™dÀr_t
 
h™dÀr
);

353 #ifde‡
__˝lu•lus


	@/usr/include/glob.h

20 #i‚def 
_GLOB_H


21 
	#_GLOB_H
 1

	)

23 
	~<sys/cdefs.h
>

25 
	g__BEGIN_DECLS


28 #i‚de‡
__size_t


29 
__SIZE_TYPE__
 
	t__size_t
;

30 #i‡
deföed
 
__USE_XOPEN
 || 
__USE_XOPEN2K8


31 
__SIZE_TYPE__
 
	tsize_t
;

36 #unde‡
__size_t


37 
	#__size_t
 
size_t


	)

41 
	#GLOB_ERR
 (1 << 0)

	)

42 
	#GLOB_MARK
 (1 << 1)

	)

43 
	#GLOB_NOSORT
 (1 << 2)

	)

44 
	#GLOB_DOOFFS
 (1 << 3)

	)

45 
	#GLOB_NOCHECK
 (1 << 4)

	)

46 
	#GLOB_APPEND
 (1 << 5)

	)

47 
	#GLOB_NOESCAPE
 (1 << 6)

	)

48 
	#GLOB_PERIOD
 (1 << 7)

	)

50 #i‡!
deföed
 
__USE_POSIX2
 || deföed 
__USE_BSD
 || deföed 
__USE_GNU


51 
	#GLOB_MAGCHAR
 (1 << 8)

	)

52 
	#GLOB_ALTDIRFUNC
 (1 << 9)

	)

53 
	#GLOB_BRACE
 (1 << 10)

	)

54 
	#GLOB_NOMAGIC
 (1 << 11)

	)

55 
	#GLOB_TILDE
 (1 << 12)

	)

56 
	#GLOB_ONLYDIR
 (1 << 13)

	)

57 
	#GLOB_TILDE_CHECK
 (1 << 14)

	)

59 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

60 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

61 
GLOB_PERIOD
|
GLOB_ALTDIRFUNC
|
GLOB_BRACE
| \

62 
GLOB_NOMAGIC
|
GLOB_TILDE
|
GLOB_ONLYDIR
|
GLOB_TILDE_CHECK
)

	)

64 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

65 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

66 
GLOB_PERIOD
)

	)

70 
	#GLOB_NOSPACE
 1

	)

71 
	#GLOB_ABORTED
 2

	)

72 
	#GLOB_NOMATCH
 3

	)

73 
	#GLOB_NOSYS
 4

	)

74 #ifde‡
__USE_GNU


77 
	#GLOB_ABEND
 
GLOB_ABORTED


	)

81 #ifde‡
__USE_GNU


82 
	g°©
;

86 
__size_t
 
	mgl_∑thc
;

87 **
	mgl_∑thv
;

88 
__size_t
 
	mgl_offs
;

89 
	mgl_Êags
;

93 (*
	mgl_˛o£dú
) (*);

94 #ifde‡
__USE_GNU


95 
	mdúít
 *(*
	mgl_ªaddú
) (*);

97 *(*
	mgl_ªaddú
) (*);

99 *(*
	mgl_›ídú
Ë(
__c⁄°
 *);

100 #ifde‡
__USE_GNU


101 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©
 *__restrict);

102 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©
 *__restrict);

104 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

105 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

107 } 
	tglob_t
;

109 #ifde‡
__USE_LARGEFILE64


110 #ifde‡
__USE_GNU


111 
	g°©64
;

115 
__size_t
 
	mgl_∑thc
;

116 **
	mgl_∑thv
;

117 
__size_t
 
	mgl_offs
;

118 
	mgl_Êags
;

122 (*
	mgl_˛o£dú
) (*);

123 #ifde‡
__USE_GNU


124 
	mdúít64
 *(*
	mgl_ªaddú
) (*);

126 *(*
	mgl_ªaddú
) (*);

128 *(*
	mgl_›ídú
Ë(
__c⁄°
 *);

129 #ifde‡
__USE_GNU


130 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©64
 *__restrict);

131 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©64
 *__restrict);

133 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

134 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

136 } 
	tglob64_t
;

147 #i‡!
deföed
 
__USE_FILE_OFFSET64


148 
glob
 (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

149 (*
__îrfunc
Ë(
__c⁄°
 *, ),

150 
glob_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

153 
	$glob‰ì
 (
glob_t
 *
__pglob
Ë
__THROW
;

155 
	`__REDIRECT_NTH
 (
glob
, (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
,

156 
__Êags
,

157 (*
__îrfunc
Ë(
__c⁄°
 *, ),

158 
glob_t
 *
__ª°ri˘
 
__pglob
), 
glob64
);

160 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
), 
glob‰ì64
);

163 #ifde‡
__USE_LARGEFILE64


164 
	`glob64
 (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

165 (*
__îrfunc
Ë(
__c⁄°
 *, ),

166 
glob64_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

168 
	$glob‰ì64
 (
glob64_t
 *
__pglob
Ë
__THROW
;

172 #ifde‡
__USE_GNU


178 
	$glob_∑âîn_p
 (
__c⁄°
 *
__∑âîn
, 
__quŸe
Ë
__THROW
;

181 
__END_DECLS


	@/usr/include/gnu-versions.h

20 #i‚de‡
_GNU_VERSIONS_H


21 
	#_GNU_VERSIONS_H
 1

	)

47 
	#_GNU_OBSTACK_INTERFACE_VERSION
 1

	)

48 
	#_GNU_REGEX_INTERFACE_VERSION
 1

	)

49 
	#_GNU_GLOB_INTERFACE_VERSION
 1

	)

50 
	#_GNU_GETOPT_INTERFACE_VERSION
 2

	)

	@/usr/include/grp.h

24 #i‚def 
_GRP_H


25 
	#_GRP_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 
	#__√ed_size_t


	)

34 
	~<°ddef.h
>

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

44 
	sgroup


46 *
	mgr_«me
;

47 *
	mgr_∑sswd
;

48 
__gid_t
 
	mgr_gid
;

49 **
	mgr_mem
;

53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


54 
	#__√ed_FILE


	)

55 
	~<°dio.h
>

59 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


64 
£tgª¡
 ();

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

68 || 
deföed
 
__USE_XOPEN2K8


73 
ídgª¡
 ();

79 
group
 *
gëgª¡
 ();

82 #ifdef 
__USE_SVID


89 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

92 #ifde‡
__USE_GNU


99 
putgª¡
 (
__c⁄°
 
group
 *
__ª°ri˘
 
__p
,

100 
FILE
 *
__ª°ri˘
 
__f
);

107 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

113 
group
 *
gëg∫am
 (
__c⁄°
 *
__«me
);

115 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


117 #ifde‡
__USE_MISC


120 
	#NSS_BUFLEN_GROUP
 1024

	)

136 #ifde‡
__USE_GNU


137 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

138 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

139 
group
 **
__ª°ri˘
 
__ªsu…
);

146 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
group
 **
__ª°ri˘
 
__ªsu…
);

154 
gëg∫am_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

155 
group
 *
__ª°ri˘
 
__ªsu…buf
,

156 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

157 
group
 **
__ª°ri˘
 
__ªsu…
);

159 #ifdef 
__USE_SVID


167 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

168 
group
 *
__ª°ri˘
 
__ªsu…buf
,

169 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

170 
group
 **
__ª°ri˘
 
__ªsu…
);

176 #ifdef 
__USE_BSD


178 
	#__√ed_size_t


	)

179 
	~<°ddef.h
>

182 
	$£tgroups
 (
size_t
 
__n
, 
__c⁄°
 
__gid_t
 *
__groups
Ë
__THROW
;

192 
	`gëgrou∂i°
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
,

193 
__gid_t
 *
__groups
, *
__ngroups
);

203 
	`öôgroups
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
);

207 
__END_DECLS


	@/usr/include/gshadow.h

21 #i‚de‡
_GSHADOW_H


22 
	#_GSHADOW_H
 1

	)

24 
	~<„©uªs.h
>

26 
	~<∑ths.h
>

28 
	#__√ed_FILE


	)

29 
	~<°dio.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	#GSHADOW
 
_PATH_GSHADOW


	)

37 
__BEGIN_DECLS


40 
	ssgΩ


42 *
	msg_«mp
;

43 *
	msg_∑sswd
;

44 **
	msg_adm
;

45 **
	msg_mem
;

55 
£tsgít
 ();

63 
ídsgít
 ();

71 
sgΩ
 *
gësgít
 ();

79 
sgΩ
 *
gësg«m
 (
__c⁄°
 *
__«me
);

87 
sgΩ
 *
sgësgít
 (
__c⁄°
 *
__°rög
);

95 
sgΩ
 *
fgësgít
 (
FILE
 *
__°ªam
);

103 
putsgít
 (
__c⁄°
 
sgΩ
 *
__g
, 
FILE
 *
__°ªam
);

106 #ifde‡
__USE_MISC


113 
gësgít_r
 (
sgΩ
 *
__ªsu…_buf
, *
__buf„r
,

114 
size_t
 
__buÊí
, 
sgΩ
 **
__ªsu…
);

116 
gësg«m_r
 (
__c⁄°
 *
__«me
, 
sgΩ
 *
__ªsu…_buf
,

117 *
__buf„r
, 
size_t
 
__buÊí
,

118 
sgΩ
 **
__ªsu…
);

120 
sgësgít_r
 (
__c⁄°
 *
__°rög
, 
sgΩ
 *
__ªsu…_buf
,

121 *
__buf„r
, 
size_t
 
__buÊí
,

122 
sgΩ
 **
__ªsu…
);

124 
fgësgít_r
 (
FILE
 *
__°ªam
, 
sgΩ
 *
__ªsu…_buf
,

125 *
__buf„r
, 
size_t
 
__buÊí
,

126 
sgΩ
 **
__ªsu…
);

129 
	g__END_DECLS


	@/usr/include/iconv.h

19 #i‚de‡
_ICONV_H


20 
	#_ICONV_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
__BEGIN_DECLS


30 *
	tic⁄v_t
;

38 
ic⁄v_t
 
ic⁄v_›í
 (
__c⁄°
 *
__tocode
, __c⁄° *
__‰omcode
);

43 
size_t
 
ic⁄v
 (
ic⁄v_t
 
__cd
, **
__ª°ri˘
 
__öbuf
,

44 
size_t
 *
__ª°ri˘
 
__öbyã¶e·
,

45 **
__ª°ri˘
 
__outbuf
,

46 
size_t
 *
__ª°ri˘
 
__outbyã¶e·
);

52 
ic⁄v_˛o£
 (
ic⁄v_t
 
__cd
);

54 
	g__END_DECLS


	@/usr/include/ieee754.h

19 #i‚de‡
_IEEE754_H


21 
	#_IEEE754_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<ídün.h
>

26 
__BEGIN_DECLS


28 
	uõì754_Êﬂt


30 
	mf
;

35 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


36 
	m√g©ive
:1;

37 
	mexp⁄ít
:8;

38 
	mm™tisß
:23;

40 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


41 
	mm™tisß
:23;

42 
	mexp⁄ít
:8;

43 
	m√g©ive
:1;

45 } 
	mõì
;

50 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


51 
	m√g©ive
:1;

52 
	mexp⁄ít
:8;

53 
	mquõt_«n
:1;

54 
	mm™tisß
:22;

56 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


57 
	mm™tisß
:22;

58 
	mquõt_«n
:1;

59 
	mexp⁄ít
:8;

60 
	m√g©ive
:1;

62 } 
	mõì_«n
;

65 
	#IEEE754_FLOAT_BIAS
 0x7‡

	)

68 
	uõì754_doubÀ


70 
	md
;

75 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
	m√g©ive
:1;

77 
	mexp⁄ít
:11;

79 
	mm™tisß0
:20;

80 
	mm™tisß1
:32;

82 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


83 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


84 
	mm™tisß0
:20;

85 
	mexp⁄ít
:11;

86 
	m√g©ive
:1;

87 
	mm™tisß1
:32;

90 
	mm™tisß1
:32;

91 
	mm™tisß0
:20;

92 
	mexp⁄ít
:11;

93 
	m√g©ive
:1;

96 } 
	mõì
;

101 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


102 
	m√g©ive
:1;

103 
	mexp⁄ít
:11;

104 
	mquõt_«n
:1;

106 
	mm™tisß0
:19;

107 
	mm™tisß1
:32;

109 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


110 
	mm™tisß0
:19;

111 
	mquõt_«n
:1;

112 
	mexp⁄ít
:11;

113 
	m√g©ive
:1;

114 
	mm™tisß1
:32;

117 
	mm™tisß1
:32;

118 
	mm™tisß0
:19;

119 
	mquõt_«n
:1;

120 
	mexp⁄ít
:11;

121 
	m√g©ive
:1;

124 } 
	mõì_«n
;

127 
	#IEEE754_DOUBLE_BIAS
 0x3f‡

	)

130 
	uõì854_l⁄g_doubÀ


132 
	md
;

137 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


138 
	m√g©ive
:1;

139 
	mexp⁄ít
:15;

140 
	mem±y
:16;

141 
	mm™tisß0
:32;

142 
	mm™tisß1
:32;

144 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


145 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


146 
	mexp⁄ít
:15;

147 
	m√g©ive
:1;

148 
	mem±y
:16;

149 
	mm™tisß0
:32;

150 
	mm™tisß1
:32;

152 
	mm™tisß1
:32;

153 
	mm™tisß0
:32;

154 
	mexp⁄ít
:15;

155 
	m√g©ive
:1;

156 
	mem±y
:16;

159 } 
	mõì
;

164 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


165 
	m√g©ive
:1;

166 
	mexp⁄ít
:15;

167 
	mem±y
:16;

168 
	m⁄e
:1;

169 
	mquõt_«n
:1;

170 
	mm™tisß0
:30;

171 
	mm™tisß1
:32;

173 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


174 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


175 
	mexp⁄ít
:15;

176 
	m√g©ive
:1;

177 
	mem±y
:16;

178 
	mm™tisß0
:30;

179 
	mquõt_«n
:1;

180 
	m⁄e
:1;

181 
	mm™tisß1
:32;

183 
	mm™tisß1
:32;

184 
	mm™tisß0
:30;

185 
	mquõt_«n
:1;

186 
	m⁄e
:1;

187 
	mexp⁄ít
:15;

188 
	m√g©ive
:1;

189 
	mem±y
:16;

192 } 
	mõì_«n
;

195 
	#IEEE854_LONG_DOUBLE_BIAS
 0x3fff

	)

197 
	g__END_DECLS


	@/usr/include/ifaddrs.h

20 #i‚de‡
_IFADDRS_H


21 
	#_IFADDRS_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/sockë.h
>

26 
__BEGIN_DECLS


30 
	siÁddrs


32 
iÁddrs
 *
	miÁ_√xt
;

34 *
	miÁ_«me
;

35 
	miÁ_Êags
;

37 
sockaddr
 *
	miÁ_addr
;

38 
sockaddr
 *
	miÁ_√tmask
;

45 
sockaddr
 *
	mifu_brﬂdaddr
;

46 
sockaddr
 *
	mifu_d°addr
;

47 } 
	miÁ_ifu
;

50 #i‚de‡
iÁ_brﬂdaddr


51 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

53 #i‚de‡
iÁ_d°addr


54 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

57 *
	miÁ_d©a
;

67 
	$gëiÁddrs
 (
iÁddrs
 **
__iÁp
Ë
__THROW
;

70 
	$‰ìiÁddrs
 (
iÁddrs
 *
__iÁ
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/langinfo.h

20 #i‚de‡
_LANGINFO_H


21 
	#_LANGINFO_H
 1

	)

24 
	~<∆_ty≥s.h
>

26 
	~<bôs/loˇÀ.h
>

29 
	g__BEGIN_DECLS


35 
	#_NL_ITEM
(
ˇãg‹y
, 
ödex
Ë(((ˇãg‹yË<< 16Ë| (ödex))

	)

38 
	#_NL_ITEM_CATEGORY
(
ôem
Ë((Ë(ôemË>> 16)

	)

39 
	#_NL_ITEM_INDEX
(
ôem
Ë((Ë(ôemË& 0xffff)

	)

47 
	mABDAY_1
 = 
_NL_ITEM
 (
__LC_TIME
, 0),

48 
	#ABDAY_1
 
ABDAY_1


	)

49 
	mABDAY_2
,

50 
	#ABDAY_2
 
ABDAY_2


	)

51 
	mABDAY_3
,

52 
	#ABDAY_3
 
ABDAY_3


	)

53 
	mABDAY_4
,

54 
	#ABDAY_4
 
ABDAY_4


	)

55 
	mABDAY_5
,

56 
	#ABDAY_5
 
ABDAY_5


	)

57 
	mABDAY_6
,

58 
	#ABDAY_6
 
ABDAY_6


	)

59 
	mABDAY_7
,

60 
	#ABDAY_7
 
ABDAY_7


	)

63 
	mDAY_1
,

64 
	#DAY_1
 
DAY_1


	)

65 
	mDAY_2
,

66 
	#DAY_2
 
DAY_2


	)

67 
	mDAY_3
,

68 
	#DAY_3
 
DAY_3


	)

69 
	mDAY_4
,

70 
	#DAY_4
 
DAY_4


	)

71 
	mDAY_5
,

72 
	#DAY_5
 
DAY_5


	)

73 
	mDAY_6
,

74 
	#DAY_6
 
DAY_6


	)

75 
	mDAY_7
,

76 
	#DAY_7
 
DAY_7


	)

79 
	mABMON_1
,

80 
	#ABMON_1
 
ABMON_1


	)

81 
	mABMON_2
,

82 
	#ABMON_2
 
ABMON_2


	)

83 
	mABMON_3
,

84 
	#ABMON_3
 
ABMON_3


	)

85 
	mABMON_4
,

86 
	#ABMON_4
 
ABMON_4


	)

87 
	mABMON_5
,

88 
	#ABMON_5
 
ABMON_5


	)

89 
	mABMON_6
,

90 
	#ABMON_6
 
ABMON_6


	)

91 
	mABMON_7
,

92 
	#ABMON_7
 
ABMON_7


	)

93 
	mABMON_8
,

94 
	#ABMON_8
 
ABMON_8


	)

95 
	mABMON_9
,

96 
	#ABMON_9
 
ABMON_9


	)

97 
	mABMON_10
,

98 
	#ABMON_10
 
ABMON_10


	)

99 
	mABMON_11
,

100 
	#ABMON_11
 
ABMON_11


	)

101 
	mABMON_12
,

102 
	#ABMON_12
 
ABMON_12


	)

105 
	mMON_1
,

106 
	#MON_1
 
MON_1


	)

107 
	mMON_2
,

108 
	#MON_2
 
MON_2


	)

109 
	mMON_3
,

110 
	#MON_3
 
MON_3


	)

111 
	mMON_4
,

112 
	#MON_4
 
MON_4


	)

113 
	mMON_5
,

114 
	#MON_5
 
MON_5


	)

115 
	mMON_6
,

116 
	#MON_6
 
MON_6


	)

117 
	mMON_7
,

118 
	#MON_7
 
MON_7


	)

119 
	mMON_8
,

120 
	#MON_8
 
MON_8


	)

121 
	mMON_9
,

122 
	#MON_9
 
MON_9


	)

123 
	mMON_10
,

124 
	#MON_10
 
MON_10


	)

125 
	mMON_11
,

126 
	#MON_11
 
MON_11


	)

127 
	mMON_12
,

128 
	#MON_12
 
MON_12


	)

130 
	mAM_STR
,

131 
	#AM_STR
 
AM_STR


	)

132 
	mPM_STR
,

133 
	#PM_STR
 
PM_STR


	)

135 
	mD_T_FMT
,

136 
	#D_T_FMT
 
D_T_FMT


	)

137 
	mD_FMT
,

138 
	#D_FMT
 
D_FMT


	)

139 
	mT_FMT
,

140 
	#T_FMT
 
T_FMT


	)

141 
	mT_FMT_AMPM
,

142 
	#T_FMT_AMPM
 
T_FMT_AMPM


	)

144 
	mERA
,

145 
	#ERA
 
ERA


	)

146 
	m__ERA_YEAR
,

147 #ifde‡
__USE_GNU


148 
	#ERA_YEAR
 
__ERA_YEAR


	)

150 
	mERA_D_FMT
,

151 
	#ERA_D_FMT
 
ERA_D_FMT


	)

152 
	mALT_DIGITS
,

153 
	#ALT_DIGITS
 
ALT_DIGITS


	)

154 
	mERA_D_T_FMT
,

155 
	#ERA_D_T_FMT
 
ERA_D_T_FMT


	)

156 
	mERA_T_FMT
,

157 
	#ERA_T_FMT
 
ERA_T_FMT


	)

159 
	m_NL_TIME_ERA_NUM_ENTRIES
,

160 
	m_NL_TIME_ERA_ENTRIES
,

162 
	m_NL_WABDAY_1
,

163 
	m_NL_WABDAY_2
,

164 
	m_NL_WABDAY_3
,

165 
	m_NL_WABDAY_4
,

166 
	m_NL_WABDAY_5
,

167 
	m_NL_WABDAY_6
,

168 
	m_NL_WABDAY_7
,

171 
	m_NL_WDAY_1
,

172 
	m_NL_WDAY_2
,

173 
	m_NL_WDAY_3
,

174 
	m_NL_WDAY_4
,

175 
	m_NL_WDAY_5
,

176 
	m_NL_WDAY_6
,

177 
	m_NL_WDAY_7
,

180 
	m_NL_WABMON_1
,

181 
	m_NL_WABMON_2
,

182 
	m_NL_WABMON_3
,

183 
	m_NL_WABMON_4
,

184 
	m_NL_WABMON_5
,

185 
	m_NL_WABMON_6
,

186 
	m_NL_WABMON_7
,

187 
	m_NL_WABMON_8
,

188 
	m_NL_WABMON_9
,

189 
	m_NL_WABMON_10
,

190 
	m_NL_WABMON_11
,

191 
	m_NL_WABMON_12
,

194 
	m_NL_WMON_1
,

195 
	m_NL_WMON_2
,

196 
	m_NL_WMON_3
,

197 
	m_NL_WMON_4
,

198 
	m_NL_WMON_5
,

199 
	m_NL_WMON_6
,

200 
	m_NL_WMON_7
,

201 
	m_NL_WMON_8
,

202 
	m_NL_WMON_9
,

203 
	m_NL_WMON_10
,

204 
	m_NL_WMON_11
,

205 
	m_NL_WMON_12
,

207 
	m_NL_WAM_STR
,

208 
	m_NL_WPM_STR
,

210 
	m_NL_WD_T_FMT
,

211 
	m_NL_WD_FMT
,

212 
	m_NL_WT_FMT
,

213 
	m_NL_WT_FMT_AMPM
,

215 
	m_NL_WERA_YEAR
,

216 
	m_NL_WERA_D_FMT
,

217 
	m_NL_WALT_DIGITS
,

218 
	m_NL_WERA_D_T_FMT
,

219 
	m_NL_WERA_T_FMT
,

221 
	m_NL_TIME_WEEK_NDAYS
,

222 
	m_NL_TIME_WEEK_1STDAY
,

223 
	m_NL_TIME_WEEK_1STWEEK
,

224 
	m_NL_TIME_FIRST_WEEKDAY
,

225 
	m_NL_TIME_FIRST_WORKDAY
,

226 
	m_NL_TIME_CAL_DIRECTION
,

227 
	m_NL_TIME_TIMEZONE
,

229 
	m_DATE_FMT
,

230 
	#_DATE_FMT
 
_DATE_FMT


	)

231 
	m_NL_W_DATE_FMT
,

233 
	m_NL_TIME_CODESET
,

235 
	m_NL_NUM_LC_TIME
,

240 
	m_NL_COLLATE_NRULES
 = 
_NL_ITEM
 (
__LC_COLLATE
, 0),

241 
	m_NL_COLLATE_RULESETS
,

242 
	m_NL_COLLATE_TABLEMB
,

243 
	m_NL_COLLATE_WEIGHTMB
,

244 
	m_NL_COLLATE_EXTRAMB
,

245 
	m_NL_COLLATE_INDIRECTMB
,

246 
	m_NL_COLLATE_GAP1
,

247 
	m_NL_COLLATE_GAP2
,

248 
	m_NL_COLLATE_GAP3
,

249 
	m_NL_COLLATE_TABLEWC
,

250 
	m_NL_COLLATE_WEIGHTWC
,

251 
	m_NL_COLLATE_EXTRAWC
,

252 
	m_NL_COLLATE_INDIRECTWC
,

253 
	m_NL_COLLATE_SYMB_HASH_SIZEMB
,

254 
	m_NL_COLLATE_SYMB_TABLEMB
,

255 
	m_NL_COLLATE_SYMB_EXTRAMB
,

256 
	m_NL_COLLATE_COLLSEQMB
,

257 
	m_NL_COLLATE_COLLSEQWC
,

258 
	m_NL_COLLATE_CODESET
,

259 
	m_NL_NUM_LC_COLLATE
,

264 
	m_NL_CTYPE_CLASS
 = 
_NL_ITEM
 (
__LC_CTYPE
, 0),

265 
	m_NL_CTYPE_TOUPPER
,

266 
	m_NL_CTYPE_GAP1
,

267 
	m_NL_CTYPE_TOLOWER
,

268 
	m_NL_CTYPE_GAP2
,

269 
	m_NL_CTYPE_CLASS32
,

270 
	m_NL_CTYPE_GAP3
,

271 
	m_NL_CTYPE_GAP4
,

272 
	m_NL_CTYPE_GAP5
,

273 
	m_NL_CTYPE_GAP6
,

274 
	m_NL_CTYPE_CLASS_NAMES
,

275 
	m_NL_CTYPE_MAP_NAMES
,

276 
	m_NL_CTYPE_WIDTH
,

277 
	m_NL_CTYPE_MB_CUR_MAX
,

278 
	m_NL_CTYPE_CODESET_NAME
,

279 
	mCODESET
 = 
_NL_CTYPE_CODESET_NAME
,

280 
	#CODESET
 
CODESET


	)

281 
	m_NL_CTYPE_TOUPPER32
,

282 
	m_NL_CTYPE_TOLOWER32
,

283 
	m_NL_CTYPE_CLASS_OFFSET
,

284 
	m_NL_CTYPE_MAP_OFFSET
,

285 
	m_NL_CTYPE_INDIGITS_MB_LEN
,

286 
	m_NL_CTYPE_INDIGITS0_MB
,

287 
	m_NL_CTYPE_INDIGITS1_MB
,

288 
	m_NL_CTYPE_INDIGITS2_MB
,

289 
	m_NL_CTYPE_INDIGITS3_MB
,

290 
	m_NL_CTYPE_INDIGITS4_MB
,

291 
	m_NL_CTYPE_INDIGITS5_MB
,

292 
	m_NL_CTYPE_INDIGITS6_MB
,

293 
	m_NL_CTYPE_INDIGITS7_MB
,

294 
	m_NL_CTYPE_INDIGITS8_MB
,

295 
	m_NL_CTYPE_INDIGITS9_MB
,

296 
	m_NL_CTYPE_INDIGITS_WC_LEN
,

297 
	m_NL_CTYPE_INDIGITS0_WC
,

298 
	m_NL_CTYPE_INDIGITS1_WC
,

299 
	m_NL_CTYPE_INDIGITS2_WC
,

300 
	m_NL_CTYPE_INDIGITS3_WC
,

301 
	m_NL_CTYPE_INDIGITS4_WC
,

302 
	m_NL_CTYPE_INDIGITS5_WC
,

303 
	m_NL_CTYPE_INDIGITS6_WC
,

304 
	m_NL_CTYPE_INDIGITS7_WC
,

305 
	m_NL_CTYPE_INDIGITS8_WC
,

306 
	m_NL_CTYPE_INDIGITS9_WC
,

307 
	m_NL_CTYPE_OUTDIGIT0_MB
,

308 
	m_NL_CTYPE_OUTDIGIT1_MB
,

309 
	m_NL_CTYPE_OUTDIGIT2_MB
,

310 
	m_NL_CTYPE_OUTDIGIT3_MB
,

311 
	m_NL_CTYPE_OUTDIGIT4_MB
,

312 
	m_NL_CTYPE_OUTDIGIT5_MB
,

313 
	m_NL_CTYPE_OUTDIGIT6_MB
,

314 
	m_NL_CTYPE_OUTDIGIT7_MB
,

315 
	m_NL_CTYPE_OUTDIGIT8_MB
,

316 
	m_NL_CTYPE_OUTDIGIT9_MB
,

317 
	m_NL_CTYPE_OUTDIGIT0_WC
,

318 
	m_NL_CTYPE_OUTDIGIT1_WC
,

319 
	m_NL_CTYPE_OUTDIGIT2_WC
,

320 
	m_NL_CTYPE_OUTDIGIT3_WC
,

321 
	m_NL_CTYPE_OUTDIGIT4_WC
,

322 
	m_NL_CTYPE_OUTDIGIT5_WC
,

323 
	m_NL_CTYPE_OUTDIGIT6_WC
,

324 
	m_NL_CTYPE_OUTDIGIT7_WC
,

325 
	m_NL_CTYPE_OUTDIGIT8_WC
,

326 
	m_NL_CTYPE_OUTDIGIT9_WC
,

327 
	m_NL_CTYPE_TRANSLIT_TAB_SIZE
,

328 
	m_NL_CTYPE_TRANSLIT_FROM_IDX
,

329 
	m_NL_CTYPE_TRANSLIT_FROM_TBL
,

330 
	m_NL_CTYPE_TRANSLIT_TO_IDX
,

331 
	m_NL_CTYPE_TRANSLIT_TO_TBL
,

332 
	m_NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN
,

333 
	m_NL_CTYPE_TRANSLIT_DEFAULT_MISSING
,

334 
	m_NL_CTYPE_TRANSLIT_IGNORE_LEN
,

335 
	m_NL_CTYPE_TRANSLIT_IGNORE
,

336 
	m_NL_CTYPE_MAP_TO_NONASCII
,

337 
	m_NL_CTYPE_NONASCII_CASE
,

338 
	m_NL_CTYPE_EXTRA_MAP_1
,

339 
	m_NL_CTYPE_EXTRA_MAP_2
,

340 
	m_NL_CTYPE_EXTRA_MAP_3
,

341 
	m_NL_CTYPE_EXTRA_MAP_4
,

342 
	m_NL_CTYPE_EXTRA_MAP_5
,

343 
	m_NL_CTYPE_EXTRA_MAP_6
,

344 
	m_NL_CTYPE_EXTRA_MAP_7
,

345 
	m_NL_CTYPE_EXTRA_MAP_8
,

346 
	m_NL_CTYPE_EXTRA_MAP_9
,

347 
	m_NL_CTYPE_EXTRA_MAP_10
,

348 
	m_NL_CTYPE_EXTRA_MAP_11
,

349 
	m_NL_CTYPE_EXTRA_MAP_12
,

350 
	m_NL_CTYPE_EXTRA_MAP_13
,

351 
	m_NL_CTYPE_EXTRA_MAP_14
,

352 
	m_NL_NUM_LC_CTYPE
,

357 
	m__INT_CURR_SYMBOL
 = 
_NL_ITEM
 (
__LC_MONETARY
, 0),

358 #ifde‡
__USE_GNU


359 
	#INT_CURR_SYMBOL
 
__INT_CURR_SYMBOL


	)

361 
	m__CURRENCY_SYMBOL
,

362 #ifde‡
__USE_GNU


363 
	#CURRENCY_SYMBOL
 
__CURRENCY_SYMBOL


	)

365 
	m__MON_DECIMAL_POINT
,

366 #ifde‡
__USE_GNU


367 
	#MON_DECIMAL_POINT
 
__MON_DECIMAL_POINT


	)

369 
	m__MON_THOUSANDS_SEP
,

370 #ifde‡
__USE_GNU


371 
	#MON_THOUSANDS_SEP
 
__MON_THOUSANDS_SEP


	)

373 
	m__MON_GROUPING
,

374 #ifde‡
__USE_GNU


375 
	#MON_GROUPING
 
__MON_GROUPING


	)

377 
	m__POSITIVE_SIGN
,

378 #ifde‡
__USE_GNU


379 
	#POSITIVE_SIGN
 
__POSITIVE_SIGN


	)

381 
	m__NEGATIVE_SIGN
,

382 #ifde‡
__USE_GNU


383 
	#NEGATIVE_SIGN
 
__NEGATIVE_SIGN


	)

385 
	m__INT_FRAC_DIGITS
,

386 #ifde‡
__USE_GNU


387 
	#INT_FRAC_DIGITS
 
__INT_FRAC_DIGITS


	)

389 
	m__FRAC_DIGITS
,

390 #ifde‡
__USE_GNU


391 
	#FRAC_DIGITS
 
__FRAC_DIGITS


	)

393 
	m__P_CS_PRECEDES
,

394 #ifde‡
__USE_GNU


395 
	#P_CS_PRECEDES
 
__P_CS_PRECEDES


	)

397 
	m__P_SEP_BY_SPACE
,

398 #ifde‡
__USE_GNU


399 
	#P_SEP_BY_SPACE
 
__P_SEP_BY_SPACE


	)

401 
	m__N_CS_PRECEDES
,

402 #ifde‡
__USE_GNU


403 
	#N_CS_PRECEDES
 
__N_CS_PRECEDES


	)

405 
	m__N_SEP_BY_SPACE
,

406 #ifde‡
__USE_GNU


407 
	#N_SEP_BY_SPACE
 
__N_SEP_BY_SPACE


	)

409 
	m__P_SIGN_POSN
,

410 #ifde‡
__USE_GNU


411 
	#P_SIGN_POSN
 
__P_SIGN_POSN


	)

413 
	m__N_SIGN_POSN
,

414 #ifde‡
__USE_GNU


415 
	#N_SIGN_POSN
 
__N_SIGN_POSN


	)

417 
	m_NL_MONETARY_CRNCYSTR
,

418 
	#CRNCYSTR
 
_NL_MONETARY_CRNCYSTR


	)

419 
	m__INT_P_CS_PRECEDES
,

420 #ifde‡
__USE_GNU


421 
	#INT_P_CS_PRECEDES
 
__INT_P_CS_PRECEDES


	)

423 
	m__INT_P_SEP_BY_SPACE
,

424 #ifde‡
__USE_GNU


425 
	#INT_P_SEP_BY_SPACE
 
__INT_P_SEP_BY_SPACE


	)

427 
	m__INT_N_CS_PRECEDES
,

428 #ifde‡
__USE_GNU


429 
	#INT_N_CS_PRECEDES
 
__INT_N_CS_PRECEDES


	)

431 
	m__INT_N_SEP_BY_SPACE
,

432 #ifde‡
__USE_GNU


433 
	#INT_N_SEP_BY_SPACE
 
__INT_N_SEP_BY_SPACE


	)

435 
	m__INT_P_SIGN_POSN
,

436 #ifde‡
__USE_GNU


437 
	#INT_P_SIGN_POSN
 
__INT_P_SIGN_POSN


	)

439 
	m__INT_N_SIGN_POSN
,

440 #ifde‡
__USE_GNU


441 
	#INT_N_SIGN_POSN
 
__INT_N_SIGN_POSN


	)

443 
	m_NL_MONETARY_DUO_INT_CURR_SYMBOL
,

444 
	m_NL_MONETARY_DUO_CURRENCY_SYMBOL
,

445 
	m_NL_MONETARY_DUO_INT_FRAC_DIGITS
,

446 
	m_NL_MONETARY_DUO_FRAC_DIGITS
,

447 
	m_NL_MONETARY_DUO_P_CS_PRECEDES
,

448 
	m_NL_MONETARY_DUO_P_SEP_BY_SPACE
,

449 
	m_NL_MONETARY_DUO_N_CS_PRECEDES
,

450 
	m_NL_MONETARY_DUO_N_SEP_BY_SPACE
,

451 
	m_NL_MONETARY_DUO_INT_P_CS_PRECEDES
,

452 
	m_NL_MONETARY_DUO_INT_P_SEP_BY_SPACE
,

453 
	m_NL_MONETARY_DUO_INT_N_CS_PRECEDES
,

454 
	m_NL_MONETARY_DUO_INT_N_SEP_BY_SPACE
,

455 
	m_NL_MONETARY_DUO_P_SIGN_POSN
,

456 
	m_NL_MONETARY_DUO_N_SIGN_POSN
,

457 
	m_NL_MONETARY_DUO_INT_P_SIGN_POSN
,

458 
	m_NL_MONETARY_DUO_INT_N_SIGN_POSN
,

459 
	m_NL_MONETARY_UNO_VALID_FROM
,

460 
	m_NL_MONETARY_UNO_VALID_TO
,

461 
	m_NL_MONETARY_DUO_VALID_FROM
,

462 
	m_NL_MONETARY_DUO_VALID_TO
,

463 
	m_NL_MONETARY_CONVERSION_RATE
,

464 
	m_NL_MONETARY_DECIMAL_POINT_WC
,

465 
	m_NL_MONETARY_THOUSANDS_SEP_WC
,

466 
	m_NL_MONETARY_CODESET
,

467 
	m_NL_NUM_LC_MONETARY
,

471 
	m__DECIMAL_POINT
 = 
_NL_ITEM
 (
__LC_NUMERIC
, 0),

472 #ifde‡
__USE_GNU


473 
	#DECIMAL_POINT
 
__DECIMAL_POINT


	)

475 
	mRADIXCHAR
 = 
__DECIMAL_POINT
,

476 
	#RADIXCHAR
 
RADIXCHAR


	)

477 
	m__THOUSANDS_SEP
,

478 #ifde‡
__USE_GNU


479 
	#THOUSANDS_SEP
 
__THOUSANDS_SEP


	)

481 
	mTHOUSEP
 = 
__THOUSANDS_SEP
,

482 
	#THOUSEP
 
THOUSEP


	)

483 
	m__GROUPING
,

484 #ifde‡
__USE_GNU


485 
	#GROUPING
 
__GROUPING


	)

487 
	m_NL_NUMERIC_DECIMAL_POINT_WC
,

488 
	m_NL_NUMERIC_THOUSANDS_SEP_WC
,

489 
	m_NL_NUMERIC_CODESET
,

490 
	m_NL_NUM_LC_NUMERIC
,

492 
	m__YESEXPR
 = 
_NL_ITEM
 (
__LC_MESSAGES
, 0),

493 
	#YESEXPR
 
__YESEXPR


	)

494 
	m__NOEXPR
,

495 
	#NOEXPR
 
__NOEXPR


	)

496 
	m__YESSTR
,

497 #i‡
deföed
 
__USE_GNU
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

498 
	#YESSTR
 
__YESSTR


	)

500 
	m__NOSTR
,

501 #i‡
deföed
 
__USE_GNU
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

502 
	#NOSTR
 
__NOSTR


	)

504 
	m_NL_MESSAGES_CODESET
,

505 
	m_NL_NUM_LC_MESSAGES
,

507 
	m_NL_PAPER_HEIGHT
 = 
_NL_ITEM
 (
__LC_PAPER
, 0),

508 
	m_NL_PAPER_WIDTH
,

509 
	m_NL_PAPER_CODESET
,

510 
	m_NL_NUM_LC_PAPER
,

512 
	m_NL_NAME_NAME_FMT
 = 
_NL_ITEM
 (
__LC_NAME
, 0),

513 
	m_NL_NAME_NAME_GEN
,

514 
	m_NL_NAME_NAME_MR
,

515 
	m_NL_NAME_NAME_MRS
,

516 
	m_NL_NAME_NAME_MISS
,

517 
	m_NL_NAME_NAME_MS
,

518 
	m_NL_NAME_CODESET
,

519 
	m_NL_NUM_LC_NAME
,

521 
	m_NL_ADDRESS_POSTAL_FMT
 = 
_NL_ITEM
 (
__LC_ADDRESS
, 0),

522 
	m_NL_ADDRESS_COUNTRY_NAME
,

523 
	m_NL_ADDRESS_COUNTRY_POST
,

524 
	m_NL_ADDRESS_COUNTRY_AB2
,

525 
	m_NL_ADDRESS_COUNTRY_AB3
,

526 
	m_NL_ADDRESS_COUNTRY_CAR
,

527 
	m_NL_ADDRESS_COUNTRY_NUM
,

528 
	m_NL_ADDRESS_COUNTRY_ISBN
,

529 
	m_NL_ADDRESS_LANG_NAME
,

530 
	m_NL_ADDRESS_LANG_AB
,

531 
	m_NL_ADDRESS_LANG_TERM
,

532 
	m_NL_ADDRESS_LANG_LIB
,

533 
	m_NL_ADDRESS_CODESET
,

534 
	m_NL_NUM_LC_ADDRESS
,

536 
	m_NL_TELEPHONE_TEL_INT_FMT
 = 
_NL_ITEM
 (
__LC_TELEPHONE
, 0),

537 
	m_NL_TELEPHONE_TEL_DOM_FMT
,

538 
	m_NL_TELEPHONE_INT_SELECT
,

539 
	m_NL_TELEPHONE_INT_PREFIX
,

540 
	m_NL_TELEPHONE_CODESET
,

541 
	m_NL_NUM_LC_TELEPHONE
,

543 
	m_NL_MEASUREMENT_MEASUREMENT
 = 
_NL_ITEM
 (
__LC_MEASUREMENT
, 0),

544 
	m_NL_MEASUREMENT_CODESET
,

545 
	m_NL_NUM_LC_MEASUREMENT
,

547 
	m_NL_IDENTIFICATION_TITLE
 = 
_NL_ITEM
 (
__LC_IDENTIFICATION
, 0),

548 
	m_NL_IDENTIFICATION_SOURCE
,

549 
	m_NL_IDENTIFICATION_ADDRESS
,

550 
	m_NL_IDENTIFICATION_CONTACT
,

551 
	m_NL_IDENTIFICATION_EMAIL
,

552 
	m_NL_IDENTIFICATION_TEL
,

553 
	m_NL_IDENTIFICATION_FAX
,

554 
	m_NL_IDENTIFICATION_LANGUAGE
,

555 
	m_NL_IDENTIFICATION_TERRITORY
,

556 
	m_NL_IDENTIFICATION_AUDIENCE
,

557 
	m_NL_IDENTIFICATION_APPLICATION
,

558 
	m_NL_IDENTIFICATION_ABBREVIATION
,

559 
	m_NL_IDENTIFICATION_REVISION
,

560 
	m_NL_IDENTIFICATION_DATE
,

561 
	m_NL_IDENTIFICATION_CATEGORY
,

562 
	m_NL_IDENTIFICATION_CODESET
,

563 
	m_NL_NUM_LC_IDENTIFICATION
,

566 
	m_NL_NUM


571 
	#_NL_LOCALE_NAME
(
ˇãg‹y
Ë
	`_NL_ITEM
 ((category), \

572 
	`_NL_ITEM_INDEX
 (-1))

	)

573 #ifde‡
__USE_GNU


574 
	#NL_LOCALE_NAME
(
ˇãg‹y
Ë
	`_NL_LOCALE_NAME
 (ˇãg‹y)

	)

584 *
	$∆_œngöfo
 (
∆_ôem
 
__ôem
Ë
__THROW
;

587 #ifdef 
__USE_XOPEN2K


592 
	~<xloˇÀ.h
>

595 *
	`∆_œngöfo_l
 (
∆_ôem
 
__ôem
, 
__loˇÀ_t
 
__l
);

598 
__END_DECLS


	@/usr/include/lastlog.h

4 
	~<utmp.h
>

	@/usr/include/libgen.h

19 #i‚de‡
_LIBGEN_H


20 
	#_LIBGEN_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


27 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

35 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

36 
	#ba£«me
 
__xpg_ba£«me


	)

38 
__END_DECLS


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/link.h

21 #i‚def 
_LINK_H


22 
	#_LINK_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<ñf.h
>

26 
	~<dlf˙.h
>

27 
	~<sys/ty≥s.h
>

31 
	#ElfW
(
ty≥
Ë
	`_ElfW
 (
Elf
, 
__ELF_NATIVE_CLASS
,Åy≥)

	)

32 
	#_ElfW
(
e
,
w
,
t
Ë
	`_ElfW_1
 (e, w, 
_
##t)

	)

33 
	#_ElfW_1
(
e
,
w
,
t
Ëe##w##
	)
t

35 
	~<bôs/ñf˛ass.h
>

36 
	~<bôs/lök.h
>

43 
	sr_debug


45 
	mr_vîsi⁄
;

47 
lök_m≠
 *
	mr_m≠
;

54 
ElfW
(
Addr
Ë
	mr_brk
;

59 
	mRT_CONSISTENT
,

60 
	mRT_ADD
,

61 
	mRT_DELETE


62 } 
	mr_°©e
;

64 
ElfW
(
Addr
Ë
	mr_ldba£
;

68 
r_debug
 
_r_debug
;

77 
	$ElfW
(
Dyn
Ë
_DYNAMIC
[];

85 
	slök_m≠


90 
	`ElfW
(
Addr
Ë
l_addr
;

91 *
l_«me
;

92 
	`ElfW
(
Dyn
Ë*
l_ld
;

93 
lök_m≠
 *
l_√xt
, *
l_¥ev
;

96 #ifde‡
__USE_GNU


99 
	#LAV_CURRENT
 1

	)

104 
LA_ACT_CONSISTENT
,

105 
LA_ACT_ADD
,

106 
LA_ACT_DELETE


112 
LA_SER_ORIG
 = 0x01,

113 
LA_SER_LIBPATH
 = 0x02,

114 
LA_SER_RUNPATH
 = 0x04,

115 
LA_SER_CONFIG
 = 0x08,

116 
LA_SER_DEFAULT
 = 0x40,

117 
LA_SER_SECURE
 = 0x80

123 
LA_FLG_BINDTO
 = 0x01,

124 
LA_FLG_BINDFROM
 = 0x02

130 
LA_SYMB_NOPLTENTER
 = 0x01,

131 
LA_SYMB_NOPLTEXIT
 = 0x02,

132 
LA_SYMB_STRUCTCALL
 = 0x04,

133 
LA_SYMB_DLSYM
 = 0x08,

134 
LA_SYMB_ALTVALUE
 = 0x10

138 
	sdl_phdr_öfo


140 
	`ElfW
(
Addr
Ë
dÕi_addr
;

141 c⁄° *
dÕi_«me
;

142 c⁄° 
	`ElfW
(
Phdr
Ë*
dÕi_phdr
;

143 
	`ElfW
(
HÆf
Ë
dÕi_phnum
;

151 
dÕi_adds
;

153 
dÕi_subs
;

157 
size_t
 
dÕi_és_modid
;

162 *
dÕi_és_d©a
;

165 
__BEGIN_DECLS


167 
	`dl_ôî©e_phdr
 ((*
__ˇŒback
Ë(
dl_phdr_öfo
 *,

168 
size_t
, *),

169 *
__d©a
);

175 
	`œ_vîsi⁄
 (
__vîsi⁄
);

176 
	`œ_a˘ivôy
 (
uöçå_t
 *
__cookõ
, 
__Êag
);

177 *
	`œ_obj£¨ch
 (c⁄° *
__«me
, 
uöçå_t
 *
__cookõ
,

178 
__Êag
);

179 
	`œ_obj›í
 (
lök_m≠
 *
__m≠
, 
Lmid_t
 
__lmid
,

180 
uöçå_t
 *
__cookõ
);

181 
	`œ_¥eöô
 (
uöçå_t
 *
__cookõ
);

182 
uöçå_t
 
	`œ_symböd32
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

183 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

184 *
__Êags
, c⁄° *
__sym«me
);

185 
uöçå_t
 
	`œ_symböd64
 (
Elf64_Sym
 *
__sym
, 
__ndx
,

186 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

187 *
__Êags
, c⁄° *
__sym«me
);

188 
	`œ_obj˛o£
 (
uöçå_t
 *
__cookõ
);

190 
__END_DECLS


	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

40 #ifde‡
_LIBC


41 
	#__MALLOC_HOOK_VOLATILE


	)

42 
	#__MALLOC_DEPRECATED


	)

44 
	#__MALLOC_HOOK_VOLATILE
 
__vﬁ©ûe


	)

45 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

50 
	#__MALLOC_P
(
¨gs
Ë
	)
args

51 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

52 
	#__MALLOC_HOOK_VOLATILE


	)

53 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

58 
__BEGIN_DECLS


61 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

64 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

73 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

76 
	$‰ì
 (*
__±r
Ë
__THROW
;

79 
	$c‰ì
 (*
__±r
Ë
__THROW
;

82 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

83 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

86 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

90 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

94 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

97 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

98 
__THROW
 
__©åibuã_mÆloc__
;

102 
	smÆlöfo


104 
¨ía
;

105 
‹dblks
;

106 
smblks
;

107 
hblks
;

108 
hblkhd
;

109 
usmblks
;

110 
fsmblks
;

111 
u‹dblks
;

112 
f‹dblks
;

113 
kìpco°
;

117 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

120 #i‚de‡
M_MXFAST


121 
	#M_MXFAST
 1

	)

123 #i‚de‡
M_NLBLKS


124 
	#M_NLBLKS
 2

	)

126 #i‚de‡
M_GRAIN


127 
	#M_GRAIN
 3

	)

129 #i‚de‡
M_KEEP


130 
	#M_KEEP
 4

	)

134 
	#M_TRIM_THRESHOLD
 -1

	)

135 
	#M_TOP_PAD
 -2

	)

136 
	#M_MMAP_THRESHOLD
 -3

	)

137 
	#M_MMAP_MAX
 -4

	)

138 
	#M_CHECK_ACTION
 -5

	)

139 
	#M_PERTURB
 -6

	)

140 
	#M_ARENA_TEST
 -7

	)

141 
	#M_ARENA_MAX
 -8

	)

144 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

148 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

152 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

155 
	$mÆloc_°©s
 (Ë
__THROW
;

158 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

161 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

165 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

170 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

171 
__MALLOC_DEPRECATED
;

173 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

174 
__c⁄°
 
__mÆloc_±r_t
)

175 
__MALLOC_DEPRECATED
;

176 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

177 
__c⁄°
 
__mÆloc_±r_t
)

178 
__MALLOC_DEPRECATED
;

179 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

180 
size_t
 
__size
,

181 
__c⁄°
 
__mÆloc_±r_t
)

182 
__MALLOC_DEPRECATED
;

183 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

184 
size_t
 
__size
,

185 
__c⁄°
 
__mÆloc_±r_t
)

186 
__MALLOC_DEPRECATED
;

187 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

190 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

193 
__END_DECLS


	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

102 || 
deföed
 
__LDBL_COMPAT
)

103 #ifde‡
__LDBL_COMPAT


105 #ifde‡
__USE_ISOC99


106 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

107 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

108 #ifde‡
__REDIRECT_NTH


109 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

110 
__∆dbl_√xâow¨df
)

111 
	`__©åibuã__
 ((
__c⁄°__
));

112 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

113 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

115 (
__x
, 
__y
),

116 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

121 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


123 #unde‡
__MATHDECL_1


124 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

125 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

126 
¨gs
, 
Æüs
)

	)

127 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

128 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	#__MATH_DECLARE_LDOUBLE
 1

	)

146 
	~<bôs/m©hˇŒs.h
>

147 #unde‡
_MdoubÀ_


148 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


149 #unde‡
_MdoubÀ_END_NAMESPACE


150 #unde‡
__MATH_PRECNAME


155 #unde‡
__MATHDECL_1


156 #unde‡
__MATHDECL


157 #unde‡
__MATHCALL


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


162 
signgam
;

167 #ifde‡
__USE_ISOC99


205 
FP_NAN
,

206 
	#FP_NAN
 
FP_NAN


	)

207 
FP_INFINITE
,

208 
	#FP_INFINITE
 
FP_INFINITE


	)

209 
FP_ZERO
,

210 
	#FP_ZERO
 
FP_ZERO


	)

211 
FP_SUBNORMAL
,

212 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

213 
FP_NORMAL


214 
	#FP_NORMAL
 
FP_NORMAL


	)

218 #ifde‡
__NO_LONG_DOUBLE_MATH


219 
	#Â˛assify
(
x
) \

220 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

222 
	#Â˛assify
(
x
) \

223 ( (
x
) ==  () \

224 ? 
	`__Â˛assifyf
 (
x
) \

225 :  (
x
) ==  () \

226 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

230 #ifde‡
__NO_LONG_DOUBLE_MATH


231 
	#signbô
(
x
) \

232 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

234 
	#signbô
(
x
) \

235 ( (
x
) ==  () \

236 ? 
	`__signbôf
 (
x
) \

237 :  (
x
) ==  () \

238 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

242 #ifde‡
__NO_LONG_DOUBLE_MATH


243 
	#isföôe
(
x
) \

244 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

246 
	#isföôe
(
x
) \

247 ( (
x
) ==  () \

248 ? 
	`__föôef
 (
x
) \

249 :  (
x
) ==  () \

250 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

254 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

258 #ifde‡
__NO_LONG_DOUBLE_MATH


259 
	#i¢™
(
x
) \

260 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

262 
	#i¢™
(
x
) \

263 ( (
x
) ==  () \

264 ? 
	`__i¢™f
 (
x
) \

265 :  (
x
) ==  () \

266 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

270 #ifde‡
__NO_LONG_DOUBLE_MATH


271 
	#isöf
(
x
) \

272 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

274 
	#isöf
(
x
) \

275 ( (
x
) ==  () \

276 ? 
	`__isöff
 (
x
) \

277 :  (
x
) ==  () \

278 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

282 
	#MATH_ERRNO
 1

	)

283 
	#MATH_ERREXCEPT
 2

	)

288 #i‚de‡
__FAST_MATH__


289 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

294 #ifdef 
__USE_MISC


298 
_IEEE_
 = -1,

299 
_SVID_
,

300 
_XOPEN_
,

301 
_POSIX_
,

302 
_ISOC_


303 } 
	t_LIB_VERSION_TYPE
;

308 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

312 #ifde‡
__USE_SVID


318 #ifde‡
__˝lu•lus


319 
__ex˚±i⁄


321 
ex˚±i⁄


324 
ty≥
;

325 *
«me
;

326 
¨g1
;

327 
¨g2
;

328 
ªtvÆ
;

329 
	}
};

331 #ifde‡
__˝lu•lus


332 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

334 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

337 
	#X_TLOSS
 1.41484755040568800000e+16

	)

340 
	#DOMAIN
 1

	)

341 
	#SING
 2

	)

342 
	#OVERFLOW
 3

	)

343 
	#UNDERFLOW
 4

	)

344 
	#TLOSS
 5

	)

345 
	#PLOSS
 6

	)

348 
	#HUGE
 3.40282347e+38F

	)

352 #ifde‡
__USE_XOPEN


354 
	#MAXFLOAT
 3.40282347e+38F

	)

361 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


362 
	#M_E
 2.7182818284590452354

	)

363 
	#M_LOG2E
 1.4426950408889634074

	)

364 
	#M_LOG10E
 0.43429448190325182765

	)

365 
	#M_LN2
 0.69314718055994530942

	)

366 
	#M_LN10
 2.30258509299404568402

	)

367 
	#M_PI
 3.14159265358979323846

	)

368 
	#M_PI_2
 1.57079632679489661923

	)

369 
	#M_PI_4
 0.78539816339744830962

	)

370 
	#M_1_PI
 0.31830988618379067154

	)

371 
	#M_2_PI
 0.63661977236758134308

	)

372 
	#M_2_SQRTPI
 1.12837916709551257390

	)

373 
	#M_SQRT2
 1.41421356237309504880

	)

374 
	#M_SQRT1_2
 0.70710678118654752440

	)

380 #ifde‡
__USE_GNU


381 
	#M_El
 2.7182818284590452353602874713526625L

	)

382 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

383 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

384 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

385 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

386 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

387 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

388 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

389 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

390 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

391 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

392 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

393 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

400 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


401 
	#__NO_MATH_INLINES
 1

	)

404 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

411 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

412 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

413 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

414 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

415 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

416 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

420 #ifde‡
__USE_EXTERN_INLINES


421 
	~<bôs/m©hölöe.h
>

426 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

427 
	~<bôs/m©h-föôe.h
>

430 #ifde‡
__USE_ISOC99


434 #i‚de‡
isgª©î


435 
	#isgª©î
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

442 #i‚de‡
isgª©îequÆ


443 
	#isgª©îequÆ
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

450 #i‚de‡
i¶ess


451 
	#i¶ess
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

458 #i‚de‡
i¶es£quÆ


459 
	#i¶es£quÆ
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

466 #i‚de‡
i¶essgª©î


467 
	#i¶essgª©î
(
x
, 
y
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

470 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

474 #i‚de‡
isun‹dîed


475 
	#isun‹dîed
(
u
, 
v
) \

476 (
__exãnsi⁄__
 \

477 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

478 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

483 
	g__END_DECLS


	@/usr/include/mcheck.h

19 #i‚de‡
_MCHECK_H


20 
	#_MCHECK_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


28 
	emcheck_°©us


30 
	mMCHECK_DISABLED
 = -1,

31 
	mMCHECK_OK
,

32 
	mMCHECK_FREE
,

33 
	mMCHECK_HEAD
,

34 
	mMCHECK_TAIL


42 
mcheck
 ((*
__ab‹tfunc
Ë(
mcheck_°©us
)Ë
__THROW
;

46 
	`mcheck_≥d™tic
 ((*
__ab‹tfunc
Ë(
mcheck_°©us
)Ë
__THROW
;

49 
	`mcheck_check_Æl
 ();

54 
mcheck_°©us
 
	$m¥obe
 (*
__±r
Ë
__THROW
;

57 
	$måa˚
 (Ë
__THROW
;

58 
	$mu¡ø˚
 (Ë
__THROW
;

60 
__END_DECLS


	@/usr/include/memory.h

23 #i‚def 
_MEMORY_H


24 
	#_MEMORY_H
 1

	)

26 
	~<„©uªs.h
>

29 #i‚def 
_STRING_H


30 
	~<°rög.h
>

	@/usr/include/menu.h

35 #i‚de‡
ETI_MENU


36 
	#ETI_MENU


	)

38 #ifde‡
AMIGA


39 
	#TEXT
 
TEXT_ncur£s


	)

42 
	~<cur£s.h
>

43 
	~<ëi.h
>

45 #ifde‡
__˝lu•lus


49 
	tMíu_O±i⁄s
;

50 
	tIãm_O±i⁄s
;

53 
	#O_ONEVALUE
 (0x01)

	)

54 
	#O_SHOWDESC
 (0x02)

	)

55 
	#O_ROWMAJOR
 (0x04)

	)

56 
	#O_IGNORECASE
 (0x08)

	)

57 
	#O_SHOWMATCH
 (0x10)

	)

58 
	#O_NONCYCLIC
 (0x20)

	)

61 
	#O_SELECTABLE
 (0x01)

	)

65 c⁄° * 
°r
;

66 
Àngth
;

67 } 
	tTEXT
;

69 
	sègITEM


71 
TEXT
 
«me
;

72 
TEXT
 
des¸ùti⁄
;

73 
ègMENU
 *
imíu
;

74 *
u£Ωå
;

75 
Iãm_O±i⁄s
 
›t
;

76 
ödex
;

77 
y
;

78 
x
;

79 
boﬁ
 
vÆue
;

81 
ègITEM
 *
À·
;

82 
ègITEM
 *
right
;

83 
ègITEM
 *
up
;

84 
ègITEM
 *
down
;

86 } 
	tITEM
;

88 (*
Míu_Hook
)(
	tègMENU
 *);

90 
	sègMENU


92 
height
;

93 
width
;

94 
rows
;

95 
cﬁs
;

96 
‰ows
;

97 
fcﬁs
;

98 
¨ows
;

99 
«mñí
;

100 
des˛í
;

101 
m¨kÀn
;

102 
ôemÀn
;

103 
•c_desc
;

104 
•c_cﬁs
;

105 
•c_rows
;

106 *
∑âîn
;

107 
pödex
;

108 
WINDOW
 *
wö
;

109 
WINDOW
 *
sub
;

110 
WINDOW
 *
u£rwö
;

111 
WINDOW
 *
u£rsub
;

112 
ITEM
 **
ôems
;

113 
nôems
;

114 
ITEM
 *
curôem
;

115 
t›row
;

116 
chty≥
 
f‹e
;

117 
chty≥
 
back
;

118 
chty≥
 
gªy
;

119 
∑d
;

121 
Míu_Hook
 
míuöô
;

122 
Míu_Hook
 
míuãrm
;

123 
Míu_Hook
 
ôemöô
;

124 
Míu_Hook
 
ôemãrm
;

126 *
u£Ωå
;

127 *
m¨k
;

129 
Míu_O±i⁄s
 
›t
;

130 
°©us
;

132 } 
	tMENU
;

137 
	#REQ_LEFT_ITEM
 (
KEY_MAX
 + 1)

	)

138 
	#REQ_RIGHT_ITEM
 (
KEY_MAX
 + 2)

	)

139 
	#REQ_UP_ITEM
 (
KEY_MAX
 + 3)

	)

140 
	#REQ_DOWN_ITEM
 (
KEY_MAX
 + 4)

	)

141 
	#REQ_SCR_ULINE
 (
KEY_MAX
 + 5)

	)

142 
	#REQ_SCR_DLINE
 (
KEY_MAX
 + 6)

	)

143 
	#REQ_SCR_DPAGE
 (
KEY_MAX
 + 7)

	)

144 
	#REQ_SCR_UPAGE
 (
KEY_MAX
 + 8)

	)

145 
	#REQ_FIRST_ITEM
 (
KEY_MAX
 + 9)

	)

146 
	#REQ_LAST_ITEM
 (
KEY_MAX
 + 10)

	)

147 
	#REQ_NEXT_ITEM
 (
KEY_MAX
 + 11)

	)

148 
	#REQ_PREV_ITEM
 (
KEY_MAX
 + 12)

	)

149 
	#REQ_TOGGLE_ITEM
 (
KEY_MAX
 + 13)

	)

150 
	#REQ_CLEAR_PATTERN
 (
KEY_MAX
 + 14)

	)

151 
	#REQ_BACK_PATTERN
 (
KEY_MAX
 + 15)

	)

152 
	#REQ_NEXT_MATCH
 (
KEY_MAX
 + 16)

	)

153 
	#REQ_PREV_MATCH
 (
KEY_MAX
 + 17)

	)

155 
	#MIN_MENU_COMMAND
 (
KEY_MAX
 + 1)

	)

156 
	#MAX_MENU_COMMAND
 (
KEY_MAX
 + 17)

	)

162 #i‡
deföed
(
MAX_COMMAND
)

163 #i‡(
MAX_MENU_COMMAND
 > 
MAX_COMMAND
)

164 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_MENU_COMMAND
 i†
gª©î
 
th™
 
MAX_COMMAND


165 #ñi‡(
MAX_COMMAND
 !(
KEY_MAX
 + 128))

166 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_COMMAND
 i†
Æªady
 
öc⁄si°íéy
 
deföed
.

169 
	#MAX_COMMAND
 (
KEY_MAX
 + 128)

	)

175 
NCURSES_EXPORT
(
ITEM
 **Ë
míu_ôems
 (c⁄° 
MENU
 *);

176 
NCURSES_EXPORT
(
ITEM
 *Ë
cuºít_ôem
 (c⁄° 
MENU
 *);

177 
NCURSES_EXPORT
(
ITEM
 *Ë
√w_ôem
 (const *,const *);

179 
NCURSES_EXPORT
(
MENU
 *Ë
√w_míu
 (
ITEM
 **);

181 
NCURSES_EXPORT
(
Iãm_O±i⁄s
Ë
ôem_›ts
 (c⁄° 
ITEM
 *);

182 
NCURSES_EXPORT
(
Míu_O±i⁄s
Ë
míu_›ts
 (c⁄° 
MENU
 *);

184 
NCURSES_EXPORT
(
Míu_Hook
Ë
ôem_öô
 (c⁄° 
MENU
 *);

185 
NCURSES_EXPORT
(
Míu_Hook
Ë
ôem_ãrm
 (c⁄° 
MENU
 *);

186 
NCURSES_EXPORT
(
Míu_Hook
Ë
míu_öô
 (c⁄° 
MENU
 *);

187 
NCURSES_EXPORT
(
Míu_Hook
Ë
míu_ãrm
 (c⁄° 
MENU
 *);

189 
NCURSES_EXPORT
(
WINDOW
 *Ë
míu_sub
 (c⁄° 
MENU
 *);

190 
NCURSES_EXPORT
(
WINDOW
 *Ë
míu_wö
 (c⁄° 
MENU
 *);

192 
NCURSES_EXPORT
(c⁄° *Ë
ôem_des¸ùti⁄
 (c⁄° 
ITEM
 *);

193 
NCURSES_EXPORT
(c⁄° *Ë
ôem_«me
 (c⁄° 
ITEM
 *);

194 
NCURSES_EXPORT
(c⁄° *Ë
míu_m¨k
 (c⁄° 
MENU
 *);

195 
NCURSES_EXPORT
(c⁄° *Ë
míu_ªque°_«me
 ();

197 
NCURSES_EXPORT
(*Ë
míu_∑âîn
 (c⁄° 
MENU
 *);

199 
NCURSES_EXPORT
(*Ë
míu_u£Ωå
 (c⁄° 
MENU
 *);

200 
NCURSES_EXPORT
(*Ë
ôem_u£Ωå
 (c⁄° 
ITEM
 *);

202 
NCURSES_EXPORT
(
chty≥
Ë
míu_back
 (c⁄° 
MENU
 *);

203 
NCURSES_EXPORT
(
chty≥
Ë
míu_f‹e
 (c⁄° 
MENU
 *);

204 
NCURSES_EXPORT
(
chty≥
Ë
míu_gªy
 (c⁄° 
MENU
 *);

206 
NCURSES_EXPORT
(Ë
‰ì_ôem
 (
ITEM
 *);

207 
NCURSES_EXPORT
(Ë
‰ì_míu
 (
MENU
 *);

208 
NCURSES_EXPORT
(Ë
ôem_cou¡
 (c⁄° 
MENU
 *);

209 
NCURSES_EXPORT
(Ë
ôem_ödex
 (c⁄° 
ITEM
 *);

210 
NCURSES_EXPORT
(Ë
ôem_›ts_off
 (
ITEM
 *,
Iãm_O±i⁄s
);

211 
NCURSES_EXPORT
(Ë
ôem_›ts_⁄
 (
ITEM
 *,
Iãm_O±i⁄s
);

212 
NCURSES_EXPORT
(Ë
míu_drivî
 (
MENU
 *,);

213 
NCURSES_EXPORT
(Ë
míu_›ts_off
 (
MENU
 *,
Míu_O±i⁄s
);

214 
NCURSES_EXPORT
(Ë
míu_›ts_⁄
 (
MENU
 *,
Míu_O±i⁄s
);

215 
NCURSES_EXPORT
(Ë
míu_∑d
 (c⁄° 
MENU
 *);

216 
NCURSES_EXPORT
(Ë
pos_míu_curs‹
 (c⁄° 
MENU
 *);

217 
NCURSES_EXPORT
(Ë
po°_míu
 (
MENU
 *);

218 
NCURSES_EXPORT
(Ë
sˇÀ_míu
 (c⁄° 
MENU
 *,*,*);

219 
NCURSES_EXPORT
(Ë
£t_cuºít_ôem
 (
MENU
 *
míu
,
ITEM
 *
ôem
);

220 
NCURSES_EXPORT
(Ë
£t_ôem_öô
 (
MENU
 *, 
Míu_Hook
);

221 
NCURSES_EXPORT
(Ë
£t_ôem_›ts
 (
ITEM
 *,
Iãm_O±i⁄s
);

222 
NCURSES_EXPORT
(Ë
£t_ôem_ãrm
 (
MENU
 *, 
Míu_Hook
);

223 
NCURSES_EXPORT
(Ë
£t_ôem_u£Ωå
 (
ITEM
 *, *);

224 
NCURSES_EXPORT
(Ë
£t_ôem_vÆue
 (
ITEM
 *,
boﬁ
);

225 
NCURSES_EXPORT
(Ë
£t_míu_back
 (
MENU
 *,
chty≥
);

226 
NCURSES_EXPORT
(Ë
£t_míu_f‹e
 (
MENU
 *,
chty≥
);

227 
NCURSES_EXPORT
(Ë
£t_míu_f‹m©
 (
MENU
 *,,);

228 
NCURSES_EXPORT
(Ë
£t_míu_gªy
 (
MENU
 *,
chty≥
);

229 
NCURSES_EXPORT
(Ë
£t_míu_öô
 (
MENU
 *, 
Míu_Hook
);

230 
NCURSES_EXPORT
(Ë
£t_míu_ôems
 (
MENU
 *,
ITEM
 **);

231 
NCURSES_EXPORT
(Ë
£t_míu_m¨k
 (
MENU
 *, const *);

232 
NCURSES_EXPORT
(Ë
£t_míu_›ts
 (
MENU
 *,
Míu_O±i⁄s
);

233 
NCURSES_EXPORT
(Ë
£t_míu_∑d
 (
MENU
 *,);

234 
NCURSES_EXPORT
(Ë
£t_míu_∑âîn
 (
MENU
 *,const *);

235 
NCURSES_EXPORT
(Ë
£t_míu_sub
 (
MENU
 *,
WINDOW
 *);

236 
NCURSES_EXPORT
(Ë
£t_míu_ãrm
 (
MENU
 *, 
Míu_Hook
);

237 
NCURSES_EXPORT
(Ë
£t_míu_u£Ωå
 (
MENU
 *,*);

238 
NCURSES_EXPORT
(Ë
£t_míu_wö
 (
MENU
 *,
WINDOW
 *);

239 
NCURSES_EXPORT
(Ë
£t_t›_row
 (
MENU
 *,);

240 
NCURSES_EXPORT
(Ë
t›_row
 (c⁄° 
MENU
 *);

241 
NCURSES_EXPORT
(Ë
u≈o°_míu
 (
MENU
 *);

242 
NCURSES_EXPORT
(Ë
míu_ªque°_by_«me
 (const *);

243 
NCURSES_EXPORT
(Ë
£t_míu_•acög
 (
MENU
 *,,,);

244 
NCURSES_EXPORT
(Ë
míu_•acög
 (c⁄° 
MENU
 *,*,*,*);

247 
NCURSES_EXPORT
(
boﬁ
Ë
ôem_vÆue
 (c⁄° 
ITEM
 *);

248 
NCURSES_EXPORT
(
boﬁ
Ë
ôem_visibÀ
 (c⁄° 
ITEM
 *);

250 
NCURSES_EXPORT
(Ë
míu_f‹m©
 (c⁄° 
MENU
 *,*,*);

252 #i‡
NCURSES_SP_FUNCS


253 
NCURSES_EXPORT
(
MENU
 *Ë
NCURSES_SP_NAME
(
√w_míu
Ë(
SCREEN
*, 
ITEM
 **);

256 #ifde‡
__˝lu•lus


	@/usr/include/mntent.h

20 #i‚def 
_MNTENT_H


21 
	#_MNTENT_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_FILE


	)

25 
	~<°dio.h
>

26 
	~<∑ths.h
>

30 
	#MNTTAB
 
_PATH_MNTTAB


	)

33 
	#MOUNTED
 
_PATH_MOUNTED


	)

37 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

38 
	#MNTTYPE_NFS
 "nfs"

	)

39 
	#MNTTYPE_SWAP
 "sw≠"

	)

43 
	#MNTOPT_DEFAULTS
 "deÁu…s"

	)

44 
	#MNTOPT_RO
 "ro"

	)

45 
	#MNTOPT_RW
 "rw"

	)

46 
	#MNTOPT_SUID
 "suid"

	)

47 
	#MNTOPT_NOSUID
 "nosuid"

	)

48 
	#MNTOPT_NOAUTO
 "nﬂuto"

	)

51 
__BEGIN_DECLS


54 
	sm¡ít


56 *
	mm¡_f¢ame
;

57 *
	mm¡_dú
;

58 *
	mm¡_ty≥
;

59 *
	mm¡_›ts
;

60 
	mm¡_‰eq
;

61 
	mm¡_∑s¢o
;

67 
FILE
 *
	$£tm¡ít
 (
__c⁄°
 *
__fûe
, __c⁄° *
__mode
Ë
__THROW
;

72 
m¡ít
 *
	$gëm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

74 #ifde‡
__USE_MISC


76 
m¡ít
 *
	$gëm¡ít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

77 
m¡ít
 *
__ª°ri˘
 
__ªsu…
,

78 *
__ª°ri˘
 
__buf„r
,

79 
__bufsize
Ë
__THROW
;

84 
	$addm¡ít
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

85 
__c⁄°
 
m¡ít
 *
__ª°ri˘
 
__m¡
Ë
__THROW
;

88 
	$ídm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

92 *
	$hasm¡›t
 (
__c⁄°
 
m¡ít
 *
__m¡
,

93 
__c⁄°
 *
__›t
Ë
__THROW
;

96 
__END_DECLS


	@/usr/include/monetary.h

21 #i‚def 
_MONETARY_H


22 
	#_MONETARY_H
 1

	)

24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‚def 
__ssize_t_deföed


32 
__ssize_t
 
	tssize_t
;

33 
	#__ssize_t_deföed


	)

37 
__BEGIN_DECLS


40 
ssize_t
 
	$°rfm⁄
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

41 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

42 
__THROW
 
	`__©åibuã_f‹m©_°rfm⁄__
 (3, 4);

44 #ifde‡
__USE_XOPEN2K8


45 
	~<xloˇÀ.h
>

48 
ssize_t
 
	$°rfm⁄_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

49 
__loˇÀ_t
 
__loc
,

50 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

51 
__THROW
 
	`__©åibuã_f‹m©_°rfm⁄__
 (4, 5);

54 #ifde‡
__LDBL_COMPAT


55 
	~<bôs/m⁄ë¨y-ldbl.h
>

58 
__END_DECLS


	@/usr/include/mqueue.h

19 #i‚de‡
_MQUEUE_H


20 
	#_MQUEUE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<f˙é.h
>

25 
	#__√ed_sigevít_t


	)

26 
	~<bôs/sigöfo.h
>

27 
	#__√ed_time•ec


	)

28 
	~<time.h
>

30 
	~<bôs/mqueue.h
>

32 
__BEGIN_DECLS


41 
mqd_t
 
	$mq_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...)

42 
__THROW
 
	`__n⁄nuŒ
 ((1));

46 
	$mq_˛o£
 (
mqd_t
 
__mqdes
Ë
__THROW
;

49 
	$mq_gë©å
 (
mqd_t
 
__mqdes
, 
mq_©å
 *
__mq°©
)

50 
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	$mq_£èâr
 (
mqd_t
 
__mqdes
,

55 
__c⁄°
 
mq_©å
 *
__ª°ri˘
 
__mq°©
,

56 
mq_©å
 *
__ª°ri˘
 
__omq°©
)

57 
__THROW
 
	`__n⁄nuŒ
 ((2));

60 
	$mq_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$mq_nŸify
 (
mqd_t
 
__mqdes
, 
__c⁄°
 
sigevít
 *
__nŸifiˇti⁄
)

65 
__THROW
;

69 
ssize_t
 
	$mq_ª˚ive
 (
mqd_t
 
__mqdes
, *
__msg_±r
, 
size_t
 
__msg_Àn
,

70 *
__msg_¥io
Ë
	`__n⁄nuŒ
 ((2));

73 
	$mq_£nd
 (
mqd_t
 
__mqdes
, 
__c⁄°
 *
__msg_±r
, 
size_t
 
__msg_Àn
,

74 
__msg_¥io
Ë
	`__n⁄nuŒ
 ((2));

76 #ifde‡
__USE_XOPEN2K


79 
ssize_t
 
	$mq_timedª˚ive
 (
mqd_t
 
__mqdes
, *
__ª°ri˘
 
__msg_±r
,

80 
size_t
 
__msg_Àn
,

81 *
__ª°ri˘
 
__msg_¥io
,

82 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__abs_timeout
)

83 
	`__n⁄nuŒ
 ((2, 5));

87 
	$mq_timed£nd
 (
mqd_t
 
__mqdes
, 
__c⁄°
 *
__msg_±r
,

88 
size_t
 
__msg_Àn
, 
__msg_¥io
,

89 
__c⁄°
 
time•ec
 *
__abs_timeout
)

90 
	`__n⁄nuŒ
 ((2, 5));

94 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

95 && 
deföed
 
__va_¨g_∑ck_Àn


96 
	~<bôs/mqueue2.h
>

99 
__END_DECLS


	@/usr/include/nc_tparm.h

35 #i‚de‡
NC_TPARM_ö˛uded


36 
	#NC_TPARM_ö˛uded
 1

	)

42 #i‚de‡
TPARM_ARG


43 
	#TPARM_ARG
 

	)

46 
	#TPARM_N
(
n
Ë(
TPARM_ARG
)“)

	)

48 
	#TPARM_9
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
,
j
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”),TPARM_N(f),TPARM_N(g),TPARM_N(h),TPARM_N(i),TPARM_N(j))

	)

50 #i‡
NCURSES_TPARM_VARARGS


51 
	#TPARM_8
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”),TPARM_N(f),TPARM_N(g),TPARM_N(h),TPARM_N(i))

	)

52 
	#TPARM_7
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”),TPARM_N(f),TPARM_N(g),TPARM_N(h))

	)

53 
	#TPARM_6
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”),TPARM_N(f),TPARM_N(g))

	)

54 
	#TPARM_5
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”),TPARM_N(f))

	)

55 
	#TPARM_4
(
a
,
b
,
c
,
d
,
e
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d),TPARM_N”))

	)

56 
	#TPARM_3
(
a
,
b
,
c
,
d
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c),TPARM_N(d))

	)

57 
	#TPARM_2
(
a
,
b
,
c
Ë
	`ç¨m
◊,
	`TPARM_N
(b),TPARM_N(c))

	)

58 
	#TPARM_1
(
a
,
b
Ë
	`ç¨m
◊,
	`TPARM_N
(b))

	)

59 
	#TPARM_0
(
a
Ë
	`ç¨m
◊)

	)

61 
	#TPARM_8
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
Ë
	`TPARM_9
◊,b,c,d,e,f,g,h,i,0)

	)

62 
	#TPARM_7
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ë
	`TPARM_8
◊,b,c,d,e,f,g,h,0)

	)

63 
	#TPARM_6
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`TPARM_7
◊,b,c,d,e,f,g,0)

	)

64 
	#TPARM_5
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`TPARM_6
◊,b,c,d,e,f,0)

	)

65 
	#TPARM_4
(
a
,
b
,
c
,
d
,
e
Ë
	`TPARM_5
◊,b,c,d,e,0)

	)

66 
	#TPARM_3
(
a
,
b
,
c
,
d
Ë
	`TPARM_4
◊,b,c,d,0)

	)

67 
	#TPARM_2
(
a
,
b
,
c
Ë
	`TPARM_3
◊,b,c,0)

	)

68 
	#TPARM_1
(
a
,
b
Ë
	`TPARM_2
◊,b,0)

	)

69 
	#TPARM_1
(
a
,
b
Ë
	`TPARM_2
◊,b,0)

	)

70 
	#TPARM_0
(
a
Ë
	`TPARM_1
◊,0)

	)

	@/usr/include/ncurses_dll.h

30 #i‚de‡
NCURSES_DLL_H_ö˛


31 
	#NCURSES_DLL_H_ö˛
 1

	)

37 
	#NCURSES_PUBLIC_VAR
(
«me
Ë
_nc_
##
	)
name

38 
	#NCURSES_WRAPPED_VAR
(
ty≥
,
«me
Ëty≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

44 #unde‡
NCURSES_DLL


45 
	#NCURSES_STATIC


	)

47 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
__MINGW32__
)

48 #i‡
deföed
(
NCURSES_DLL
)

49 #i‡
deföed
(
NCURSES_STATIC
)

50 #unde‡
NCURSES_STATIC


53 #unde‡
NCURSES_IMPEXP


54 #unde‡
NCURSES_API


55 #unde‡
NCURSES_EXPORT


56 #unde‡
NCURSES_EXPORT_VAR


57 #i‡
deföed
(
NCURSES_DLL
)

59 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

60 #ñi‡
deföed
(
NCURSES_STATIC
)

62 
	#NCURSES_IMPEXP


	)

65 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

67 
	#NCURSES_API
 
__cde˛


	)

68 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

69 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

73 #i‡!
deföed
(
NCURSES_IMPEXP
)

74 
	#NCURSES_IMPEXP


	)

76 #i‡!
deföed
(
NCURSES_API
)

77 
	#NCURSES_API


	)

79 #i‡!
deföed
(
NCURSES_EXPORT
)

80 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

82 #i‡!
deföed
(
NCURSES_EXPORT_VAR
)

83 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/nl_types.h

19 #i‚de‡
_NL_TYPES_H


20 
	#_NL_TYPES_H
 1

	)

22 
	~<„©uªs.h
>

25 
	#NL_SETD
 1

	)

28 
	#NL_CAT_LOCALE
 1

	)

31 
__BEGIN_DECLS


34 *
	t∆_ˇtd
;

37 
	t∆_ôem
;

43 
∆_ˇtd
 
	$ˇt›í
 (
__c⁄°
 *
__ˇt_«me
, 
__Êag
Ë
	`__n⁄nuŒ
 ((1));

47 *
	$ˇtgës
 (
∆_ˇtd
 
__ˇèlog
, 
__£t
, 
__numbî
,

48 
__c⁄°
 *
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

51 
	$ˇt˛o£
 (
∆_ˇtd
 
__ˇèlog
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

53 
__END_DECLS


	@/usr/include/nss.h

22 #i‚de‡
_NSS_H


23 
	#_NSS_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<°döt.h
>

29 
__BEGIN_DECLS


32 
	enss_°©us


34 
	mNSS_STATUS_TRYAGAIN
 = -2,

35 
	mNSS_STATUS_UNAVAIL
,

36 
	mNSS_STATUS_NOTFOUND
,

37 
	mNSS_STATUS_SUCCESS
,

38 
	mNSS_STATUS_RETURN


43 
	sgaih_addπu∂e


45 
gaih_addπu∂e
 *
	m√xt
;

46 *
	m«me
;

47 
	mÁmûy
;

48 
uöt32_t
 
	maddr
[4];

49 
uöt32_t
 
	msc›eid
;

59 
	$__nss_c⁄figuª_lookup
 (
__c⁄°
 *
__db«me
,

60 
__c⁄°
 *
__°rög
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/obstack.h

106 #i‚de‡
_OBSTACK_H


107 
	#_OBSTACK_H
 1

	)

109 #ifde‡
__˝lu•lus


118 #ifde‡
__PTRDIFF_TYPE__


119 
	#PTR_INT_TYPE
 
__PTRDIFF_TYPE__


	)

121 
	~<°ddef.h
>

122 
	#PTR_INT_TYPE
 
±rdiff_t


	)

129 
	#__BPTR_ALIGN
(
B
, 
P
, 
A
Ë((BË+ (((PË- (BË+ (A)Ë& ~(A)))

	)

138 
	#__PTR_ALIGN
(
B
, 
P
, 
A
) \

139 
	`__BPTR_ALIGN
 ( (
PTR_INT_TYPE
Ë<  (*Ë? (
B
) : (*) 0, \

140 
P
, 
A
)

	)

142 
	~<°rög.h
>

144 
	s_ob°ack_chunk


146 *
limô
;

147 
_ob°ack_chunk
 *
¥ev
;

148 
c⁄ã¡s
[4];

151 
	sob°ack


153 
chunk_size
;

154 
_ob°ack_chunk
 *
chunk
;

155 *
obje˘_ba£
;

156 *
√xt_‰ì
;

157 *
chunk_limô
;

160 
PTR_INT_TYPE
 
ãmpöt
;

161 *
ãmµå
;

162 } 
ãmp
;

163 
Æignmít_mask
;

167 
_ob°ack_chunk
 *(*
chunkfun
) (*, );

168 (*
‰ìfun
Ë(*, 
_ob°ack_chunk
 *);

169 *
exåa_¨g
;

170 
u£_exåa_¨g
:1;

171 
maybe_em±y_obje˘
:1;

175 
Æloc_Áûed
:1;

182 
_ob°ack_√wchunk
 (
ob°ack
 *, );

183 
_ob°ack_begö
 (
ob°ack
 *, , ,

185 
_ob°ack_begö_1
 (
ob°ack
 *, , ,

188 
_ob°ack_mem‹y_u£d
 (
ob°ack
 *);

190 
ob°ack_‰ì
 (
ob°ack
 *
__ob°ack
, *
__block
);

197 (*
ob°ack_Æloc_Áûed_h™dÀr
) ();

200 
ob°ack_exô_Áûuª
;

206 
	#ob°ack_ba£
(
h
Ë((*Ë(h)->
obje˘_ba£
)

	)

210 
	#ob°ack_chunk_size
(
h
Ë((h)->
chunk_size
)

	)

214 
	#ob°ack_√xt_‰ì
(
h
Ë((h)->
√xt_‰ì
)

	)

218 
	#ob°ack_Æignmít_mask
(
h
Ë((h)->
Æignmít_mask
)

	)

221 
	#ob°ack_öô
(
h
) \

222 
	`_ob°ack_begö
 ((
h
), 0, 0, \

223 (*(*Ë()Ë
ob°ack_chunk_Æloc
, \

224 ((*Ë(*)Ë
ob°ack_chunk_‰ì
)

	)

226 
	#ob°ack_begö
(
h
, 
size
) \

227 
	`_ob°ack_begö
 ((
h
), (
size
), 0, \

228 (*(*Ë()Ë
ob°ack_chunk_Æloc
, \

229 ((*Ë(*)Ë
ob°ack_chunk_‰ì
)

	)

231 
	#ob°ack_•ecify_Æloˇti⁄
(
h
, 
size
, 
Æignmít
, 
chunkfun
, 
‰ìfun
) \

232 
	`_ob°ack_begö
 ((
h
), (
size
), (
Æignmít
), \

233 (*(*Ë()Ë(
chunkfun
), \

234 ((*Ë(*)Ë(
‰ìfun
))

	)

236 
	#ob°ack_•ecify_Æloˇti⁄_wôh_¨g
(
h
, 
size
, 
Æignmít
, 
chunkfun
, 
‰ìfun
, 
¨g
) \

237 
	`_ob°ack_begö_1
 ((
h
), (
size
), (
Æignmít
), \

238 (*(*Ë(*, )Ë(
chunkfun
), \

239 ((*Ë(*, *)Ë(
‰ìfun
), (
¨g
))

	)

241 
	#ob°ack_chunkfun
(
h
, 
√wchunkfun
) \

242 ((
h
Ë-> 
chunkfun
 = (
_ob°ack_chunk
 *(*)(*, )Ë(
√wchunkfun
))

	)

244 
	#ob°ack_‰ìfun
(
h
, 
√w‰ìfun
) \

245 ((
h
Ë-> 
‰ìfun
 = ((*)(*, 
_ob°ack_chunk
 *)Ë(
√w‰ìfun
))

	)

247 
	#ob°ack_1grow_Á°
(
h
,
ach¨
Ë(*((h)->
√xt_‰ì
)++ = (ach¨))

	)

249 
	#ob°ack_bœnk_Á°
(
h
,
n
Ë((h)->
√xt_‰ì
 +“))

	)

251 
	#ob°ack_mem‹y_u£d
(
h
Ë
	`_ob°ack_mem‹y_u£d
 (h)

	)

253 #i‡
deföed
 
__GNUC__
 && deföed 
__STDC__
 && __STDC__

257 #i‡
__GNUC__
 < 2 || (
__NeXT__
 && !
__GNUC_MINOR__
)

258 
	#__exãnsi⁄__


	)

266 
	#ob°ack_obje˘_size
(
OBSTACK
) \

267 
__exãnsi⁄__
 \

268 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

269 (Ë(
__o
->
√xt_‰ì
 - __o->
obje˘_ba£
); })

	)

271 
	#ob°ack_room
(
OBSTACK
) \

272 
__exãnsi⁄__
 \

273 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

274 (Ë(
__o
->
chunk_limô
 - __o->
√xt_‰ì
); })

	)

276 
	#ob°ack_make_room
(
OBSTACK
,
Àngth
) \

277 
__exãnsi⁄__
 \

278 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

279 
__Àn
 = (
Àngth
); \

280 i‡(
__o
->
chunk_limô
 - __o->
√xt_‰ì
 < 
__Àn
) \

281 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

282 (Ë0; })

	)

284 
	#ob°ack_em±y_p
(
OBSTACK
) \

285 
__exãnsi⁄__
 \

286 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

287 (
__o
->
chunk
->
¥ev
 == 0 \

288 && 
__o
->
√xt_‰ì
 =
	`__PTR_ALIGN
 ((*Ë__o->
chunk
, \

289 
__o
->
chunk
->
c⁄ã¡s
, \

290 
__o
->
Æignmít_mask
)); })

	)

292 
	#ob°ack_grow
(
OBSTACK
,
whîe
,
Àngth
) \

293 
__exãnsi⁄__
 \

294 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

295 
__Àn
 = (
Àngth
); \

296 i‡(
__o
->
√xt_‰ì
 + 
__Àn
 > __o->
chunk_limô
) \

297 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

298 
	`mem˝y
 (
__o
->
√xt_‰ì
, 
whîe
, 
__Àn
); \

299 
__o
->
√xt_‰ì
 +
__Àn
; \

300 (Ë0; })

	)

302 
	#ob°ack_grow0
(
OBSTACK
,
whîe
,
Àngth
) \

303 
__exãnsi⁄__
 \

304 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

305 
__Àn
 = (
Àngth
); \

306 i‡(
__o
->
√xt_‰ì
 + 
__Àn
 + 1 > __o->
chunk_limô
) \

307 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
 + 1); \

308 
	`mem˝y
 (
__o
->
√xt_‰ì
, 
whîe
, 
__Àn
); \

309 
__o
->
√xt_‰ì
 +
__Àn
; \

310 *(
__o
->
√xt_‰ì
)++ = 0; \

311 (Ë0; })

	)

313 
	#ob°ack_1grow
(
OBSTACK
,
d©um
) \

314 
__exãnsi⁄__
 \

315 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

316 i‡(
__o
->
√xt_‰ì
 + 1 > __o->
chunk_limô
) \

317 
	`_ob°ack_√wchunk
 (
__o
, 1); \

318 
	`ob°ack_1grow_Á°
 (
__o
, 
d©um
); \

319 (Ë0; })

	)

325 
	#ob°ack_±r_grow
(
OBSTACK
,
d©um
) \

326 
__exãnsi⁄__
 \

327 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

328 i‡(
__o
->
√xt_‰ì
 +  (*Ë> __o->
chunk_limô
) \

329 
	`_ob°ack_√wchunk
 (
__o
,  (*)); \

330 
	`ob°ack_±r_grow_Á°
 (
__o
, 
d©um
); }) \

331 

	)

332 
	#ob°ack_öt_grow
(
OBSTACK
,
d©um
) \

333 
__exãnsi⁄__
 \

334 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

335 i‡(
__o
->
√xt_‰ì
 +  (Ë> __o->
chunk_limô
) \

336 
	`_ob°ack_√wchunk
 (
__o
,  ()); \

337 
	`ob°ack_öt_grow_Á°
 (
__o
, 
d©um
); })

	)

339 
	#ob°ack_±r_grow_Á°
(
OBSTACK
,
≠å
) \

340 
__exãnsi⁄__
 \

341 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

342 *(c⁄° **Ë
__o1
->
√xt_‰ì
 = (
≠å
); \

343 
__o1
->
√xt_‰ì
 +=  (const *); \

344 (Ë0; })

	)

346 
	#ob°ack_öt_grow_Á°
(
OBSTACK
,
aöt
) \

347 
__exãnsi⁄__
 \

348 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

349 *(*Ë
__o1
->
√xt_‰ì
 = (
aöt
); \

350 
__o1
->
√xt_‰ì
 +=  (); \

351 (Ë0; })

	)

353 
	#ob°ack_bœnk
(
OBSTACK
,
Àngth
) \

354 
__exãnsi⁄__
 \

355 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

356 
__Àn
 = (
Àngth
); \

357 i‡(
__o
->
chunk_limô
 - __o->
√xt_‰ì
 < 
__Àn
) \

358 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

359 
	`ob°ack_bœnk_Á°
 (
__o
, 
__Àn
); \

360 (Ë0; })

	)

362 
	#ob°ack_Æloc
(
OBSTACK
,
Àngth
) \

363 
__exãnsi⁄__
 \

364 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

365 
	`ob°ack_bœnk
 (
__h
, (
Àngth
)); \

366 
	`ob°ack_föish
 (
__h
); })

	)

368 
	#ob°ack_c›y
(
OBSTACK
,
whîe
,
Àngth
) \

369 
__exãnsi⁄__
 \

370 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

371 
	`ob°ack_grow
 (
__h
, (
whîe
), (
Àngth
)); \

372 
	`ob°ack_föish
 (
__h
); })

	)

374 
	#ob°ack_c›y0
(
OBSTACK
,
whîe
,
Àngth
) \

375 
__exãnsi⁄__
 \

376 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

377 
	`ob°ack_grow0
 (
__h
, (
whîe
), (
Àngth
)); \

378 
	`ob°ack_föish
 (
__h
); })

	)

382 
	#ob°ack_föish
(
OBSTACK
) \

383 
__exãnsi⁄__
 \

384 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

385 *
__vÆue
 = (*Ë
__o1
->
obje˘_ba£
; \

386 i‡(
__o1
->
√xt_‰ì
 =
__vÆue
) \

387 
__o1
->
maybe_em±y_obje˘
 = 1; \

388 
__o1
->
√xt_‰ì
 \

389 
	`__PTR_ALIGN
 (
__o1
->
obje˘_ba£
, __o1->
√xt_‰ì
, \

390 
__o1
->
Æignmít_mask
); \

391 i‡(
__o1
->
√xt_‰ì
 - (*)__o1->
chunk
 \

392 > 
__o1
->
chunk_limô
 - (*)__o1->
chunk
) \

393 
__o1
->
√xt_‰ì
 = __o1->
chunk_limô
; \

394 
__o1
->
obje˘_ba£
 = __o1->
√xt_‰ì
; \

395 
__vÆue
; })

	)

397 
	#ob°ack_‰ì
(
OBSTACK
, 
OBJ
) \

398 
__exãnsi⁄__
 \

399 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

400 *
__obj
 = (
OBJ
); \

401 i‡(
__obj
 > (*)
__o
->
chunk
 && __obj < (*)__o->
chunk_limô
) \

402 
__o
->
√xt_‰ì
 = __o->
obje˘_ba£
 = (*)
__obj
; \

403 (
ob°ack_‰ì
Ë(
__o
, 
__obj
); })

	)

407 
	#ob°ack_obje˘_size
(
h
) \

408 (Ë((
h
)->
√xt_‰ì
 - (h)->
obje˘_ba£
)

	)

410 
	#ob°ack_room
(
h
) \

411 (Ë((
h
)->
chunk_limô
 - (h)->
√xt_‰ì
)

	)

413 
	#ob°ack_em±y_p
(
h
) \

414 ((
h
)->
chunk
->
¥ev
 == 0 \

415 && (
h
)->
√xt_‰ì
 =
	`__PTR_ALIGN
 ((*Ë(h)->
chunk
, \

416 (
h
)->
chunk
->
c⁄ã¡s
, \

417 (
h
)->
Æignmít_mask
))

	)

425 
	#ob°ack_make_room
(
h
,
Àngth
) \

426 –(
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

427 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 > (h)->
chunk_limô
) \

428 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0Ë: 0))

	)

430 
	#ob°ack_grow
(
h
,
whîe
,
Àngth
) \

431 –(
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

432 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 > (h)->
chunk_limô
) \

433 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0) : 0), \

434 
	`mem˝y
 ((
h
)->
√xt_‰ì
, 
whîe
, (h)->
ãmp
.
ãmpöt
), \

435 (
h
)->
√xt_‰ì
 +(h)->
ãmp
.
ãmpöt
)

	)

437 
	#ob°ack_grow0
(
h
,
whîe
,
Àngth
) \

438 –(
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

439 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 + 1 > (h)->
chunk_limô
) \

440 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
 + 1), 0) : 0), \

441 
	`mem˝y
 ((
h
)->
√xt_‰ì
, 
whîe
, (h)->
ãmp
.
ãmpöt
), \

442 (
h
)->
√xt_‰ì
 +(h)->
ãmp
.
ãmpöt
, \

443 *((
h
)->
√xt_‰ì
)++ = 0)

	)

445 
	#ob°ack_1grow
(
h
,
d©um
) \

446 –(((
h
)->
√xt_‰ì
 + 1 > (h)->
chunk_limô
) \

447 ? (
	`_ob°ack_√wchunk
 ((
h
), 1), 0) : 0), \

448 
	`ob°ack_1grow_Á°
 (
h
, 
d©um
))

	)

450 
	#ob°ack_±r_grow
(
h
,
d©um
) \

451 –(((
h
)->
√xt_‰ì
 +  (*Ë> (h)->
chunk_limô
) \

452 ? (
	`_ob°ack_√wchunk
 ((
h
),  (*)), 0) : 0), \

453 
	`ob°ack_±r_grow_Á°
 (
h
, 
d©um
))

	)

455 
	#ob°ack_öt_grow
(
h
,
d©um
) \

456 –(((
h
)->
√xt_‰ì
 +  (Ë> (h)->
chunk_limô
) \

457 ? (
	`_ob°ack_√wchunk
 ((
h
),  ()), 0) : 0), \

458 
	`ob°ack_öt_grow_Á°
 (
h
, 
d©um
))

	)

460 
	#ob°ack_±r_grow_Á°
(
h
,
≠å
) \

461 (((c⁄° **Ë((
h
)->
√xt_‰ì
 + (*)))[-1] = (
≠å
))

	)

463 
	#ob°ack_öt_grow_Á°
(
h
,
aöt
) \

464 (((*Ë((
h
)->
√xt_‰ì
 + ()))[-1] = (
aöt
))

	)

466 
	#ob°ack_bœnk
(
h
,
Àngth
) \

467 –(
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

468 (((
h
)->
chunk_limô
 - (h)->
√xt_‰ì
 < (h)->
ãmp
.
ãmpöt
) \

469 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0) : 0), \

470 
	`ob°ack_bœnk_Á°
 (
h
, (h)->
ãmp
.
ãmpöt
))

	)

472 
	#ob°ack_Æloc
(
h
,
Àngth
) \

473 (
	`ob°ack_bœnk
 ((
h
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

475 
	#ob°ack_c›y
(
h
,
whîe
,
Àngth
) \

476 (
	`ob°ack_grow
 ((
h
), (
whîe
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

478 
	#ob°ack_c›y0
(
h
,
whîe
,
Àngth
) \

479 (
	`ob°ack_grow0
 ((
h
), (
whîe
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

481 
	#ob°ack_föish
(
h
) \

482 –((
h
)->
√xt_‰ì
 =(h)->
obje˘_ba£
 \

483 ? (((
h
)->
maybe_em±y_obje˘
 = 1), 0) \

485 (
h
)->
ãmp
.
ãmµå
 = (h)->
obje˘_ba£
, \

486 (
h
)->
√xt_‰ì
 \

487 
	`__PTR_ALIGN
 ((
h
)->
obje˘_ba£
, (h)->
√xt_‰ì
, \

488 (
h
)->
Æignmít_mask
), \

489 (((
h
)->
√xt_‰ì
 - (*Ë(h)->
chunk
 \

490 > (
h
)->
chunk_limô
 - (*Ë(h)->
chunk
) \

491 ? ((
h
)->
√xt_‰ì
 = (h)->
chunk_limô
) : 0), \

492 (
h
)->
obje˘_ba£
 = (h)->
√xt_‰ì
, \

493 (
h
)->
ãmp
.
ãmµå
)

	)

495 
	#ob°ack_‰ì
(
h
,
obj
) \

496 –(
h
)->
ãmp
.
ãmpöt
 = (*Ë(
obj
Ë- (*Ë(h)->
chunk
, \

497 ((((
h
)->
ãmp
.
ãmpöt
 > 0 \

498 && (
h
)->
ãmp
.
ãmpöt
 < (h)->
chunk_limô
 - (*Ë(h)->
chunk
)) \

499 ? (((
h
)->
√xt_‰ì
 = (h)->
obje˘_ba£
 \

500 (
h
)->
ãmp
.
ãmpöt
 + (*Ë(h)->
chunk
), 0) \

501 : ((
ob°ack_‰ì
Ë((
h
), (h)->
ãmp
.
ãmpöt
 + (*Ë(h)->
chunk
), 0)))

	)

505 #ifde‡
__˝lu•lus


	@/usr/include/panel.h

39 #i‚de‡
NCURSES_PANEL_H_ö˛


40 
	#NCURSES_PANEL_H_ö˛
 1

	)

42 
	~<cur£s.h
>

44 
	s∑√l


46 
WINDOW
 *
	mwö
;

47 
∑√l
 *
	mbñow
;

48 
∑√l
 *
	mabove
;

49 
NCURSES_CONST
 *
	mu£r
;

50 } 
	tPANEL
;

52 #if 
deföed
(
__˝lu•lus
)

56 
NCURSES_EXPORT
(
WINDOW
*Ë
∑√l_wödow
 (c⁄° 
PANEL
 *);

57 
NCURSES_EXPORT
(Ë
upd©e_∑√ls
 ();

58 
NCURSES_EXPORT
(Ë
hide_∑√l
 (
PANEL
 *);

59 
NCURSES_EXPORT
(Ë
show_∑√l
 (
PANEL
 *);

60 
NCURSES_EXPORT
(Ë
dñ_∑√l
 (
PANEL
 *);

61 
NCURSES_EXPORT
(Ë
t›_∑√l
 (
PANEL
 *);

62 
NCURSES_EXPORT
(Ë
bŸtom_∑√l
 (
PANEL
 *);

63 
NCURSES_EXPORT
(
PANEL
*Ë
√w_∑√l
 (
WINDOW
 *);

64 
NCURSES_EXPORT
(
PANEL
*Ë
∑√l_above
 (const PANEL *);

65 
NCURSES_EXPORT
(
PANEL
*Ë
∑√l_bñow
 (const PANEL *);

66 
NCURSES_EXPORT
(Ë
£t_∑√l_u£Ωå
 (
PANEL
 *, 
NCURSES_CONST
 *);

67 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
∑√l_u£Ωå
 (c⁄° 
PANEL
 *);

68 
NCURSES_EXPORT
(Ë
move_∑√l
 (
PANEL
 *, , );

69 
NCURSES_EXPORT
(Ë
ª∂a˚_∑√l
 (
PANEL
 *,
WINDOW
 *);

70 
NCURSES_EXPORT
(Ë
∑√l_hiddí
 (c⁄° 
PANEL
 *);

72 #i‡
NCURSES_SP_FUNCS


73 
NCURSES_EXPORT
(
PANEL
 *Ë
ground_∑√l
(
SCREEN
 *);

74 
NCURSES_EXPORT
(
PANEL
 *Ë
˚ûög_∑√l
(
SCREEN
 *);

76 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
upd©e_∑√ls
Ë(
SCREEN
*);

79 #if 
deföed
(
__˝lu•lus
)

	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/pcre.h

39 #i‚de‡
_PCRE_H


40 
	#_PCRE_H


	)

44 
	#PCRE_MAJOR
 8

	)

45 
	#PCRE_MINOR
 12

	)

46 
	#PCRE_PRERELEASE


	)

47 
	#PCRE_DATE
 2011-01-15

	)

54 #i‡
deföed
(
_WIN32
Ë&& !deföed(
PCRE_STATIC
)

55 #i‚de‡
PCRE_EXP_DECL


56 
	#PCRE_EXP_DECL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

58 #ifde‡
__˝lu•lus


59 #i‚de‡
PCRECPP_EXP_DECL


60 
	#PCRECPP_EXP_DECL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

62 #i‚de‡
PCRECPP_EXP_DEFN


63 
	#PCRECPP_EXP_DEFN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

70 #i‚de‡
PCRE_EXP_DECL


71 #ifde‡
__˝lu•lus


72 
	#PCRE_EXP_DECL
 "C"

	)

74 
	#PCRE_EXP_DECL
 

	)

78 #ifde‡
__˝lu•lus


79 #i‚de‡
PCRECPP_EXP_DECL


80 
	#PCRECPP_EXP_DECL
 

	)

82 #i‚de‡
PCRECPP_EXP_DEFN


83 
	#PCRECPP_EXP_DEFN


	)

90 
	~<°dlib.h
>

94 #ifde‡
__˝lu•lus


103 
	#PCRE_CASELESS
 0x00000001

	)

104 
	#PCRE_MULTILINE
 0x00000002

	)

105 
	#PCRE_DOTALL
 0x00000004

	)

106 
	#PCRE_EXTENDED
 0x00000008

	)

107 
	#PCRE_ANCHORED
 0x00000010

	)

108 
	#PCRE_DOLLAR_ENDONLY
 0x00000020

	)

109 
	#PCRE_EXTRA
 0x00000040

	)

110 
	#PCRE_NOTBOL
 0x00000080

	)

111 
	#PCRE_NOTEOL
 0x00000100

	)

112 
	#PCRE_UNGREEDY
 0x00000200

	)

113 
	#PCRE_NOTEMPTY
 0x00000400

	)

114 
	#PCRE_UTF8
 0x00000800

	)

115 
	#PCRE_NO_AUTO_CAPTURE
 0x00001000

	)

116 
	#PCRE_NO_UTF8_CHECK
 0x00002000

	)

117 
	#PCRE_AUTO_CALLOUT
 0x00004000

	)

118 
	#PCRE_PARTIAL_SOFT
 0x00008000

	)

119 
	#PCRE_PARTIAL
 0x00008000

	)

120 
	#PCRE_DFA_SHORTEST
 0x00010000

	)

121 
	#PCRE_DFA_RESTART
 0x00020000

	)

122 
	#PCRE_FIRSTLINE
 0x00040000

	)

123 
	#PCRE_DUPNAMES
 0x00080000

	)

124 
	#PCRE_NEWLINE_CR
 0x00100000

	)

125 
	#PCRE_NEWLINE_LF
 0x00200000

	)

126 
	#PCRE_NEWLINE_CRLF
 0x00300000

	)

127 
	#PCRE_NEWLINE_ANY
 0x00400000

	)

128 
	#PCRE_NEWLINE_ANYCRLF
 0x00500000

	)

129 
	#PCRE_BSR_ANYCRLF
 0x00800000

	)

130 
	#PCRE_BSR_UNICODE
 0x01000000

	)

131 
	#PCRE_JAVASCRIPT_COMPAT
 0x02000000

	)

132 
	#PCRE_NO_START_OPTIMIZE
 0x04000000

	)

133 
	#PCRE_NO_START_OPTIMISE
 0x04000000

	)

134 
	#PCRE_PARTIAL_HARD
 0x08000000

	)

135 
	#PCRE_NOTEMPTY_ATSTART
 0x10000000

	)

136 
	#PCRE_UCP
 0x20000000

	)

140 
	#PCRE_ERROR_NOMATCH
 (-1)

	)

141 
	#PCRE_ERROR_NULL
 (-2)

	)

142 
	#PCRE_ERROR_BADOPTION
 (-3)

	)

143 
	#PCRE_ERROR_BADMAGIC
 (-4)

	)

144 
	#PCRE_ERROR_UNKNOWN_OPCODE
 (-5)

	)

145 
	#PCRE_ERROR_UNKNOWN_NODE
 (-5Ë

	)

146 
	#PCRE_ERROR_NOMEMORY
 (-6)

	)

147 
	#PCRE_ERROR_NOSUBSTRING
 (-7)

	)

148 
	#PCRE_ERROR_MATCHLIMIT
 (-8)

	)

149 
	#PCRE_ERROR_CALLOUT
 (-9Ë

	)

150 
	#PCRE_ERROR_BADUTF8
 (-10)

	)

151 
	#PCRE_ERROR_BADUTF8_OFFSET
 (-11)

	)

152 
	#PCRE_ERROR_PARTIAL
 (-12)

	)

153 
	#PCRE_ERROR_BADPARTIAL
 (-13)

	)

154 
	#PCRE_ERROR_INTERNAL
 (-14)

	)

155 
	#PCRE_ERROR_BADCOUNT
 (-15)

	)

156 
	#PCRE_ERROR_DFA_UITEM
 (-16)

	)

157 
	#PCRE_ERROR_DFA_UCOND
 (-17)

	)

158 
	#PCRE_ERROR_DFA_UMLIMIT
 (-18)

	)

159 
	#PCRE_ERROR_DFA_WSSIZE
 (-19)

	)

160 
	#PCRE_ERROR_DFA_RECURSE
 (-20)

	)

161 
	#PCRE_ERROR_RECURSIONLIMIT
 (-21)

	)

162 
	#PCRE_ERROR_NULLWSLIMIT
 (-22Ë

	)

163 
	#PCRE_ERROR_BADNEWLINE
 (-23)

	)

164 
	#PCRE_ERROR_BADOFFSET
 (-24)

	)

165 
	#PCRE_ERROR_SHORTUTF8
 (-25)

	)

169 
	#PCRE_INFO_OPTIONS
 0

	)

170 
	#PCRE_INFO_SIZE
 1

	)

171 
	#PCRE_INFO_CAPTURECOUNT
 2

	)

172 
	#PCRE_INFO_BACKREFMAX
 3

	)

173 
	#PCRE_INFO_FIRSTBYTE
 4

	)

174 
	#PCRE_INFO_FIRSTCHAR
 4

	)

175 
	#PCRE_INFO_FIRSTTABLE
 5

	)

176 
	#PCRE_INFO_LASTLITERAL
 6

	)

177 
	#PCRE_INFO_NAMEENTRYSIZE
 7

	)

178 
	#PCRE_INFO_NAMECOUNT
 8

	)

179 
	#PCRE_INFO_NAMETABLE
 9

	)

180 
	#PCRE_INFO_STUDYSIZE
 10

	)

181 
	#PCRE_INFO_DEFAULT_TABLES
 11

	)

182 
	#PCRE_INFO_OKPARTIAL
 12

	)

183 
	#PCRE_INFO_JCHANGED
 13

	)

184 
	#PCRE_INFO_HASCRORLF
 14

	)

185 
	#PCRE_INFO_MINLENGTH
 15

	)

190 
	#PCRE_CONFIG_UTF8
 0

	)

191 
	#PCRE_CONFIG_NEWLINE
 1

	)

192 
	#PCRE_CONFIG_LINK_SIZE
 2

	)

193 
	#PCRE_CONFIG_POSIX_MALLOC_THRESHOLD
 3

	)

194 
	#PCRE_CONFIG_MATCH_LIMIT
 4

	)

195 
	#PCRE_CONFIG_STACKRECURSE
 5

	)

196 
	#PCRE_CONFIG_UNICODE_PROPERTIES
 6

	)

197 
	#PCRE_CONFIG_MATCH_LIMIT_RECURSION
 7

	)

198 
	#PCRE_CONFIG_BSR
 8

	)

203 
	#PCRE_EXTRA_STUDY_DATA
 0x0001

	)

204 
	#PCRE_EXTRA_MATCH_LIMIT
 0x0002

	)

205 
	#PCRE_EXTRA_CALLOUT_DATA
 0x0004

	)

206 
	#PCRE_EXTRA_TABLES
 0x0008

	)

207 
	#PCRE_EXTRA_MATCH_LIMIT_RECURSION
 0x0010

	)

208 
	#PCRE_EXTRA_MARK
 0x0020

	)

212 
ªÆ_p¸e
;

213 
ªÆ_p¸e
 
	tp¸e
;

219 #i‚de‡
PCRE_SPTR


220 
	#PCRE_SPTR
 c⁄° *

	)

227 
	sp¸e_exåa
 {

228 
Êags
;

229 *
°udy_d©a
;

230 
m©ch_limô
;

231 *
ˇŒout_d©a
;

232 c⁄° *
èbÀs
;

233 
m©ch_limô_ªcursi⁄
;

234 **
m¨k
;

235 } 
	tp¸e_exåa
;

242 
	sp¸e_ˇŒout_block
 {

243 
vîsi⁄
;

245 
ˇŒout_numbî
;

246 *
off£t_ve˘‹
;

247 
PCRE_SPTR
 
subje˘
;

248 
subje˘_Àngth
;

249 
°¨t_m©ch
;

250 
cuºít_posôi⁄
;

251 
ˇ±uª_t›
;

252 
ˇ±uª_œ°
;

253 *
ˇŒout_d©a
;

255 
∑âîn_posôi⁄
;

256 
√xt_ôem_Àngth
;

258 } 
	tp¸e_ˇŒout_block
;

266 #i‚de‡
VPCOMPAT


267 
PCRE_EXP_DECL
 *(*
p¸e_mÆloc
)(
size_t
);

268 
PCRE_EXP_DECL
 (*
p¸e_‰ì
)(*);

269 
PCRE_EXP_DECL
 *(*
p¸e_°ack_mÆloc
)(
size_t
);

270 
PCRE_EXP_DECL
 (*
p¸e_°ack_‰ì
)(*);

271 
PCRE_EXP_DECL
 (*
p¸e_ˇŒout
)(
p¸e_ˇŒout_block
 *);

273 
PCRE_EXP_DECL
 *
p¸e_mÆloc
(
size_t
);

274 
PCRE_EXP_DECL
 
p¸e_‰ì
(*);

275 
PCRE_EXP_DECL
 *
p¸e_°ack_mÆloc
(
size_t
);

276 
PCRE_EXP_DECL
 
p¸e_°ack_‰ì
(*);

277 
PCRE_EXP_DECL
 
p¸e_ˇŒout
(
p¸e_ˇŒout_block
 *);

282 
PCRE_EXP_DECL
 
p¸e
 *
p¸e_compûe
(const *, , const **, *,

284 
PCRE_EXP_DECL
 
p¸e
 *
p¸e_compûe2
(const *, , *, const **,

286 
PCRE_EXP_DECL
 
p¸e_c⁄fig
(, *);

287 
PCRE_EXP_DECL
 
p¸e_c›y_«med_sub°rög
(c⁄° 
p¸e
 *, const *,

289 
PCRE_EXP_DECL
 
p¸e_c›y_sub°rög
(const *, *, , , *,

291 
PCRE_EXP_DECL
 
p¸e_dÁ_exec
(c⁄° 
p¸e
 *, c⁄° 
p¸e_exåa
 *,

293 
PCRE_EXP_DECL
 
p¸e_exec
(c⁄° 
p¸e
 *, c⁄° 
p¸e_exåa
 *, 
PCRE_SPTR
,

295 
PCRE_EXP_DECL
 
p¸e_‰ì_sub°rög
(const *);

296 
PCRE_EXP_DECL
 
p¸e_‰ì_sub°rög_li°
(const **);

297 
PCRE_EXP_DECL
 
p¸e_fuŒöfo
(c⁄° 
p¸e
 *, c⁄° 
p¸e_exåa
 *, ,

299 
PCRE_EXP_DECL
 
p¸e_gë_«med_sub°rög
(c⁄° 
p¸e
 *, const *,

301 
PCRE_EXP_DECL
 
p¸e_gë_°rögnumbî
(c⁄° 
p¸e
 *, const *);

302 
PCRE_EXP_DECL
 
p¸e_gë_°rögèbÀ_íåõs
(c⁄° 
p¸e
 *, const *,

304 
PCRE_EXP_DECL
 
p¸e_gë_sub°rög
(const *, *, , ,

306 
PCRE_EXP_DECL
 
p¸e_gë_sub°rög_li°
(const *, *, ,

308 
PCRE_EXP_DECL
 
p¸e_öfo
(c⁄° 
p¸e
 *, *, *);

309 
PCRE_EXP_DECL
 c⁄° *
p¸e_makëabÀs
();

310 
PCRE_EXP_DECL
 
p¸e_ªfcou¡
(
p¸e
 *, );

311 
PCRE_EXP_DECL
 
p¸e_exåa
 *
p¸e_°udy
(c⁄° 
p¸e
 *, , const **);

312 
PCRE_EXP_DECL
 c⁄° *
p¸e_vîsi⁄
();

314 #ifde‡
__˝lu•lus


	@/usr/include/pcre_scanner.h

44 #i‚de‡
_PCRE_SCANNER_H


45 
	#_PCRE_SCANNER_H


	)

47 
	~<as£π.h
>

48 
	~<°rög
>

49 
	~<ve˘‹
>

51 
	~<p¸e˝p.h
>

52 
	~<p¸e_°rögpõ˚.h
>

54 
«me•a˚
 
	gp¸e˝p
 {

56 ˛as†
	cPCRECPP_EXP_DEFN
 
	gSˇ¬î
 {

57 
	gpublic
:

58 
Sˇ¬î
();

59 
ex∂icô
 
Sˇ¬î
(c⁄° 
°d
::
°rög
& 
öput
);

60 ~
Sˇ¬î
();

67 
LöeNumbî
() const;

71 
Off£t
() const;

74 
boﬁ
 
LookögAt
(c⁄° 
RE
& 
ª
) const;

82 
boﬁ
 
C⁄sume
(c⁄° 
RE
& 
ª
,

83 c⁄° 
Arg
& 
¨g0
 = 
RE
::
no_¨g
,

84 c⁄° 
Arg
& 
¨g1
 = 
RE
::
no_¨g
,

85 c⁄° 
Arg
& 
¨g2
 = 
RE
::
no_¨g


102 
Skù
(c⁄° * 
ª
);

103 
SëSkùEx¥essi⁄
(c⁄° * 
ª
);

110 
DißbÀSkù
();

114 
E«bÀSkù
();

124 
SkùCXXCommíts
() {

125 
SëSkùEx¥essi⁄
("\\s|//.*\n|/[*](?:\n|.)*?[*]/");

128 
£t_ßve_commíts
(
boﬁ
 
commíts
) {

129 
	gßve_commíts_
 = 
commíts
;

132 
boﬁ
 
ßve_commíts
() {

133  
	gßve_commíts_
;

141 
GëCommíts
(
°¨t
, 
íd
, 
°d
::
ve˘‹
<
SåögPõ˚
> *
ønges
);

147 
GëNextCommíts
(
°d
::
ve˘‹
<
SåögPõ˚
> *
ønges
);

149 
	g¥iv©e
:

150 
°d
::
°rög
 
d©a_
;

151 
SåögPõ˚
 
	göput_
;

152 
RE
* 
	gskù_
;

153 
boﬁ
 
	gshould_skù_
;

154 
boﬁ
 
	gskù_ª≥©_
;

155 
boﬁ
 
	gßve_commíts_
;

160 
	g°d
::
ve˘‹
<
SåögPõ˚
> *
commíts_
;

163 
	gcommíts_off£t_
;

167 
C⁄sumeSkù
();

	@/usr/include/pcre_stringpiece.h

38 #i‚de‡
_PCRE_STRINGPIECE_H


39 
	#_PCRE_STRINGPIECE_H


	)

41 
	~<c°rög
>

42 
	~<°rög
>

43 
	~<iosfwd
>

46 
	#HAVE_TYPE_TRAITS


	)

47 
	~<ty≥_åaôs.h
>

49 
	#HAVE_TYPE_TRAITS


	)

50 
	~<bôs/ty≥_åaôs.h
>

53 
	~<p¸e.h
>

55 
usög
 
	g°d
::
memcmp
;

56 
usög
 
	g°d
::
°æí
;

57 
usög
 
	g°d
::
°rög
;

59 
«me•a˚
 
	gp¸e˝p
 {

61 ˛as†
	cPCRECPP_EXP_DEFN
 
	gSåögPõ˚
 {

62 
	g¥iv©e
:

63 c⁄° * 
±r_
;

64 
	gÀngth_
;

66 
	gpublic
:

70 
SåögPõ˚
()

71 : 
±r_
(
NULL
), 
Àngth_
(0) { }

72 
SåögPõ˚
(c⁄° * 
°r
)

73 : 
±r_
(
°r
), 
Àngth_
(
°©ic_ˇ°
<>(
°æí
(ptr_))) { }

74 
SåögPõ˚
(c⁄° * 
°r
)

75 : 
±r_
(
ªöãΩªt_ˇ°
<c⁄° *>(
°r
)),

76 
Àngth_
(
°©ic_ˇ°
<>(
°æí
(
±r_
))) { }

77 
SåögPõ˚
(c⁄° 
°rög
& 
°r
)

78 : 
±r_
(
°r
.
d©a
()), 
Àngth_
(
°©ic_ˇ°
<>(°r.
size
())) { }

79 
SåögPõ˚
(c⁄° * 
off£t
, 
Àn
)

80 : 
±r_
(
off£t
), 
Àngth_
(
Àn
) { }

88 c⁄° * 
d©a
(Ëc⁄° {  
	g±r_
; }

89 
size
(Ëc⁄° {  
	gÀngth_
; }

90 
boﬁ
 
em±y
(Ëc⁄° {  
	gÀngth_
 == 0; }

92 
˛ór
(Ë{ 
	g±r_
 = 
NULL
; 
	gÀngth_
 = 0; }

93 
£t
(c⁄° * 
buf„r
, 
Àn
Ë{ 
	g±r_
 = buf„r; 
	gÀngth_
 =Üen; }

94 
£t
(c⁄° * 
°r
) {

95 
	g±r_
 = 
°r
;

96 
	gÀngth_
 = 
°©ic_ˇ°
<>(
°æí
(
°r
));

98 
£t
(c⁄° * 
buf„r
, 
Àn
) {

99 
	g±r_
 = 
ªöãΩªt_ˇ°
<c⁄° *>(
buf„r
);

100 
	gÀngth_
 = 
Àn
;

103 
	g›î©‹
[](
	gi
Ëc⁄° {  
	g±r_
[
i
]; }

105 
ªmove_¥efix
(
n
) {

106 
	g±r_
 +
n
;

107 
	gÀngth_
 -
n
;

110 
ªmove_suffix
(
n
) {

111 
	gÀngth_
 -
n
;

114 
boﬁ
 
	g›î©‹
==(c⁄° 
SåögPõ˚
& 
x
) const {

115  ((
Àngth_
 =
x
.length_) &&

116 (
memcmp
(
±r_
, 
x
.±r_, 
Àngth_
) == 0));

118 
boﬁ
 
	g›î©‹
!=(c⁄° 
SåögPõ˚
& 
x
) const {

119  !(*
this
 =
x
);

122 
	#STRINGPIECE_BINARY_PREDICATE
(
cmp
,
auxcmp
) \

123 
boﬁ
 
›î©‹
 
	`cmp
 (c⁄° 
SåögPõ˚
& 
x
) const { \

124 
r
 = 
	`memcmp
(
±r_
, 
x
.±r_, 
Àngth_
 < x.length_ ?Üength_ : x.length_); \

125  ((
r
 
auxcmp
 0Ë|| (‘ =0Ë&& (
Àngth_
 
cmp
 
x
.length_))); \

126 }

	)

127 
STRINGPIECE_BINARY_PREDICATE
(<, <);

128 
STRINGPIECE_BINARY_PREDICATE
(<=, <);

129 
STRINGPIECE_BINARY_PREDICATE
(>=, >);

130 
STRINGPIECE_BINARY_PREDICATE
(>, >);

131 #unde‡
STRINGPIECE_BINARY_PREDICATE


133 
com∑ª
(c⁄° 
SåögPõ˚
& 
x
) const {

134 
	gr
 = 
memcmp
(
±r_
, 
x
.±r_, 
Àngth_
 < x.length_ ?Üength_ : x.length_);

135 i‡(
	gr
 == 0) {

136 i‡(
Àngth_
 < 
x
.Àngth_Ë
r
 = -1;

137 i‡(
	gÀngth_
 > 
	gx
.Àngth_Ë
	gr
 = +1;

139  
	gr
;

142 
°rög
 
as_°rög
() const {

143  
°rög
(
d©a
(), 
size
());

146 
C›yToSåög
(
°rög
* 
èrgë
) const {

147 
	gèrgë
->
assign
(
±r_
, 
Àngth_
);

151 
boﬁ
 
°¨ts_wôh
(c⁄° 
SåögPõ˚
& 
x
) const {

152  ((
	gÀngth_
 >
x
.
Àngth_
Ë&& (
memcmp
(
±r_
, x.ptr_, x.length_) == 0));

165 #ifde‡
HAVE_TYPE_TRAITS


167 
	gãm∂©e
<> 
	g__ty≥_åaôs
<
	gp¸e˝p
::
SåögPõ˚
> {

168 
__åue_ty≥
 
	thas_åivül_deÁu…_c⁄°ru˘‹
;

169 
__åue_ty≥
 
	thas_åivül_c›y_c⁄°ru˘‹
;

170 
__åue_ty≥
 
	thas_åivül_assignmít_›î©‹
;

171 
__åue_ty≥
 
	thas_åivül_de°ru˘‹
;

172 
__åue_ty≥
 
	tis_POD_ty≥
;

177 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
o
, c⁄° 
	gp¸e˝p
::
SåögPõ˚
& 
põ˚
);

	@/usr/include/pcrecpp.h

33 #i‚de‡
_PCRECPP_H


34 
	#_PCRECPP_H


	)

333 
	~<°rög
>

334 
	~<p¸e.h
>

335 
	~<p¸e˝∑rg.h
>

338 
	~<p¸e_°rögpõ˚.h
>

340 
«me•a˚
 
	gp¸e˝p
 {

342 
	#PCRE_SET_OR_CLEAR
(
b
, 
o
) \

343 i‡(
b
Ë
Æl_›ti⁄s_
 |(
o
); all_options_ &= ~(o); \

344  *
this


	)

346 
	#PCRE_IS_SET
(
o
) \

347 (
Æl_›ti⁄s_
 & 
o
Ë=
	)
o

355 ˛as†
	cPCRECPP_EXP_DEFN
 
	gRE_O±i⁄s
 {

356 
	gpublic
:

358 
RE_O±i⁄s
(Ë: 
m©ch_limô_
(0), 
m©ch_limô_ªcursi⁄_
(0), 
Æl_›ti⁄s_
(0) {}

368 
RE_O±i⁄s
(
›ti⁄_Êags
Ë: 
m©ch_limô_
(0), 
m©ch_limô_ªcursi⁄_
(0),

369 
Æl_›ti⁄s_
(
›ti⁄_Êags
) {}

373 
m©ch_limô
(Ëc⁄° {  
	gm©ch_limô_
; };

374 
	gRE_O±i⁄s
 &
£t_m©ch_limô
(
limô
) {

375 
	gm©ch_limô_
 = 
limô
;

376  *
	gthis
;

379 
m©ch_limô_ªcursi⁄
(Ëc⁄° {  
	gm©ch_limô_ªcursi⁄_
; };

380 
	gRE_O±i⁄s
 &
£t_m©ch_limô_ªcursi⁄
(
limô
) {

381 
	gm©ch_limô_ªcursi⁄_
 = 
limô
;

382  *
	gthis
;

385 
boﬁ
 
ˇ£Àss
() const {

386  
PCRE_IS_SET
(
PCRE_CASELESS
);

388 
	gRE_O±i⁄s
 &
£t_ˇ£Àss
(
boﬁ
 
x
) {

389 
PCRE_SET_OR_CLEAR
(
x
, 
PCRE_CASELESS
);

392 
boﬁ
 
mu…ûöe
() const {

393  
PCRE_IS_SET
(
PCRE_MULTILINE
);

395 
	gRE_O±i⁄s
 &
£t_mu…ûöe
(
boﬁ
 
x
) {

396 
PCRE_SET_OR_CLEAR
(
x
, 
PCRE_MULTILINE
);

399 
boﬁ
 
dŸÆl
() const {

400  
PCRE_IS_SET
(
PCRE_DOTALL
);

402 
	gRE_O±i⁄s
 &
£t_dŸÆl
(
boﬁ
 
x
) {

403 
PCRE_SET_OR_CLEAR
(
x
, 
PCRE_DOTALL
);

406 
boﬁ
 
exãnded
() const {

407  
PCRE_IS_SET
(
PCRE_EXTENDED
);

409 
	gRE_O±i⁄s
 &
£t_exãnded
(
boﬁ
 
x
) {

410 
PCRE_SET_OR_CLEAR
(
x
, 
PCRE_EXTENDED
);

413 
boﬁ
 
dﬁœr_íd⁄ly
() const {

414  
PCRE_IS_SET
(
PCRE_DOLLAR_ENDONLY
);

416 
	gRE_O±i⁄s
 &
£t_dﬁœr_íd⁄ly
(
boﬁ
 
x
) {

417 
PCRE_SET_OR_CLEAR
(
x
, 
PCRE_DOLLAR_ENDONLY
);

420 
boﬁ
 
exåa
() const {

421  
PCRE_IS_SET
(
PCRE_EXTRA
);

423 
	gRE_O±i⁄s
 &
£t_exåa
(
boﬁ
 
x
) {

424 
PCRE_SET_OR_CLEAR
(
x
, 
PCRE_EXTRA
);

427 
boﬁ
 
ungªedy
() const {

428  
PCRE_IS_SET
(
PCRE_UNGREEDY
);

430 
	gRE_O±i⁄s
 &
£t_ungªedy
(
boﬁ
 
x
) {

431 
PCRE_SET_OR_CLEAR
(
x
, 
PCRE_UNGREEDY
);

434 
boﬁ
 
utf8
() const {

435  
PCRE_IS_SET
(
PCRE_UTF8
);

437 
	gRE_O±i⁄s
 &
£t_utf8
(
boﬁ
 
x
) {

438 
PCRE_SET_OR_CLEAR
(
x
, 
PCRE_UTF8
);

441 
boﬁ
 
no_auto_ˇ±uª
() const {

442  
PCRE_IS_SET
(
PCRE_NO_AUTO_CAPTURE
);

444 
	gRE_O±i⁄s
 &
£t_no_auto_ˇ±uª
(
boﬁ
 
x
) {

445 
PCRE_SET_OR_CLEAR
(
x
, 
PCRE_NO_AUTO_CAPTURE
);

448 
	gRE_O±i⁄s
 &
£t_Æl_›ti⁄s
(
›t
) {

449 
	gÆl_›ti⁄s_
 = 
›t
;

450  *
	gthis
;

452 
Æl_›ti⁄s
() const {

453  
	gÆl_›ti⁄s_
 ;

458 
	g¥iv©e
:

459 
m©ch_limô_
;

460 
	gm©ch_limô_ªcursi⁄_
;

461 
	gÆl_›ti⁄s_
;

465 
ölöe
 
RE_O±i⁄s
 
	$UTF8
() {

466  
	`RE_O±i⁄s
().
	`£t_utf8
(
åue
);

467 
	}
}

469 
ölöe
 
RE_O±i⁄s
 
	$CASELESS
() {

470  
	`RE_O±i⁄s
().
	`£t_ˇ£Àss
(
åue
);

471 
	}
}

472 
ölöe
 
RE_O±i⁄s
 
	$MULTILINE
() {

473  
	`RE_O±i⁄s
().
	`£t_mu…ûöe
(
åue
);

474 
	}
}

476 
ölöe
 
RE_O±i⁄s
 
	$DOTALL
() {

477  
	`RE_O±i⁄s
().
	`£t_dŸÆl
(
åue
);

478 
	}
}

480 
ölöe
 
RE_O±i⁄s
 
	$EXTENDED
() {

481  
	`RE_O±i⁄s
().
	`£t_exãnded
(
åue
);

482 
	}
}

487 ˛as†
	cPCRECPP_EXP_DEFN
 
	gRE
 {

488 
	gpublic
:

491 
RE
(c⁄° 
°rög
& 
∑t
Ë{ 
Inô
’©, 
NULL
); }

492 
RE
(c⁄° 
°rög
& 
∑t
, c⁄° 
RE_O±i⁄s
& 
›ti⁄
Ë{ 
Inô
(pat, &option); }

493 
RE
(c⁄° * 
∑t
Ë{ 
Inô
’©, 
NULL
); }

494 
RE
(c⁄° * 
∑t
, c⁄° 
RE_O±i⁄s
& 
›ti⁄
Ë{ 
Inô
(pat, &option); }

495 
RE
(c⁄° * 
∑t
) {

496 
Inô
(
ªöãΩªt_ˇ°
<c⁄° *>(
∑t
), 
NULL
);

498 
RE
(c⁄° * 
∑t
, c⁄° 
RE_O±i⁄s
& 
›ti⁄
) {

499 
Inô
(
ªöãΩªt_ˇ°
<c⁄° *>(
∑t
), &
›ti⁄
);

504 
RE
(c⁄° RE& 
ª
Ë{ 
Inô
‘e.
∑âîn_
, &ª.
›ti⁄s_
); }

505 c⁄° 
	gRE
& 
	g›î©‹
=(c⁄° 
RE
& 
ª
) {

506 i‡(
this
 !&
ª
) {

507 
CÀ™up
();

513 
Inô
(
ª
.
∑âîn_
, &ª.
›ti⁄s_
);

515  *
	gthis
;

519 ~
RE
();

524 c⁄° 
	g°rög
& 
∑âîn
(Ëc⁄° {  
	g∑âîn_
; }

528 c⁄° 
	g°rög
& 
îr‹
(Ëc⁄° {  *
	gîr‹_
; }

535 
boﬁ
 
FuŒM©ch
(c⁄° 
SåögPõ˚
& 
ãxt
,

536 c⁄° 
Arg
& 
±r1
 = 
no_¨g
,

537 c⁄° 
Arg
& 
±r2
 = 
no_¨g
,

538 c⁄° 
Arg
& 
±r3
 = 
no_¨g
,

539 c⁄° 
Arg
& 
±r4
 = 
no_¨g
,

540 c⁄° 
Arg
& 
±r5
 = 
no_¨g
,

541 c⁄° 
Arg
& 
±r6
 = 
no_¨g
,

542 c⁄° 
Arg
& 
±r7
 = 
no_¨g
,

543 c⁄° 
Arg
& 
±r8
 = 
no_¨g
,

544 c⁄° 
Arg
& 
±r9
 = 
no_¨g
,

545 c⁄° 
Arg
& 
±r10
 = 
no_¨g
,

546 c⁄° 
Arg
& 
±r11
 = 
no_¨g
,

547 c⁄° 
Arg
& 
±r12
 = 
no_¨g
,

548 c⁄° 
Arg
& 
±r13
 = 
no_¨g
,

549 c⁄° 
Arg
& 
±r14
 = 
no_¨g
,

550 c⁄° 
Arg
& 
±r15
 = 
no_¨g
,

551 c⁄° 
Arg
& 
±r16
 = 
no_¨g
) const;

553 
boﬁ
 
P¨tülM©ch
(c⁄° 
SåögPõ˚
& 
ãxt
,

554 c⁄° 
Arg
& 
±r1
 = 
no_¨g
,

555 c⁄° 
Arg
& 
±r2
 = 
no_¨g
,

556 c⁄° 
Arg
& 
±r3
 = 
no_¨g
,

557 c⁄° 
Arg
& 
±r4
 = 
no_¨g
,

558 c⁄° 
Arg
& 
±r5
 = 
no_¨g
,

559 c⁄° 
Arg
& 
±r6
 = 
no_¨g
,

560 c⁄° 
Arg
& 
±r7
 = 
no_¨g
,

561 c⁄° 
Arg
& 
±r8
 = 
no_¨g
,

562 c⁄° 
Arg
& 
±r9
 = 
no_¨g
,

563 c⁄° 
Arg
& 
±r10
 = 
no_¨g
,

564 c⁄° 
Arg
& 
±r11
 = 
no_¨g
,

565 c⁄° 
Arg
& 
±r12
 = 
no_¨g
,

566 c⁄° 
Arg
& 
±r13
 = 
no_¨g
,

567 c⁄° 
Arg
& 
±r14
 = 
no_¨g
,

568 c⁄° 
Arg
& 
±r15
 = 
no_¨g
,

569 c⁄° 
Arg
& 
±r16
 = 
no_¨g
) const;

571 
boﬁ
 
C⁄sume
(
SåögPõ˚
* 
öput
,

572 c⁄° 
Arg
& 
±r1
 = 
no_¨g
,

573 c⁄° 
Arg
& 
±r2
 = 
no_¨g
,

574 c⁄° 
Arg
& 
±r3
 = 
no_¨g
,

575 c⁄° 
Arg
& 
±r4
 = 
no_¨g
,

576 c⁄° 
Arg
& 
±r5
 = 
no_¨g
,

577 c⁄° 
Arg
& 
±r6
 = 
no_¨g
,

578 c⁄° 
Arg
& 
±r7
 = 
no_¨g
,

579 c⁄° 
Arg
& 
±r8
 = 
no_¨g
,

580 c⁄° 
Arg
& 
±r9
 = 
no_¨g
,

581 c⁄° 
Arg
& 
±r10
 = 
no_¨g
,

582 c⁄° 
Arg
& 
±r11
 = 
no_¨g
,

583 c⁄° 
Arg
& 
±r12
 = 
no_¨g
,

584 c⁄° 
Arg
& 
±r13
 = 
no_¨g
,

585 c⁄° 
Arg
& 
±r14
 = 
no_¨g
,

586 c⁄° 
Arg
& 
±r15
 = 
no_¨g
,

587 c⁄° 
Arg
& 
±r16
 = 
no_¨g
) const;

589 
boﬁ
 
FödAndC⁄sume
(
SåögPõ˚
* 
öput
,

590 c⁄° 
Arg
& 
±r1
 = 
no_¨g
,

591 c⁄° 
Arg
& 
±r2
 = 
no_¨g
,

592 c⁄° 
Arg
& 
±r3
 = 
no_¨g
,

593 c⁄° 
Arg
& 
±r4
 = 
no_¨g
,

594 c⁄° 
Arg
& 
±r5
 = 
no_¨g
,

595 c⁄° 
Arg
& 
±r6
 = 
no_¨g
,

596 c⁄° 
Arg
& 
±r7
 = 
no_¨g
,

597 c⁄° 
Arg
& 
±r8
 = 
no_¨g
,

598 c⁄° 
Arg
& 
±r9
 = 
no_¨g
,

599 c⁄° 
Arg
& 
±r10
 = 
no_¨g
,

600 c⁄° 
Arg
& 
±r11
 = 
no_¨g
,

601 c⁄° 
Arg
& 
±r12
 = 
no_¨g
,

602 c⁄° 
Arg
& 
±r13
 = 
no_¨g
,

603 c⁄° 
Arg
& 
±r14
 = 
no_¨g
,

604 c⁄° 
Arg
& 
±r15
 = 
no_¨g
,

605 c⁄° 
Arg
& 
±r16
 = 
no_¨g
) const;

607 
boﬁ
 
Rïœ˚
(c⁄° 
SåögPõ˚
& 
ªwrôe
,

608 
°rög
 *
°r
) const;

610 
GlobÆRïœ˚
(c⁄° 
SåögPõ˚
& 
ªwrôe
,

611 
°rög
 *
°r
) const;

613 
boﬁ
 
Exåa˘
(c⁄° 
SåögPõ˚
 &
ªwrôe
,

614 c⁄° 
SåögPõ˚
 &
ãxt
,

615 
°rög
 *
out
) const;

626 
°rög
 
QuŸeMëa
(c⁄° 
SåögPõ˚
& 
unquŸed
);

632 
	eAnch‹
 {

633 
	gUNANCHORED
,

634 
	gANCHOR_START
,

635 
	gANCHOR_BOTH


640 
boﬁ
 
DoM©ch
(c⁄° 
SåögPõ˚
& 
ãxt
,

641 
Anch‹
 
™ch‹
,

642 * 
c⁄sumed
,

643 c⁄° 
Arg
* c⁄°* 
¨gs
, 
n
) const;

647 
NumbîOfC≠turögGroups
() const;

656 
Arg
 
	gno_¨g
;

658 
	g¥iv©e
:

660 
Inô
(c⁄° 
°rög
& 
∑âîn
, c⁄° 
RE_O±i⁄s
* 
›ti⁄s
);

662 
Inô
(c⁄° *
∑âîn
, c⁄° 
RE_O±i⁄s
* 
›ti⁄s
);

663 
CÀ™up
();

676 
TryM©ch
(c⁄° 
SåögPõ˚
& 
ãxt
,

677 
°¨ços
,

678 
Anch‹
 
™ch‹
,

679 
boﬁ
 
em±y_ok
,

680 *
vec
,

681 
vecsize
) const;

685 
boﬁ
 
Rewrôe
(
°rög
 *
out
,

686 c⁄° 
SåögPõ˚
& 
ªwrôe
,

687 c⁄° 
SåögPõ˚
& 
ãxt
,

688 *
vec
,

689 
ve˛í
) const;

692 
boﬁ
 
DoM©chIm∂
(c⁄° 
SåögPõ˚
& 
ãxt
,

693 
Anch‹
 
™ch‹
,

694 * 
c⁄sumed
,

695 c⁄° 
Arg
* c⁄° 
¨gs
[],

696 
n
,

697 * 
vec
,

698 
vecsize
) const;

701 
p¸e
* 
Compûe
(
Anch‹
 
™ch‹
);

703 
°rög
 
	g∑âîn_
;

704 
RE_O±i⁄s
 
	g›ti⁄s_
;

705 
p¸e
* 
	gª_fuŒ_
;

706 
p¸e
* 
	gª_∑πül_
;

707 c⁄° 
°rög
* 
	gîr‹_
;

	@/usr/include/pcrecpparg.h

32 #i‚de‡
_PCRECPPARG_H


33 
	#_PCRECPPARG_H


	)

35 
	~<°dlib.h
>

36 
	~<°rög
>

38 
	~<p¸e.h
>

40 
«me•a˚
 
	gp¸e˝p
 {

42 
˛ass
 
	gSåögPõ˚
;

47 
	gãm∂©e
 <
˛ass
 
	gT
>

48 ˛as†
	c_RE_M©chObje˘
 {

49 
	gpublic
:

50 
ölöe
 
boﬁ
 
P¨£
(c⁄° * 
°r
, 
n
, * 
de°
) {

51 i‡(
	gde°
 =
NULL
Ë 
åue
;

52 
T
* 
	gobje˘
 = 
ªöãΩªt_ˇ°
<T*>(
de°
);

53  
	gobje˘
->
P¨£From
(
°r
, 
n
);

57 ˛as†
	cPCRECPP_EXP_DEFN
 
	gArg
 {

58 
	gpublic
:

60 
Arg
();

63 
Arg
(*);

65 
boﬁ
 (*
	tP¨£r
)(c⁄° * 
	t°r
, 
	tn
, * 
	tde°
);

68 
	#PCRE_MAKE_PARSER
(
ty≥
,
«me
) \

69 
	`Arg
(
ty≥
* 
p
Ë: 
	`¨g_
’), 
	`∑r£r_
(
«me
) { } \

70 
	`Arg
(
ty≥
* 
p
, 
P¨£r
 
∑r£r
Ë: 
	`¨g_
’), 
	`∑r£r_
’¨£rË{ }

	)

73 
PCRE_MAKE_PARSER
(, 
∑r£_ch¨
);

74 
PCRE_MAKE_PARSER
(, 
∑r£_uch¨
);

75 
PCRE_MAKE_PARSER
(, 
∑r£_sh‹t
);

76 
PCRE_MAKE_PARSER
(, 
∑r£_ush‹t
);

77 
PCRE_MAKE_PARSER
(, 
∑r£_öt
);

78 
PCRE_MAKE_PARSER
(, 
∑r£_uöt
);

79 
PCRE_MAKE_PARSER
(, 
∑r£_l⁄g
);

80 
PCRE_MAKE_PARSER
(, 
∑r£_ul⁄g
);

82 
PCRE_MAKE_PARSER
(, 
∑r£_l⁄gl⁄g
);

85 
PCRE_MAKE_PARSER
(, 
∑r£_ul⁄gl⁄g
);

87 
PCRE_MAKE_PARSER
(, 
∑r£_Êﬂt
);

88 
PCRE_MAKE_PARSER
(, 
∑r£_doubÀ
);

89 
PCRE_MAKE_PARSER
(
°d
::
°rög
, 
∑r£_°rög
);

90 
PCRE_MAKE_PARSER
(
SåögPõ˚
, 
∑r£_°rögpõ˚
);

92 #unde‡
PCRE_MAKE_PARSER


95 
	gãm∂©e
 <
˛ass
 
	gT
> 
Arg
(
T
*, 
P¨£r
 
∑r£r
);

97 
	gãm∂©e
 <
˛ass
 
	gT
> 
Arg
(
T
* 
p
)

98 : 
¨g_
(
p
), 
∑r£r_
(
_RE_M©chObje˘
<
T
>::
P¨£
) {

102 
boﬁ
 
P¨£
(c⁄° * 
°r
, 
n
) const;

104 
	g¥iv©e
:

105 * 
¨g_
;

106 
P¨£r
 
	g∑r£r_
;

108 
boﬁ
 
∑r£_nuŒ
 (c⁄° * 
°r
, 
n
, * 
de°
);

109 
boﬁ
 
∑r£_ch¨
 (c⁄° * 
°r
, 
n
, * 
de°
);

110 
boﬁ
 
∑r£_uch¨
 (c⁄° * 
°r
, 
n
, * 
de°
);

111 
boﬁ
 
∑r£_Êﬂt
 (c⁄° * 
°r
, 
n
, * 
de°
);

112 
boﬁ
 
∑r£_doubÀ
 (c⁄° * 
°r
, 
n
, * 
de°
);

113 
boﬁ
 
∑r£_°rög
 (c⁄° * 
°r
, 
n
, * 
de°
);

114 
boﬁ
 
∑r£_°rögpõ˚
 (c⁄° * 
°r
, 
n
, * 
de°
);

116 
	#PCRE_DECLARE_INTEGER_PARSER
(
«me
) \

117 
¥iv©e
: \

118 
boﬁ
 
∑r£_
 ## 
	`«me
(c⁄° * 
°r
, 
n
, * 
de°
); \

119 
boﬁ
 
∑r£_
 ## 
«me
 ## 
	`_ødix
( \

120 c⁄° * 
°r
, 
n
, * 
de°
, 
ødix
); \

121 
public
: \

122 
boﬁ
 
∑r£_
 ## 
«me
 ## 
	`_hex
(c⁄° * 
°r
, 
n
, * 
de°
); \

123 
boﬁ
 
∑r£_
 ## 
«me
 ## 
	`_o˘Æ
(c⁄° * 
°r
, 
n
, * 
de°
); \

124 
boﬁ
 
∑r£_
 ## 
«me
 ## 
	`_¸adix
(c⁄° * 
°r
, 
n
, * 
de°
)

	)

126 
PCRE_DECLARE_INTEGER_PARSER
();

127 
PCRE_DECLARE_INTEGER_PARSER
(
ush‹t
);

128 
PCRE_DECLARE_INTEGER_PARSER
();

129 
PCRE_DECLARE_INTEGER_PARSER
(
uöt
);

130 
PCRE_DECLARE_INTEGER_PARSER
();

131 
PCRE_DECLARE_INTEGER_PARSER
(
ul⁄g
);

132 
PCRE_DECLARE_INTEGER_PARSER
(
l⁄gl⁄g
);

133 
PCRE_DECLARE_INTEGER_PARSER
(
ul⁄gl⁄g
);

135 #unde‡
PCRE_DECLARE_INTEGER_PARSER


138 
ölöe
 
	gArg
::
	$Arg
(Ë: 
	`¨g_
(
NULL
), 
	$∑r£r_
(
∑r£_nuŒ
Ë{ 
	}
}

139 
ölöe
 
	gArg
::
	$Arg
(* 
p
Ë: 
	`¨g_
’), 
	$∑r£r_
(
∑r£_nuŒ
Ë{ 
	}
}

141 
ölöe
 
boﬁ
 
	gArg
::
	$P¨£
(c⁄° * 
°r
, 
n
) const {

142  (*
∑r£r_
)(
°r
, 
n
, 
¨g_
);

143 
	}
}

146 
	#MAKE_INTEGER_PARSER
(
ty≥
, 
«me
) \

147 
ölöe
 
Arg
 
	$Hex
(
ty≥
* 
±r
) { \

148  
	`Arg
(
±r
, 
Arg
::
∑r£_
 ## 
«me
 ## 
_hex
); 
	}
} \

149 
ölöe
 
Arg
 
	$O˘Æ
(
ty≥
* 
±r
) { \

150  
	`Arg
(
±r
, 
Arg
::
∑r£_
 ## 
«me
 ## 
_o˘Æ
); 
	}
} \

151 
ölöe
 
Arg
 
	$CRadix
(
ty≥
* 
±r
) { \

152  
	`Arg
(
±r
, 
Arg
::
∑r£_
 ## 
«me
 ## 
_¸adix
); 
	}

	)
}

154 
	$MAKE_INTEGER_PARSER
(, )

155 
	$MAKE_INTEGER_PARSER
(, 
ush‹t
)

156 
	$MAKE_INTEGER_PARSER
(, )

157 
	$MAKE_INTEGER_PARSER
(, 
uöt
)

158 
	$MAKE_INTEGER_PARSER
(, )

159 
	$MAKE_INTEGER_PARSER
(, 
ul⁄g
)

161 
	$MAKE_INTEGER_PARSER
(, 
l⁄gl⁄g
)

164 
	$MAKE_INTEGER_PARSER
(, 
ul⁄gl⁄g
)

167 #unde‡
PCRE_IS_SET


168 #unde‡
PCRE_SET_OR_CLEAR


169 #unde‡
MAKE_INTEGER_PARSER


171 
	}
}

	@/usr/include/pcreposix.h

5 #i‚de‡
_PCREPOSIX_H


6 
	#_PCREPOSIX_H


	)

45 
	~<°dlib.h
>

49 #ifde‡
__˝lu•lus


55 
	#REG_ICASE
 0x0001

	)

56 
	#REG_NEWLINE
 0x0002

	)

57 
	#REG_NOTBOL
 0x0004

	)

58 
	#REG_NOTEOL
 0x0008

	)

59 
	#REG_DOTALL
 0x0010

	)

60 
	#REG_NOSUB
 0x0020

	)

61 
	#REG_UTF8
 0x0040

	)

62 
	#REG_STARTEND
 0x0080

	)

63 
	#REG_NOTEMPTY
 0x0100

	)

64 
	#REG_UNGREEDY
 0x0200

	)

65 
	#REG_UCP
 0x0400

	)

70 
	#REG_EXTENDED
 0

	)

75 
REG_ASSERT
 = 1,

76 
REG_BADBR
,

77 
REG_BADPAT
,

78 
REG_BADRPT
,

79 
REG_EBRACE
,

80 
REG_EBRACK
,

81 
REG_ECOLLATE
,

82 
REG_ECTYPE
,

83 
REG_EESCAPE
,

84 
REG_EMPTY
,

85 
REG_EPAREN
,

86 
REG_ERANGE
,

87 
REG_ESIZE
,

88 
REG_ESPACE
,

89 
REG_ESUBREG
,

90 
REG_INVARG
,

91 
REG_NOMATCH


98 *
ª_p¸e
;

99 
size_t
 
ª_nsub
;

100 
size_t
 
ª_îroff£t
;

101 } 
	tªgex_t
;

105 
	tªgoff_t
;

108 
ªgoff_t
 
rm_so
;

109 
ªgoff_t
 
rm_eo
;

110 } 
	tªgm©ch_t
;

117 #i‡
deföed
(
_WIN32
Ë&& !deföed(
PCRE_STATIC
Ë&& !deföed(
PCREPOSIX_EXP_DECL
)

118 
	#PCREPOSIX_EXP_DECL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

119 
	#PCREPOSIX_EXP_DEFN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

124 #i‚de‡
PCREPOSIX_EXP_DECL


125 #ifde‡
__˝lu•lus


126 
	#PCREPOSIX_EXP_DECL
 "C"

	)

127 
	#PCREPOSIX_EXP_DEFN
 "C"

	)

129 
	#PCREPOSIX_EXP_DECL
 

	)

130 
	#PCREPOSIX_EXP_DEFN
 

	)

136 
PCREPOSIX_EXP_DECL
 
p¸ïosix_ªgcomp
(
ªgex_t
 *, const *, );

137 
PCREPOSIX_EXP_DECL
 
p¸ïosix_ªgexec
(c⁄° 
ªgex_t
 *, c⁄° *, 
size_t
,

138 
ªgm©ch_t
 *, );

139 
PCREPOSIX_EXP_DECL
 
size_t
 
p¸ïosix_ªgîr‹
(, c⁄° 
ªgex_t
 *, *, size_t);

140 
PCREPOSIX_EXP_DECL
 
p¸ïosix_ªg‰ì
(
ªgex_t
 *);

142 #ifde‡
__˝lu•lus


146 
	#ªgcomp
 
p¸ïosix_ªgcomp


	)

147 
	#ªgexec
 
p¸ïosix_ªgexec


	)

148 
	#ªgîr‹
 
p¸ïosix_ªgîr‹


	)

149 
	#ªg‰ì
 
p¸ïosix_ªg‰ì


	)

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/printf.h

20 #i‚def 
_PRINTF_H


22 
	#_PRINTF_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


27 
	#__√ed_FILE


	)

28 
	~<°dio.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

32 
	~<°d¨g.h
>

35 
	s¥ötf_öfo


37 
	m¥ec
;

38 
	mwidth
;

39 
wch¨_t
 
	m•ec
;

40 
	mis_l⁄g_doubÀ
:1;

41 
	mis_sh‹t
:1;

42 
	mis_l⁄g
:1;

43 
	mÆt
:1;

44 
	m•a˚
:1;

45 
	mÀ·
:1;

46 
	mshowsign
:1;

47 
	mgroup
:1;

48 
	mexåa
:1;

49 
	mis_ch¨
:1;

50 
	mwide
:1;

51 
	mi18n
:1;

52 
	m__∑d
:4;

53 
	mu£r
;

54 
wch¨_t
 
	m∑d
;

68 
	t¥ötf_fun˘i⁄
 (
	tFILE
 *
	t__°ªam
,

69 
	t__c⁄°
 
	t¥ötf_öfo
 *
	t__öfo
,

70 
	t__c⁄°
 *__c⁄° *
	t__¨gs
);

80 
	t¥ötf_¨göfo_size_fun˘i⁄
 (
	t__c⁄°
 
	t¥ötf_öfo
 *
	t__öfo
,

81 
	tsize_t
 
	t__n
, *
	t__¨gty≥s
,

82 *
	t__size
);

86 
	t¥ötf_¨göfo_fun˘i⁄
 (
	t__c⁄°
 
	t¥ötf_öfo
 *
	t__öfo
,

87 
	tsize_t
 
	t__n
, *
	t__¨gty≥s
);

91 
	t¥ötf_va_¨g_fun˘i⁄
 (*
	t__mem
, 
	tva_li°
 *
	t__≠
);

98 
	$ªgi°î_¥ötf_•ecifõr
 (
__•ec
, 
¥ötf_fun˘i⁄
 
__func
,

99 
¥ötf_¨göfo_size_fun˘i⁄
 
__¨göfo
)

100 
__THROW
;

107 
	$ªgi°î_¥ötf_fun˘i⁄
 (
__•ec
, 
¥ötf_fun˘i⁄
 
__func
,

108 
¥ötf_¨göfo_fun˘i⁄
 
__¨göfo
)

109 
__THROW
 
__©åibuã_dïªˇãd__
;

116 
	$ªgi°î_¥ötf_modifõr
 (
__c⁄°
 
wch¨_t
 *
__°r
Ë
__wur
 
__THROW
;

122 
	$ªgi°î_¥ötf_ty≥
 (
¥ötf_va_¨g_fun˘i⁄
 
__f˘
Ë
__wur
 
__THROW
;

136 
size_t
 
	$∑r£_¥ötf_f‹m©
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
size_t
 
__n
,

137 *
__ª°ri˘
 
__¨gty≥s
Ë
__THROW
;

148 
PA_INT
,

149 
PA_CHAR
,

150 
PA_WCHAR
,

151 
PA_STRING
,

152 
PA_WSTRING
,

153 
PA_POINTER
,

154 
PA_FLOAT
,

155 
PA_DOUBLE
,

156 
PA_LAST


160 
	#PA_FLAG_MASK
 0xff00

	)

161 
	#PA_FLAG_LONG_LONG
 (1 << 8)

	)

162 
	#PA_FLAG_LONG_DOUBLE
 
PA_FLAG_LONG_LONG


	)

163 
	#PA_FLAG_LONG
 (1 << 9)

	)

164 
	#PA_FLAG_SHORT
 (1 << 10)

	)

165 
	#PA_FLAG_PTR
 (1 << 11)

	)

175 
	$¥ötf_size
 (
FILE
 *
__ª°ri˘
 
__Â
,

176 
__c⁄°
 
¥ötf_öfo
 *
__öfo
,

177 
__c⁄°
 *__c⁄° *
__ª°ri˘
 
__¨gs
Ë
__THROW
;

180 
	$¥ötf_size_öfo
 (
__c⁄°
 
¥ötf_öfo
 *
__ª°ri˘


181 
__öfo
, 
size_t
 
__n
, *
__ª°ri˘
 
__¨gty≥s
)

182 
__THROW
;

184 #ifde‡
__LDBL_COMPAT


185 
	~<bôs/¥ötf-ldbl.h
>

188 
__END_DECLS


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/pty.h

20 #i‚de‡
_PTY_H


21 
	#_PTY_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<ãrmios.h
>

26 
	~<sys/io˘l.h
>

29 
__BEGIN_DECLS


34 
	$›í±y
 (*
__ama°î
, *
__a¶ave
, *
__«me
,

35 c⁄° 
ãrmios
 *
__ãrmp
,

36 c⁄° 
wösize
 *
__wöp
Ë
__THROW
;

40 
	$f‹k±y
 (*
__ama°î
, *
__«me
,

41 c⁄° 
ãrmios
 *
__ãrmp
,

42 c⁄° 
wösize
 *
__wöp
Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/pwd.h

23 #i‚def 
_PWD_H


24 
	#_PWD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 
	#__√ed_size_t


	)

33 
	~<°ddef.h
>

35 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


38 #i‚de‡
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

43 #i‚de‡
__uid_t_deföed


44 
__uid_t
 
	tuid_t
;

45 
	#__uid_t_deföed


	)

50 
	s∑sswd


52 *
	mpw_«me
;

53 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


63 
	#__√ed_FILE


	)

64 
	~<°dio.h
>

68 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


73 
£çwít
 ();

79 
ídpwít
 ();

85 
∑sswd
 *
gëpwít
 ();

88 #ifdef 
__USE_SVID


95 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

103 
puçwít
 (
__c⁄°
 
∑sswd
 *
__ª°ri˘
 
__p
,

104 
FILE
 *
__ª°ri˘
 
__f
);

111 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

117 
∑sswd
 *
gëpw«m
 (
__c⁄°
 *
__«me
);

119 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


121 #ifde‡
__USE_MISC


124 
	#NSS_BUFLEN_PASSWD
 1024

	)

135 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


140 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

145 
gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

150 
gëpw«m_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

151 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_SVID


164 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

172 #ifde‡
__USE_GNU


181 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

184 
	g__END_DECLS


	@/usr/include/re_comp.h

19 #i‚de‡
_RE_COMP_H


20 
	#_RE_COMP_H
 1

	)

24 
	~<ªgex.h
>

	@/usr/include/regex.h

22 #i‚de‡
_REGEX_H


23 
	#_REGEX_H
 1

	)

25 
	~<sys/ty≥s.h
>

26 
	~<gnu/›ti⁄-groups.h
>

29 #ifde‡
__˝lu•lus


37 
	ts_ªg_t
;

38 
	ta˘ive_ªg_t
;

45 
	tªg_sy¡ax_t
;

47 #ifde‡
__USE_GNU


50 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

55 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

61 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

75 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

83 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

87 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

91 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

95 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

99 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

104 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

108 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

112 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

117 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

121 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

125 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

129 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

135 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

139 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

143 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

147 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

155 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

160 
	#RE_INVALID_INTERVAL_ORD
 (
RE_DEBUG
 << 1)

	)

163 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


166 
	#RE_ICASE
 (
RE_INVALID_INTERVAL_ORD
 << 1)

	)

171 
	#RE_CARET_ANCHORS_HERE
 (
RE_ICASE
 << 1)

	)

175 
	#RE_CONTEXT_INVALID_DUP
 (
RE_CARET_ANCHORS_HERE
 << 1)

	)

179 
	#RE_NO_SUB
 (
RE_CONTEXT_INVALID_DUP
 << 1)

	)

187 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

189 #ifde‡
__USE_GNU


194 
	#RE_SYNTAX_EMACS
 0

	)

196 
	#RE_SYNTAX_AWK
 \

197 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

198 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

199 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

200 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

201 | 
RE_CHAR_CLASSES
 \

202 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

204 
	#RE_SYNTAX_GNU_AWK
 \

205 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

206 | 
RE_INVALID_INTERVAL_ORD
) \

207 & ~(
RE_DOT_NOT_NULL
 | 
RE_CONTEXT_INDEP_OPS
 \

208 | 
RE_CONTEXT_INVALID_OPS
 ))

	)

210 
	#RE_SYNTAX_POSIX_AWK
 \

211 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

212 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
 \

213 | 
RE_INVALID_INTERVAL_ORD
)

	)

215 
	#RE_SYNTAX_GREP
 \

216 (
RE_BK_PLUS_QM
 | 
RE_CHAR_CLASSES
 \

217 | 
RE_HAT_LISTS_NOT_NEWLINE
 | 
RE_INTERVALS
 \

218 | 
RE_NEWLINE_ALT
)

	)

220 
	#RE_SYNTAX_EGREP
 \

221 (
RE_CHAR_CLASSES
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

222 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_HAT_LISTS_NOT_NEWLINE
 \

223 | 
RE_NEWLINE_ALT
 | 
RE_NO_BK_PARENS
 \

224 | 
RE_NO_BK_VBAR
)

	)

226 
	#RE_SYNTAX_POSIX_EGREP
 \

227 (
RE_SYNTAX_EGREP
 | 
RE_INTERVALS
 | 
RE_NO_BK_BRACES
 \

228 | 
RE_INVALID_INTERVAL_ORD
)

	)

231 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

233 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

236 
	#_RE_SYNTAX_POSIX_COMMON
 \

237 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

238 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

240 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


241 
	#RE_SYNTAX_POSIX_BASIC
 \

242 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
 | 
RE_CONTEXT_INVALID_DUP
)

	)

244 
	#RE_SYNTAX_POSIX_BASIC
 \

245 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
)

	)

251 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

252 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

254 
	#RE_SYNTAX_POSIX_EXTENDED
 \

255 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

256 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

257 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

258 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

262 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

263 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

264 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

265 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

266 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

272 #ifde‡
RE_DUP_MAX


273 #unde‡
RE_DUP_MAX


276 
	#RE_DUP_MAX
 (0x7fff)

	)

284 
	#REG_EXTENDED
 1

	)

288 
	#REG_ICASE
 (
REG_EXTENDED
 << 1)

	)

293 
	#REG_NEWLINE
 (
REG_ICASE
 << 1)

	)

297 
	#REG_NOSUB
 (
REG_NEWLINE
 << 1)

	)

307 
	#REG_NOTBOL
 1

	)

310 
	#REG_NOTEOL
 (1 << 1)

	)

312 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


315 
	#REG_STARTEND
 (1 << 2)

	)

323 #i‡
deföed
 
_XOPEN_SOURCE
 || deföed 
__USE_XOPEN2K


324 
	gREG_ENOSYS
 = -1,

327 
	gREG_NOERROR
 = 0,

328 
	gREG_NOMATCH
,

332 
	gREG_BADPAT
,

333 
	gREG_ECOLLATE
,

334 
	gREG_ECTYPE
,

335 
	gREG_EESCAPE
,

336 
	gREG_ESUBREG
,

337 
	gREG_EBRACK
,

338 
	gREG_EPAREN
,

339 
	gREG_EBRACE
,

340 
	gREG_BADBR
,

341 
	gREG_ERANGE
,

342 
	gREG_ESPACE
,

343 
	gREG_BADRPT
,

346 
	gREG_EEND
,

347 
	gREG_ESIZE
,

348 
	gREG_ERPAREN


349 } 
	tªg_îrcode_t
;

357 #i‚de‡
RE_TRANSLATE_TYPE


358 
	#__RE_TRANSLATE_TYPE
 *

	)

359 #ifde‡
__USE_GNU


360 
	#RE_TRANSLATE_TYPE
 
__RE_TRANSLATE_TYPE


	)

364 #ifde‡
__USE_GNU


365 
	#__REPB_PREFIX
(
«me
Ë
	)
name

367 
	#__REPB_PREFIX
(
«me
Ë
__
##
	)
name

370 
	sª_∑âîn_buf„r


375 *
__REPB_PREFIX
(
buf„r
);

378 
__REPB_PREFIX
(
Æloˇãd
);

381 
__REPB_PREFIX
(
u£d
);

384 
ªg_sy¡ax_t
 
__REPB_PREFIX
(
sy¡ax
);

389 *
__REPB_PREFIX
(
Á°m≠
);

395 
__RE_TRANSLATE_TYPE
 
__REPB_PREFIX
(
å™¶©e
);

398 
size_t
 
	gª_nsub
;

404 
__REPB_PREFIX
(
ˇn_be_nuŒ
) : 1;

410 #ifde‡
__USE_GNU


411 
	#REGS_UNALLOCATED
 0

	)

412 
	#REGS_REALLOCATE
 1

	)

413 
	#REGS_FIXED
 2

	)

415 
__REPB_PREFIX
(
ªgs_Æloˇãd
) : 2;

419 
__REPB_PREFIX
(
Á°m≠_accuøã
) : 1;

423 
__REPB_PREFIX
(
no_sub
) : 1;

427 
__REPB_PREFIX
(
nŸ_bﬁ
) : 1;

430 
__REPB_PREFIX
(
nŸ_eﬁ
) : 1;

433 
__REPB_PREFIX
(
√wlöe_™ch‹
) : 1;

436 
ª_∑âîn_buf„r
 
	tªgex_t
;

439 
	tªgoff_t
;

442 #ifde‡
__USE_GNU


445 
	sª_ªgi°îs


447 
	gnum_ªgs
;

448 
ªgoff_t
 *
	g°¨t
;

449 
ªgoff_t
 *
	gíd
;

456 #i‚de‡
RE_NREGS


457 
	#RE_NREGS
 30

	)

467 
ªgoff_t
 
	grm_so
;

468 
ªgoff_t
 
	grm_eo
;

469 } 
	tªgm©ch_t
;

473 #ifde‡
__USE_GNU


476 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 (ªg_sy¡ax_à
__sy¡ax
);

486 c⁄° *
ª_compûe_∑âîn
 (c⁄° *
__∑âîn
, 
size_t
 
__Àngth
,

487 
ª_∑âîn_buf„r
 *
__buf„r
);

493 
ª_compûe_Á°m≠
 (
ª_∑âîn_buf„r
 *
__buf„r
);

501 
ª_£¨ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

502 
__Àngth
, 
__°¨t
, 
__ønge
,

503 
ª_ªgi°îs
 *
__ªgs
);

508 
ª_£¨ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

509 c⁄° *
__°rög1
, 
__Àngth1
,

510 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

511 
__ønge
, 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

516 
ª_m©ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

517 
__Àngth
, 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
);

521 
ª_m©ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

522 c⁄° *
__°rög1
, 
__Àngth1
,

523 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

524 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

539 
ª_£t_ªgi°îs
 (
ª_∑âîn_buf„r
 *
__buf„r
,

540 
ª_ªgi°îs
 *
__ªgs
,

541 
__num_ªgs
,

542 
ªgoff_t
 *
__°¨ts
,Ñegoff_à*
__íds
);

545 #i‡
deföed
 
_REGEX_RE_COMP
 || (deföed 
_LIBC
 && deföed 
__USE_BSD
)

546 #i‚de‡
_CRAY


548 *
ª_comp
 (const *);

549 
ª_exec
 (const *);

555 #i‚de‡
__ª°ri˘


556 #i‡! (2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
))

557 #i‡
deföed
 
ª°ri˘
 || 199901L <
__STDC_VERSION__


558 
	#__ª°ri˘
 
ª°ri˘


	)

560 
	#__ª°ri˘


	)

565 #i‚de‡
__ª°ri˘_¨r


566 #i‡(
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 1)) \

567 && !
deföed
 
	g__GNUG__


568 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

570 
	#__ª°ri˘_¨r


	)

575 
ªgcomp
 (
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

576 c⁄° *
__ª°ri˘
 
__∑âîn
,

577 
__cÊags
);

579 
ªgexec
 (c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

580 c⁄° *
__ª°ri˘
 
__°rög
, 
size_t
 
__nm©ch
,

581 
ªgm©ch_t
 
__pm©ch
[
__ª°ri˘_¨r
],

582 
__eÊags
);

584 
size_t
 
ªgîr‹
 (
__îrcode
, c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

585 *
__ª°ri˘
 
__îrbuf
, 
size_t
 
__îrbuf_size
);

587 
ªg‰ì
 (
ªgex_t
 *
__¥eg
);

590 #ifde‡
__˝lu•lus


	@/usr/include/regexp.h

21 #i‚de‡
_REGEXP_H


22 
	#_REGEXP_H
 1

	)

33 
	~<„©uªs.h
>

34 
	~<Æloˇ.h
>

35 
	~<ªgex.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

83 
__BEGIN_DECLS


87 *
loc1
;

88 *
loc2
;

92 *
locs
;

95 #i‚de‡
__DO_NOT_DEFINE_COMPILE


103 
	$compûe
 (*
__ª°ri˘
 
ö°rög
, *__ª°ri˘ 
expbuf
,

104 
__c⁄°
 *
__ª°ri˘
 
ídbuf
, 
eof
)

106 *
__öput_buf„r
 = 
NULL
;

107 
size_t
 
__öput_size
 = 0;

108 
size_t
 
__cuºít_size
 = 0;

109 
__ch
;

110 
__îr‹
;

111 
INIT


116 
ªgex_t
 *
__ex¥_±r
;

117 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

118 c⁄° 
size_t
 
__ªq
 = 
	`__Æignof__
 (
ªgex_t
 *);

122 c⁄° 
size_t
 
__ªq
 = 8;

124 
expbuf
 +
__ªq
;

125 
expbuf
 -”xpbu‡- ((*Ë0)Ë% 
__ªq
;

126 i‡(
ídbuf
 < 
expbuf
 +  (
ªgex_t
))

128 
	`ERROR
 (50);

130 
__ex¥_±r
 = (
ªgex_t
 *Ë
expbuf
;

133 
__ex¥_±r
->
	`__REPB_PREFIX
 (
buf„r
Ë
expbuf
 +  (
ªgex_t
);

134 
__ex¥_±r
->
	`__REPB_PREFIX
 (
Æloˇãd
)

135 
ídbuf
 - (*Ë
__ex¥_±r
->
	`__REPB_PREFIX
 (
buf„r
);

137 (
__ch
 = (
	`GETC
 ())Ë!
eof
)

139 i‡(
__ch
 == '\0' || __ch == '\n')

141 
	`UNGETC
 (
__ch
);

145 i‡(
__cuºít_size
 + 1 >
__öput_size
)

147 
size_t
 
__√w_size
 = 
__öput_size
 ? 2 * __input_size : 128;

148 *
__√w_room
 = (*Ë
	`Æloˇ
 (
__√w_size
);

150 i‡(
__√w_room
 + 
__√w_size
 =
__öput_buf„r
)

152 
__öput_size
 +
__√w_size
;

153 
__öput_buf„r
 = (*Ë
	`mem˝y
 (
__√w_room
, __input_buffer,

154 
__cuºít_size
);

156 i‡(
__öput_buf„r
 + 
__öput_size
 =
__√w_room
)

157 
__öput_size
 +
__√w_size
;

160 
__öput_size
 = 
__√w_size
;

161 
__öput_buf„r
 = (*Ë
	`mem˝y
 (
__√w_room
, __input_buffer,

162 
__cuºít_size
);

165 
__öput_buf„r
[
__cuºít_size
++] = 
__ch
;

167 i‡(
__cuºít_size
)

168 
__öput_buf„r
[
__cuºít_size
++] = '\0';

170 
__öput_buf„r
 = "";

173 
__îr‹
 = 
	`ªgcomp
 (
__ex¥_±r
, 
__öput_buf„r
, 
REG_NEWLINE
);

174 i‡(
__îr‹
 != 0)

176 
__îr‹
)

178 
REG_BADPAT
:

179 
REG_ECOLLATE
:

180 
REG_ECTYPE
:

181 
REG_EESCAPE
:

182 
REG_BADRPT
:

183 
REG_EEND
:

184 
REG_ERPAREN
:

187 
	`RETURN
 (36);

188 
REG_ESUBREG
:

189 
	`RETURN
 (25);

190 
REG_EBRACK
:

191 
	`RETURN
 (49);

192 
REG_EPAREN
:

193 
	`RETURN
 (42);

194 
REG_EBRACE
:

195 
	`RETURN
 (44);

196 
REG_BADBR
:

197 
	`RETURN
 (46);

198 
REG_ERANGE
:

199 
	`RETURN
 (11);

200 
REG_ESPACE
:

201 
REG_ESIZE
:

202 
	`ERROR
 (50);

206 
	`RETURN
 ((*Ë(
__ex¥_±r
->
	`__REPB_PREFIX
 (
buf„r
)

207 + 
__ex¥_±r
->
	`__REPB_PREFIX
 (
u£d
)));

208 
	}
}

216 
	$°ï
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

217 
__c⁄°
 *
__ª°ri˘
 
__expbuf
Ë
__THROW
;

222 
	$adv™˚
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

223 
__c⁄°
 *
__ª°ri˘
 
__expbuf
Ë
__THROW
;

226 
__END_DECLS


	@/usr/include/resolv.h

52 #i‚de‡
_RESOLV_H_


56 
	~<sys/ty≥s.h
>

57 
	~<√töë/ö.h
>

59 #i‚de‡
__√ed_ªs_°©e


60 
	#_RESOLV_H_


	)

62 
	~<sys/∑øm.h
>

63 
	~<sys/cdefs.h
>

64 
	~<°dio.h
>

65 
	~<¨∑/«me£r.h
>

68 #i‚de‡
__ªs_°©e_deföed


69 
	#__ªs_°©e_deföed


	)

71 íum { 
	mªs_gﬂhód
, 
	mªs_√xäs
, 
	mªs_modifõd
, 
	mªs_d⁄e
, 
	mªs_îr‹
 }

72 
	tªs_£ndhooka˘
;

74 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_qhook
Ë(
	tsockaddr_ö
 * c⁄° *
	t__ns
,

75 c⁄° 
	tu_ch¨
 **
	t__quîy
,

76 *
	t__quîyÀn
,

77 
	tu_ch¨
 *
	t__™s
,

78 
	t__™ssiz
,

79 *
	t__ª•Àn
);

81 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_rhook
Ë(c⁄° 
	tsockaddr_ö
 *
	t__ns
,

82 c⁄° 
	tu_ch¨
 *
	t__quîy
,

83 
	t__quîyÀn
,

84 
	tu_ch¨
 *
	t__™s
,

85 
	t__™ssiz
,

86 *
	t__ª•Àn
);

91 
	#MAXNS
 3

	)

92 
	#MAXDFLSRCH
 3

	)

93 
	#MAXDNSRCH
 6

	)

94 
	#LOCALDOMAINPARTS
 2

	)

96 
	#RES_TIMEOUT
 5

	)

97 
	#MAXRESOLVSORT
 10

	)

98 
	#RES_MAXNDOTS
 15

	)

99 
	#RES_MAXRETRANS
 30

	)

100 
	#RES_MAXRETRY
 5

	)

101 
	#RES_DFLRETRY
 2

	)

102 
	#RES_MAXTIME
 65535

	)

104 
	s__ªs_°©e
 {

105 
ªå™s
;

106 
ªåy
;

107 
u_l⁄g
 
›ti⁄s
;

108 
nscou¡
;

109 
sockaddr_ö


110 
nßddr_li°
[
MAXNS
];

111 
	#nßddr
 
nßddr_li°
[0]

	)

112 
u_sh‹t
 
id
;

114 *
dn§ch
[
MAXDNSRCH
+1];

115 
defd«me
[256];

116 
u_l⁄g
 
pfcode
;

117 
ndŸs
:4;

118 
ns‹t
:4;

119 
ùv6_u«vaû
:1;

120 
unu£d
:23;

122 
ö_addr
 
addr
;

123 
u_öt32_t
 
mask
;

124 } 
s‹t_li°
[
MAXRESOLVSORT
];

126 
ªs_£nd_qhook
 
qhook
;

127 
ªs_£nd_rhook
 
rhook
;

128 
ªs_h_î∫o
;

129 
_vcsock
;

130 
u_öt
 
_Êags
;

133 
∑d
[52];

135 
u_öt16_t
 
nscou¡
;

136 
u_öt16_t
 
nsm≠
[
MAXNS
];

137 
nssocks
[
MAXNS
];

138 
u_öt16_t
 
nscou¡6
;

139 
u_öt16_t
 
nsöô
;

140 
sockaddr_ö6
 *
nßddrs
[
MAXNS
];

141 #ifde‡
_LIBC


142 
öô°amp


143 
	`__©åibuã__
((
∑cked
));

145 
_öô°amp
[2];

147 } 
_ext
;

148 } 
_u
;

151 
__ªs_°©e
 *
	tªs_°©e
;

152 #unde‡
__√ed_ªs_°©e


155 #ifde‡
_RESOLV_H_


164 
	#__RES
 19991006

	)

172 #i‚de‡
_PATH_RESCONF


173 
	#_PATH_RESCONF
 "/ëc/ªsﬁv.c⁄f"

	)

176 
	sªs_sym
 {

177 
numbî
;

178 * 
«me
;

179 * 
hum™«me
;

185 
	#RES_F_VC
 0x00000001

	)

186 
	#RES_F_CONN
 0x00000002

	)

187 
	#RES_F_EDNS0ERR
 0x00000004

	)

190 
	#RES_EXHAUSTIVE
 0x00000001

	)

195 
	#RES_INIT
 0x00000001

	)

196 
	#RES_DEBUG
 0x00000002

	)

197 
	#RES_AAONLY
 0x00000004

	)

198 
	#RES_USEVC
 0x00000008

	)

199 
	#RES_PRIMARY
 0x00000010

	)

200 
	#RES_IGNTC
 0x00000020

	)

201 
	#RES_RECURSE
 0x00000040

	)

202 
	#RES_DEFNAMES
 0x00000080

	)

203 
	#RES_STAYOPEN
 0x00000100

	)

204 
	#RES_DNSRCH
 0x00000200

	)

205 
	#RES_INSECURE1
 0x00000400

	)

206 
	#RES_INSECURE2
 0x00000800

	)

207 
	#RES_NOALIASES
 0x00001000

	)

208 
	#RES_USE_INET6
 0x00002000

	)

209 
	#RES_ROTATE
 0x00004000

	)

210 
	#RES_NOCHECKNAME
 0x00008000

	)

211 
	#RES_KEEPTSIG
 0x00010000

	)

212 
	#RES_BLAST
 0x00020000

	)

213 
	#RES_USEBSTRING
 0x00040000

	)

215 
	#RES_NOIP6DOTINT
 0x00080000

	)

217 
	#RES_USE_EDNS0
 0x00100000

	)

218 
	#RES_SNGLKUP
 0x00200000

	)

219 
	#RES_SNGLKUPREOP
 0x00400000

	)

221 
	#RES_USE_DNSSEC
 0x00800000

	)

222 
	#RES_NOTLDQUERY
 0x01000000

	)

225 
	#RES_DEFAULT
 (
RES_RECURSE
|
RES_DEFNAMES
|
RES_DNSRCH
|
RES_NOIP6DOTINT
)

	)

230 
	#RES_PRF_STATS
 0x00000001

	)

231 
	#RES_PRF_UPDATE
 0x00000002

	)

232 
	#RES_PRF_CLASS
 0x00000004

	)

233 
	#RES_PRF_CMD
 0x00000008

	)

234 
	#RES_PRF_QUES
 0x00000010

	)

235 
	#RES_PRF_ANS
 0x00000020

	)

236 
	#RES_PRF_AUTH
 0x00000040

	)

237 
	#RES_PRF_ADD
 0x00000080

	)

238 
	#RES_PRF_HEAD1
 0x00000100

	)

239 
	#RES_PRF_HEAD2
 0x00000200

	)

240 
	#RES_PRF_TTLID
 0x00000400

	)

241 
	#RES_PRF_HEADX
 0x00000800

	)

242 
	#RES_PRF_QUERY
 0x00001000

	)

243 
	#RES_PRF_REPLY
 0x00002000

	)

244 
	#RES_PRF_INIT
 0x00004000

	)

248 
__BEGIN_DECLS


249 
__ªs_°©e
 *
	$__ªs_°©e
(Ë
	`__©åibuã__
 ((
__c⁄°__
));

250 
__END_DECLS


251 
	#_ªs
 (*
	`__ªs_°©e
())

	)

253 #i‚de‡
__BIND_NOSTATIC


254 
	#Â_nquîy
 
__Â_nquîy


	)

255 
	#Â_quîy
 
__Â_quîy


	)

256 
	#ho°Æüs
 
__ho°Æüs


	)

257 
	#p_quîy
 
__p_quîy


	)

258 
	#ªs_˛o£
 
__ªs_˛o£


	)

259 
	#ªs_öô
 
__ªs_öô


	)

260 
	#ªs_isour£rvî
 
__ªs_isour£rvî


	)

261 
	#ªs_mkquîy
 
__ªs_mkquîy


	)

262 
	#ªs_quîy
 
__ªs_quîy


	)

263 
	#ªs_quîydomaö
 
__ªs_quîydomaö


	)

264 
	#ªs_£¨ch
 
__ªs_£¨ch


	)

265 
	#ªs_£nd
 
__ªs_£nd


	)

267 
__BEGIN_DECLS


268 
	$Â_nquîy
 (c⁄° 
u_ch¨
 *, , 
FILE
 *Ë
__THROW
;

269 
	$Â_quîy
 (c⁄° 
u_ch¨
 *, 
FILE
 *Ë
__THROW
;

270 c⁄° * 
	$ho°Æüs
 (c⁄° *Ë
__THROW
;

271 
	$p_quîy
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

272 
	$ªs_˛o£
 (Ë
__THROW
;

273 
	$ªs_öô
 (Ë
__THROW
;

274 
	$ªs_isour£rvî
 (c⁄° 
sockaddr_ö
 *Ë
__THROW
;

275 
	$ªs_mkquîy
 (, c⁄° *, , , c⁄° 
u_ch¨
 *,

276 , c⁄° 
u_ch¨
 *, u_ch¨ *, Ë
__THROW
;

277 
	$ªs_quîy
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

278 
	$ªs_quîydomaö
 (const *, const *, , ,

279 
u_ch¨
 *, Ë
__THROW
;

280 
	$ªs_£¨ch
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

281 
	$ªs_£nd
 (c⁄° 
u_ch¨
 *, , u_ch¨ *, Ë
__THROW
;

282 
__END_DECLS


285 
	#b64_¡›
 
__b64_¡›


	)

286 
	#b64_±⁄
 
__b64_±⁄


	)

287 
	#dn_comp
 
__dn_comp


	)

288 
	#dn_cou¡_œbñs
 
__dn_cou¡_œbñs


	)

289 
	#dn_ex∑nd
 
__dn_ex∑nd


	)

290 
	#dn_skù«me
 
__dn_skù«me


	)

291 
	#Â_ªs°©
 
__Â_ªs°©


	)

292 
	#loc_©⁄
 
__loc_©⁄


	)

293 
	#loc_¡ﬂ
 
__loc_¡ﬂ


	)

294 
	#p_cd«me
 
__p_cd«me


	)

295 
	#p_cd¬ame
 
__p_cd¬ame


	)

296 
	#p_˛ass
 
__p_˛ass


	)

297 
	#p_fq«me
 
__p_fq«me


	)

298 
	#p_fq¬ame
 
__p_fq¬ame


	)

299 
	#p_›ti⁄
 
__p_›ti⁄


	)

300 
	#p_£c°od©e
 
__p_£c°od©e


	)

301 
	#p_£˘i⁄
 
__p_£˘i⁄


	)

302 
	#p_time
 
__p_time


	)

303 
	#p_ty≥
 
__p_ty≥


	)

304 
	#p_rcode
 
__p_rcode


	)

305 
	#pué⁄g
 
__pué⁄g


	)

306 
	#putsh‹t
 
__putsh‹t


	)

307 
	#ªs_dnok
 
__ªs_dnok


	)

308 
	#ªs_hnok
 
__ªs_hnok


	)

309 
	#ªs_ho°Æüs
 
__ªs_ho°Æüs


	)

310 
	#ªs_maûok
 
__ªs_maûok


	)

311 
	#ªs_«meöquîy
 
__ªs_«meöquîy


	)

312 
	#ªs_n˛o£
 
__ªs_n˛o£


	)

313 
	#ªs_nöô
 
__ªs_nöô


	)

314 
	#ªs_nmkquîy
 
__ªs_nmkquîy


	)

315 
	#ªs_≈quîy
 
__ªs_≈quîy


	)

316 
	#ªs_nquîy
 
__ªs_nquîy


	)

317 
	#ªs_nquîydomaö
 
__ªs_nquîydomaö


	)

318 
	#ªs_n£¨ch
 
__ªs_n£¨ch


	)

319 
	#ªs_n£nd
 
__ªs_n£nd


	)

320 
	#ªs_nisour£rvî
 
__ªs_nisour£rvî


	)

321 
	#ªs_ownok
 
__ªs_ownok


	)

322 
	#ªs_quîõsm©ch
 
__ªs_quîõsm©ch


	)

323 
	#ªs_øndomid
 
__ªs_øndomid


	)

324 
	#sym_¡›
 
__sym_¡›


	)

325 
	#sym_¡os
 
__sym_¡os


	)

326 
	#sym_°⁄
 
__sym_°⁄


	)

327 
__BEGIN_DECLS


328 
	$ªs_hnok
 (c⁄° *Ë
__THROW
;

329 
	$ªs_ownok
 (c⁄° *Ë
__THROW
;

330 
	$ªs_maûok
 (c⁄° *Ë
__THROW
;

331 
	$ªs_dnok
 (c⁄° *Ë
__THROW
;

332 
	$sym_°⁄
 (c⁄° 
ªs_sym
 *, c⁄° *, *Ë
__THROW
;

333 c⁄° * 
	$sym_¡os
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

334 c⁄° * 
	$sym_¡›
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

335 
	$b64_¡›
 (
u_ch¨
 c⁄° *, 
size_t
, *, size_tË
__THROW
;

336 
	$b64_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

337 
	$loc_©⁄
 (c⁄° *
__ascii
, 
u_ch¨
 *
__bö¨y
Ë
__THROW
;

338 c⁄° * 
	$loc_¡ﬂ
 (c⁄° 
u_ch¨
 *
__bö¨y
, *
__ascii
Ë
__THROW
;

339 
	$dn_skù«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

340 
	$pué⁄g
 (
u_öt32_t
, 
u_ch¨
 *Ë
__THROW
;

341 
	$putsh‹t
 (
u_öt16_t
, 
u_ch¨
 *Ë
__THROW
;

342 c⁄° * 
	$p_˛ass
 (Ë
__THROW
;

343 c⁄° * 
	$p_time
 (
u_öt32_t
Ë
__THROW
;

344 c⁄° * 
	$p_ty≥
 (Ë
__THROW
;

345 c⁄° * 
	$p_rcode
 (Ë
__THROW
;

346 c⁄° 
u_ch¨
 * 
	$p_cd¬ame
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, , 
FILE
 *)

347 
__THROW
;

348 c⁄° 
u_ch¨
 * 
	$p_cd«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

349 c⁄° 
u_ch¨
 * 
	$p_fq¬ame
 (c⁄° 
u_ch¨
 *
__˝
, c⁄° u_ch¨ *
__msg
,

350 , *, Ë
__THROW
;

351 c⁄° 
u_ch¨
 * 
	$p_fq«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

352 c⁄° * 
	$p_›ti⁄
 (
u_l⁄g
 
__›ti⁄
Ë
__THROW
;

353 * 
	$p_£c°od©e
 (
u_l⁄g
Ë
__THROW
;

354 
	$dn_cou¡_œbñs
 (c⁄° *Ë
__THROW
;

355 
	$dn_comp
 (c⁄° *, 
u_ch¨
 *, , u_char **, u_char **)

356 
__THROW
;

357 
	$dn_ex∑nd
 (c⁄° 
u_ch¨
 *, const u_char *, const u_char *,

358 *, Ë
__THROW
;

359 
u_öt
 
	$ªs_øndomid
 (Ë
__THROW
;

360 
	$ªs_«meöquîy
 (const *, , ,

361 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

362 
	$ªs_quîõsm©ch
 (c⁄° 
u_ch¨
 *, const u_char *,

363 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

364 c⁄° * 
	$p_£˘i⁄
 (
__£˘i⁄
, 
__›code
Ë
__THROW
;

366 
	$ªs_nöô
 (
ªs_°©e
Ë
__THROW
;

367 
	$ªs_nisour£rvî
 (c⁄° 
ªs_°©e
,

368 c⁄° 
sockaddr_ö
 *Ë
__THROW
;

369 
	$Â_ªs°©
 (c⁄° 
ªs_°©e
, 
FILE
 *Ë
__THROW
;

370 
	$ªs_≈quîy
 (c⁄° 
ªs_°©e
, c⁄° 
u_ch¨
 *, , 
FILE
 *)

371 
__THROW
;

372 c⁄° * 
	$ªs_ho°Æüs
 (c⁄° 
ªs_°©e
, c⁄° *, *, 
size_t
)

373 
__THROW
;

374 
	$ªs_nquîy
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

375 
__THROW
;

376 
	$ªs_n£¨ch
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

377 
__THROW
;

378 
	$ªs_nquîydomaö
 (
ªs_°©e
, const *, const *, ,

379 , 
u_ch¨
 *, Ë
__THROW
;

380 
	$ªs_nmkquîy
 (
ªs_°©e
, , const *, , ,

381 c⁄° 
u_ch¨
 *, , const u_char *, u_char *,

382 Ë
__THROW
;

383 
	$ªs_n£nd
 (
ªs_°©e
, c⁄° 
u_ch¨
 *, , u_char *, )

384 
__THROW
;

385 
	$ªs_n˛o£
 (
ªs_°©e
Ë
__THROW
;

386 
__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/search.h

20 #i‚de‡
_SEARCH_H


21 
	#_SEARCH_H
 1

	)

23 
	~<„©uªs.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 
	g__BEGIN_DECLS


30 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_GNU


35 
	sqñem


37 
qñem
 *
	mq_f‹w
;

38 
qñem
 *
	mq_back
;

39 
	mq_d©a
[1];

45 
	$ösque
 (*
__ñem
, *
__¥ev
Ë
__THROW
;

48 
	$ªmque
 (*
__ñem
Ë
__THROW
;

53 #i‚de‡
__COMPAR_FN_T


54 
	#__COMPAR_FN_T


	)

55 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

57 #ifdef 
__USE_GNU


58 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

65 
FIND
,

66 
ENTER


68 
	tACTION
;

70 
	síåy


72 *
key
;

73 *
d©a
;

75 
	tENTRY
;

78 
_ENTRY
;

88 
ENTRY
 *
	$h£¨ch
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
Ë
__THROW
;

91 
	$h¸óã
 (
size_t
 
__√l
Ë
__THROW
;

94 
	$hde°roy
 (Ë
__THROW
;

96 #ifde‡
__USE_GNU


98 
	sh£¨ch_d©a


100 
_ENTRY
 *
èbÀ
;

101 
size
;

102 
fûÀd
;

107 
	$h£¨ch_r
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
, ENTRY **
__ªtvÆ
,

108 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

109 
	$h¸óã_r
 (
size_t
 
__√l
, 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

110 
	$hde°roy_r
 (
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

121 
¥e‹dî
,

122 
po°‹dî
,

123 
íd‹dî
,

124 
Àaf


126 
	tVISIT
;

130 *
	`t£¨ch
 (
__c⁄°
 *
__key
, **
__roŸp
,

131 
__com∑r_‚_t
 
__com∑r
);

135 *
	`tföd
 (
__c⁄°
 *
__key
, *__c⁄° *
__roŸp
,

136 
__com∑r_‚_t
 
__com∑r
);

139 *
	`tdñëe
 (
__c⁄°
 *
__ª°ri˘
 
__key
,

140 **
__ª°ri˘
 
__roŸp
,

141 
__com∑r_‚_t
 
__com∑r
);

143 #i‚de‡
__ACTION_FN_T


144 
	#__ACTION_FN_T


	)

145 (*
	t__a˘i⁄_‚_t
Ë(
	t__c⁄°
 *
	t__nodï
, 
	tVISIT
 
	t__vÆue
,

146 
	t__Àvñ
);

151 
	`twÆk
 (
__c⁄°
 *
__roŸ
, 
__a˘i⁄_‚_t
 
__a˘i⁄
);

153 #ifde‡
__USE_GNU


156 (*
	t__‰ì_‚_t
Ë(*
	t__nodï
);

159 
	`tde°roy
 (*
__roŸ
, 
__‰ì_‚_t
 
__‰ìf˘
);

165 *
	`lföd
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

166 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

170 *
	`l£¨ch
 (
__c⁄°
 *
__key
, *
__ba£
,

171 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

173 
__END_DECLS


	@/usr/include/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


20 
	#_SEMAPHORE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_XOPEN2K


25 
	#__√ed_time•ec


	)

26 
	~<time.h
>

30 
	~<bôs/£m≠h‹e.h
>

33 
__BEGIN_DECLS


37 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

38 
__THROW
;

40 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

43 
£m_t
 *
	$£m_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...Ë
__THROW
;

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

49 
	$£m_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

55 
	`£m_waô
 (
£m_t
 *
__£m
);

57 #ifde‡
__USE_XOPEN2K


62 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

67 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

70 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

73 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

74 
__THROW
;

77 
__END_DECLS


	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/sgtty.h

19 #i‚def 
_SGTTY_H


20 
	#_SGTTY_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/io˘l.h
>

28 
	gsgâyb
;

30 
__BEGIN_DECLS


33 
	$gây
 (
__fd
, 
sgâyb
 *
__∑øms
Ë
__THROW
;

36 
	$°ty
 (
__fd
, 
__c⁄°
 
sgâyb
 *
__∑øms
Ë
__THROW
;

39 
__END_DECLS


	@/usr/include/shadow.h

21 #i‚de‡
_SHADOW_H


22 
	#_SHADOW_H
 1

	)

24 
	~<„©uªs.h
>

26 
	~<∑ths.h
>

28 
	#__√ed_FILE


	)

29 
	~<°dio.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	#SHADOW
 
_PATH_SHADOW


	)

37 
__BEGIN_DECLS


40 
	s•wd


42 *
	m•_«mp
;

43 *
	m•_pwdp
;

44 
	m•_l°chg
;

45 
	m•_mö
;

46 
	m•_max
;

47 
	m•_w¨n
;

49 
	m•_öa˘
;

51 
	m•_expúe
;

53 
	m•_Êag
;

63 
£t•ít
 ();

71 
íd•ít
 ();

79 
•wd
 *
gë•ít
 ();

87 
•wd
 *
gë•«m
 (
__c⁄°
 *
__«me
);

95 
•wd
 *
sgë•ít
 (
__c⁄°
 *
__°rög
);

103 
•wd
 *
fgë•ít
 (
FILE
 *
__°ªam
);

111 
put•ít
 (
__c⁄°
 
•wd
 *
__p
, 
FILE
 *
__°ªam
);

114 #ifde‡
__USE_MISC


121 
gë•ít_r
 (
•wd
 *
__ªsu…_buf
, *
__buf„r
,

122 
size_t
 
__buÊí
, 
•wd
 **
__ªsu…
);

124 
gë•«m_r
 (
__c⁄°
 *
__«me
, 
•wd
 *
__ªsu…_buf
,

125 *
__buf„r
, 
size_t
 
__buÊí
,

126 
•wd
 **
__ªsu…
);

128 
sgë•ít_r
 (
__c⁄°
 *
__°rög
, 
•wd
 *
__ªsu…_buf
,

129 *
__buf„r
, 
size_t
 
__buÊí
,

130 
•wd
 **
__ªsu…
);

132 
fgë•ít_r
 (
FILE
 *
__°ªam
, 
•wd
 *
__ªsu…_buf
,

133 *
__buf„r
, 
size_t
 
__buÊí
,

134 
•wd
 **
__ªsu…
);

142 
	$lckpwdf
 (Ë
__THROW
;

145 
	$ulckpwdf
 (Ë
__THROW
;

147 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/spawn.h

20 #i‚def 
_SPAWN_H


21 
	#_SPAWN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sched.h
>

25 
	~<sig«l.h
>

26 
	~<sys/ty≥s.h
>

32 
	m__Êags
;

33 
pid_t
 
	m__pgΩ
;

34 
sig£t_t
 
	m__sd
;

35 
sig£t_t
 
	m__ss
;

36 
sched_∑øm
 
	m__•
;

37 
	m__pﬁicy
;

38 
	m__∑d
[16];

39 } 
	tposix_•aw«âr_t
;

46 
	m__Æloˇãd
;

47 
	m__u£d
;

48 
__•awn_a˘i⁄
 *
	m__a˘i⁄s
;

49 
	m__∑d
[16];

50 } 
	tposix_•awn_fûe_a˘i⁄s_t
;

54 
	#POSIX_SPAWN_RESETIDS
 0x01

	)

55 
	#POSIX_SPAWN_SETPGROUP
 0x02

	)

56 
	#POSIX_SPAWN_SETSIGDEF
 0x04

	)

57 
	#POSIX_SPAWN_SETSIGMASK
 0x08

	)

58 
	#POSIX_SPAWN_SETSCHEDPARAM
 0x10

	)

59 
	#POSIX_SPAWN_SETSCHEDULER
 0x20

	)

60 #ifde‡
__USE_GNU


61 
	#POSIX_SPAWN_USEVFORK
 0x40

	)

65 
__BEGIN_DECLS


72 
posix_•awn
 (
pid_t
 *
__ª°ri˘
 
__pid
,

73 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

74 
__c⁄°
 
posix_•awn_fûe_a˘i⁄s_t
 *
__ª°ri˘


75 
__fûe_a˘i⁄s
,

76 
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘
 
__©åp
,

77 *
__c⁄°
 
__¨gv
[
__ª°ri˘_¨r
],

78 *
__c⁄°
 
__ívp
[
__ª°ri˘_¨r
]);

84 
posix_•aw≈
 (
pid_t
 *
__pid
, 
__c⁄°
 *
__fûe
,

85 
__c⁄°
 
posix_•awn_fûe_a˘i⁄s_t
 *
__fûe_a˘i⁄s
,

86 
__c⁄°
 
posix_•aw«âr_t
 *
__©åp
,

87 *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[]);

91 
	$posix_•aw«âr_öô
 (
posix_•aw«âr_t
 *
__©å
Ë
__THROW
;

94 
	$posix_•aw«âr_de°roy
 (
posix_•aw«âr_t
 *
__©å
Ë
__THROW
;

98 
	$posix_•aw«âr_gësigdeÁu…
 (
__c⁄°
 
posix_•aw«âr_t
 *

99 
__ª°ri˘
 
__©å
,

100 
sig£t_t
 *
__ª°ri˘
 
__sigdeÁu…
)

101 
__THROW
;

104 
	$posix_•aw«âr_£tsigdeÁu…
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

105 
__c⁄°
 
sig£t_t
 *
__ª°ri˘


106 
__sigdeÁu…
)

107 
__THROW
;

110 
	$posix_•aw«âr_gësigmask
 (
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘


111 
__©å
,

112 
sig£t_t
 *
__ª°ri˘
 
__sigmask
Ë
__THROW
;

115 
	$posix_•aw«âr_£tsigmask
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

116 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__sigmask
)

117 
__THROW
;

120 
	$posix_•aw«âr_gëÊags
 (
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘


121 
__©å
,

122 *
__ª°ri˘
 
__Êags
Ë
__THROW
;

125 
	$posix_•aw«âr_£tÊags
 (
posix_•aw«âr_t
 *
_©å
,

126 
__Êags
Ë
__THROW
;

129 
	$posix_•aw«âr_gëpgroup
 (
__c⁄°
 
posix_•aw«âr_t
 *
__ª°ri˘


130 
__©å
, 
pid_t
 *
__ª°ri˘
 
__pgroup
)

131 
__THROW
;

134 
	$posix_•aw«âr_£çgroup
 (
posix_•aw«âr_t
 *
__©å
,

135 
pid_t
 
__pgroup
Ë
__THROW
;

138 
	$posix_•aw«âr_gëschedpﬁicy
 (
__c⁄°
 
posix_•aw«âr_t
 *

139 
__ª°ri˘
 
__©å
,

140 *
__ª°ri˘
 
__schedpﬁicy
)

141 
__THROW
;

144 
	$posix_•aw«âr_£tschedpﬁicy
 (
posix_•aw«âr_t
 *
__©å
,

145 
__schedpﬁicy
Ë
__THROW
;

148 
	$posix_•aw«âr_gësched∑øm
 (
__c⁄°
 
posix_•aw«âr_t
 *

149 
__ª°ri˘
 
__©å
,

150 
sched_∑øm
 *
__ª°ri˘


151 
__sched∑øm
Ë
__THROW
;

154 
	$posix_•aw«âr_£tsched∑øm
 (
posix_•aw«âr_t
 *
__ª°ri˘
 
__©å
,

155 c⁄° 
sched_∑øm
 *

156 
__ª°ri˘
 
__sched∑øm
Ë
__THROW
;

160 
	$posix_•awn_fûe_a˘i⁄s_öô
 (
posix_•awn_fûe_a˘i⁄s_t
 *

161 
__fûe_a˘i⁄s
Ë
__THROW
;

164 
	$posix_•awn_fûe_a˘i⁄s_de°roy
 (
posix_•awn_fûe_a˘i⁄s_t
 *

165 
__fûe_a˘i⁄s
Ë
__THROW
;

169 
	$posix_•awn_fûe_a˘i⁄s_add›í
 (
posix_•awn_fûe_a˘i⁄s_t
 *

170 
__ª°ri˘
 
__fûe_a˘i⁄s
,

171 
__fd
,

172 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

173 
__oÊag
, 
mode_t
 
__mode
)

174 
__THROW
;

178 
	$posix_•awn_fûe_a˘i⁄s_add˛o£
 (
posix_•awn_fûe_a˘i⁄s_t
 *

179 
__fûe_a˘i⁄s
, 
__fd
)

180 
__THROW
;

184 
	$posix_•awn_fûe_a˘i⁄s_adddup2
 (
posix_•awn_fûe_a˘i⁄s_t
 *

185 
__fûe_a˘i⁄s
,

186 
__fd
, 
__√wfd
Ë
__THROW
;

188 
__END_DECLS


	@/usr/include/sqlite3.h

33 #i‚de‡
_SQLITE3_H_


34 
	#_SQLITE3_H_


	)

35 
	~<°d¨g.h
>

40 #ifde‡
__˝lu•lus


48 #i‚de‡
SQLITE_EXTERN


49 
	#SQLITE_EXTERN
 

	)

52 #i‚de‡
SQLITE_API


53 
	#SQLITE_API


	)

70 
	#SQLITE_DEPRECATED


	)

71 
	#SQLITE_EXPERIMENTAL


	)

76 #ifde‡
SQLITE_VERSION


77 #unde‡
SQLITE_VERSION


79 #ifde‡
SQLITE_VERSION_NUMBER


80 #unde‡
SQLITE_VERSION_NUMBER


110 
	#SQLITE_VERSION
 "3.7.9"

	)

111 
	#SQLITE_VERSION_NUMBER
 3007009

	)

112 
	#SQLITE_SOURCE_ID
 "2011-11-01 00:52:41 c7c6050ef060877ebe77b41d959e9df13f8c9b5e"

	)

144 
SQLITE_API
 
SQLITE_EXTERN
 c⁄° 
sqlôe3_vîsi⁄
[];

145 
SQLITE_API
 c⁄° *
sqlôe3_libvîsi⁄
();

146 
SQLITE_API
 c⁄° *
sqlôe3_sour˚id
();

147 
SQLITE_API
 
sqlôe3_libvîsi⁄_numbî
();

171 #i‚de‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


172 
SQLITE_API
 
sqlôe3_compûe›ti⁄_u£d
(c⁄° *
zO±Name
);

173 
SQLITE_API
 c⁄° *
sqlôe3_compûe›ti⁄_gë
(
N
);

212 
SQLITE_API
 
sqlôe3_thªadß„
();

227 
sqlôe3
 
	tsqlôe3
;

245 #ifde‡
SQLITE_INT64_TYPE


246 
SQLITE_INT64_TYPE
 
	tsqlôe_öt64
;

247 
	tSQLITE_INT64_TYPE
 
	tsqlôe_uöt64
;

248 #ñi‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

249 
__öt64
 
	tsqlôe_öt64
;

250 
	t__öt64
 
	tsqlôe_uöt64
;

252 
	tsqlôe_öt64
;

253 
	tsqlôe_uöt64
;

255 
sqlôe_öt64
 
	tsqlôe3_öt64
;

256 
sqlôe_uöt64
 
	tsqlôe3_uöt64
;

262 #ifde‡
SQLITE_OMIT_FLOATING_POINT


263 
sqlôe3_öt64


	)

290 
SQLITE_API
 
sqlôe3_˛o£
(
sqlôe3
 *);

297 (*
sqlôe3_ˇŒback
)(*,,**, **);

360 
SQLITE_API
 
sqlôe3_exec
(

361 
sqlôe3
*,

362 c⁄° *
sql
,

363 (*
ˇŒback
)(*,,**,**),

365 **
îrmsg


381 
	#SQLITE_OK
 0

	)

383 
	#SQLITE_ERROR
 1

	)

384 
	#SQLITE_INTERNAL
 2

	)

385 
	#SQLITE_PERM
 3

	)

386 
	#SQLITE_ABORT
 4

	)

387 
	#SQLITE_BUSY
 5

	)

388 
	#SQLITE_LOCKED
 6

	)

389 
	#SQLITE_NOMEM
 7

	)

390 
	#SQLITE_READONLY
 8

	)

391 
	#SQLITE_INTERRUPT
 9

	)

392 
	#SQLITE_IOERR
 10

	)

393 
	#SQLITE_CORRUPT
 11

	)

394 
	#SQLITE_NOTFOUND
 12

	)

395 
	#SQLITE_FULL
 13

	)

396 
	#SQLITE_CANTOPEN
 14

	)

397 
	#SQLITE_PROTOCOL
 15

	)

398 
	#SQLITE_EMPTY
 16

	)

399 
	#SQLITE_SCHEMA
 17

	)

400 
	#SQLITE_TOOBIG
 18

	)

401 
	#SQLITE_CONSTRAINT
 19

	)

402 
	#SQLITE_MISMATCH
 20

	)

403 
	#SQLITE_MISUSE
 21

	)

404 
	#SQLITE_NOLFS
 22

	)

405 
	#SQLITE_AUTH
 23

	)

406 
	#SQLITE_FORMAT
 24

	)

407 
	#SQLITE_RANGE
 25

	)

408 
	#SQLITE_NOTADB
 26

	)

409 
	#SQLITE_ROW
 100

	)

410 
	#SQLITE_DONE
 101

	)

436 
	#SQLITE_IOERR_READ
 (
SQLITE_IOERR
 | (1<<8))

	)

437 
	#SQLITE_IOERR_SHORT_READ
 (
SQLITE_IOERR
 | (2<<8))

	)

438 
	#SQLITE_IOERR_WRITE
 (
SQLITE_IOERR
 | (3<<8))

	)

439 
	#SQLITE_IOERR_FSYNC
 (
SQLITE_IOERR
 | (4<<8))

	)

440 
	#SQLITE_IOERR_DIR_FSYNC
 (
SQLITE_IOERR
 | (5<<8))

	)

441 
	#SQLITE_IOERR_TRUNCATE
 (
SQLITE_IOERR
 | (6<<8))

	)

442 
	#SQLITE_IOERR_FSTAT
 (
SQLITE_IOERR
 | (7<<8))

	)

443 
	#SQLITE_IOERR_UNLOCK
 (
SQLITE_IOERR
 | (8<<8))

	)

444 
	#SQLITE_IOERR_RDLOCK
 (
SQLITE_IOERR
 | (9<<8))

	)

445 
	#SQLITE_IOERR_DELETE
 (
SQLITE_IOERR
 | (10<<8))

	)

446 
	#SQLITE_IOERR_BLOCKED
 (
SQLITE_IOERR
 | (11<<8))

	)

447 
	#SQLITE_IOERR_NOMEM
 (
SQLITE_IOERR
 | (12<<8))

	)

448 
	#SQLITE_IOERR_ACCESS
 (
SQLITE_IOERR
 | (13<<8))

	)

449 
	#SQLITE_IOERR_CHECKRESERVEDLOCK
 (
SQLITE_IOERR
 | (14<<8))

	)

450 
	#SQLITE_IOERR_LOCK
 (
SQLITE_IOERR
 | (15<<8))

	)

451 
	#SQLITE_IOERR_CLOSE
 (
SQLITE_IOERR
 | (16<<8))

	)

452 
	#SQLITE_IOERR_DIR_CLOSE
 (
SQLITE_IOERR
 | (17<<8))

	)

453 
	#SQLITE_IOERR_SHMOPEN
 (
SQLITE_IOERR
 | (18<<8))

	)

454 
	#SQLITE_IOERR_SHMSIZE
 (
SQLITE_IOERR
 | (19<<8))

	)

455 
	#SQLITE_IOERR_SHMLOCK
 (
SQLITE_IOERR
 | (20<<8))

	)

456 
	#SQLITE_IOERR_SHMMAP
 (
SQLITE_IOERR
 | (21<<8))

	)

457 
	#SQLITE_IOERR_SEEK
 (
SQLITE_IOERR
 | (22<<8))

	)

458 
	#SQLITE_LOCKED_SHAREDCACHE
 (
SQLITE_LOCKED
 | (1<<8))

	)

459 
	#SQLITE_BUSY_RECOVERY
 (
SQLITE_BUSY
 | (1<<8))

	)

460 
	#SQLITE_CANTOPEN_NOTEMPDIR
 (
SQLITE_CANTOPEN
 | (1<<8))

	)

461 
	#SQLITE_CORRUPT_VTAB
 (
SQLITE_CORRUPT
 | (1<<8))

	)

462 
	#SQLITE_READONLY_RECOVERY
 (
SQLITE_READONLY
 | (1<<8))

	)

463 
	#SQLITE_READONLY_CANTLOCK
 (
SQLITE_READONLY
 | (2<<8))

	)

472 
	#SQLITE_OPEN_READONLY
 0x00000001

	)

473 
	#SQLITE_OPEN_READWRITE
 0x00000002

	)

474 
	#SQLITE_OPEN_CREATE
 0x00000004

	)

475 
	#SQLITE_OPEN_DELETEONCLOSE
 0x00000008

	)

476 
	#SQLITE_OPEN_EXCLUSIVE
 0x00000010

	)

477 
	#SQLITE_OPEN_AUTOPROXY
 0x00000020

	)

478 
	#SQLITE_OPEN_URI
 0x00000040

	)

479 
	#SQLITE_OPEN_MAIN_DB
 0x00000100

	)

480 
	#SQLITE_OPEN_TEMP_DB
 0x00000200

	)

481 
	#SQLITE_OPEN_TRANSIENT_DB
 0x00000400

	)

482 
	#SQLITE_OPEN_MAIN_JOURNAL
 0x00000800

	)

483 
	#SQLITE_OPEN_TEMP_JOURNAL
 0x00001000

	)

484 
	#SQLITE_OPEN_SUBJOURNAL
 0x00002000

	)

485 
	#SQLITE_OPEN_MASTER_JOURNAL
 0x00004000

	)

486 
	#SQLITE_OPEN_NOMUTEX
 0x00008000

	)

487 
	#SQLITE_OPEN_FULLMUTEX
 0x00010000

	)

488 
	#SQLITE_OPEN_SHAREDCACHE
 0x00020000

	)

489 
	#SQLITE_OPEN_PRIVATECACHE
 0x00040000

	)

490 
	#SQLITE_OPEN_WAL
 0x00080000

	)

514 
	#SQLITE_IOCAP_ATOMIC
 0x00000001

	)

515 
	#SQLITE_IOCAP_ATOMIC512
 0x00000002

	)

516 
	#SQLITE_IOCAP_ATOMIC1K
 0x00000004

	)

517 
	#SQLITE_IOCAP_ATOMIC2K
 0x00000008

	)

518 
	#SQLITE_IOCAP_ATOMIC4K
 0x00000010

	)

519 
	#SQLITE_IOCAP_ATOMIC8K
 0x00000020

	)

520 
	#SQLITE_IOCAP_ATOMIC16K
 0x00000040

	)

521 
	#SQLITE_IOCAP_ATOMIC32K
 0x00000080

	)

522 
	#SQLITE_IOCAP_ATOMIC64K
 0x00000100

	)

523 
	#SQLITE_IOCAP_SAFE_APPEND
 0x00000200

	)

524 
	#SQLITE_IOCAP_SEQUENTIAL
 0x00000400

	)

525 
	#SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN
 0x00000800

	)

534 
	#SQLITE_LOCK_NONE
 0

	)

535 
	#SQLITE_LOCK_SHARED
 1

	)

536 
	#SQLITE_LOCK_RESERVED
 2

	)

537 
	#SQLITE_LOCK_PENDING
 3

	)

538 
	#SQLITE_LOCK_EXCLUSIVE
 4

	)

566 
	#SQLITE_SYNC_NORMAL
 0x00002

	)

567 
	#SQLITE_SYNC_FULL
 0x00003

	)

568 
	#SQLITE_SYNC_DATAONLY
 0x00010

	)

581 
sqlôe3_fûe
 
	tsqlôe3_fûe
;

582 
	ssqlôe3_fûe
 {

583 c⁄° 
sqlôe3_io_mëhods
 *
pMëhods
;

676 
sqlôe3_io_mëhods
 
	tsqlôe3_io_mëhods
;

677 
	ssqlôe3_io_mëhods
 {

678 
iVîsi⁄
;

679 (*
xClo£
)(
sqlôe3_fûe
*);

680 (*
xRód
)(
sqlôe3_fûe
*, *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

681 (*
xWrôe
)(
sqlôe3_fûe
*, c⁄° *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

682 (*
xTrunˇã
)(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
size
);

683 (*
xSync
)(
sqlôe3_fûe
*, 
Êags
);

684 (*
xFûeSize
)(
sqlôe3_fûe
*, 
sqlôe3_öt64
 *
pSize
);

685 (*
xLock
)(
sqlôe3_fûe
*, );

686 (*
xU∆ock
)(
sqlôe3_fûe
*, );

687 (*
xCheckRe£rvedLock
)(
sqlôe3_fûe
*, *
pResOut
);

688 (*
xFûeC⁄åﬁ
)(
sqlôe3_fûe
*, 
›
, *
pArg
);

689 (*
xSe˘‹Size
)(
sqlôe3_fûe
*);

690 (*
xDevi˚Ch¨a˘îi°ics
)(
sqlôe3_fûe
*);

692 (*
xShmM≠
)(
sqlôe3_fûe
*, 
iPg
, 
pgsz
, , volatile**);

693 (*
xShmLock
)(
sqlôe3_fûe
*, 
off£t
, 
n
, 
Êags
);

694 (*
xShmB¨rõr
)(
sqlôe3_fûe
*);

695 (*
xShmUnm≠
)(
sqlôe3_fûe
*, 
dñëeFœg
);

780 
	#SQLITE_FCNTL_LOCKSTATE
 1

	)

781 
	#SQLITE_GET_LOCKPROXYFILE
 2

	)

782 
	#SQLITE_SET_LOCKPROXYFILE
 3

	)

783 
	#SQLITE_LAST_ERRNO
 4

	)

784 
	#SQLITE_FCNTL_SIZE_HINT
 5

	)

785 
	#SQLITE_FCNTL_CHUNK_SIZE
 6

	)

786 
	#SQLITE_FCNTL_FILE_POINTER
 7

	)

787 
	#SQLITE_FCNTL_SYNC_OMITTED
 8

	)

788 
	#SQLITE_FCNTL_WIN32_AV_RETRY
 9

	)

789 
	#SQLITE_FCNTL_PERSIST_WAL
 10

	)

790 
	#SQLITE_FCNTL_OVERWRITE
 11

	)

802 
sqlôe3_muãx
 
	tsqlôe3_muãx
;

961 
sqlôe3_vfs
 
	tsqlôe3_vfs
;

962 (*
sqlôe3_sysˇŒ_±r
)();

963 
	ssqlôe3_vfs
 {

964 
iVîsi⁄
;

965 
szOsFûe
;

966 
mxP©h«me
;

967 
sqlôe3_vfs
 *
pNext
;

968 c⁄° *
zName
;

969 *
pAµD©a
;

970 (*
xO≥n
)(
sqlôe3_vfs
*, c⁄° *
zName
, 
sqlôe3_fûe
*,

971 
Êags
, *
pOutFœgs
);

972 (*
xDñëe
)(
sqlôe3_vfs
*, c⁄° *
zName
, 
syncDú
);

973 (*
xAc˚ss
)(
sqlôe3_vfs
*, c⁄° *
zName
, 
Êags
, *
pResOut
);

974 (*
xFuŒP©h«me
)(
sqlôe3_vfs
*, c⁄° *
zName
, 
nOut
, *
zOut
);

975 *(*
xDlO≥n
)(
sqlôe3_vfs
*, c⁄° *
zFûíame
);

976 (*
xDlEº‹
)(
sqlôe3_vfs
*, 
nByã
, *
zEºMsg
);

977 (*(*
xDlSym
)(
sqlôe3_vfs
*,*, c⁄° *
zSymbﬁ
))();

978 (*
xDlClo£
)(
sqlôe3_vfs
*, *);

979 (*
xR™dom√ss
)(
sqlôe3_vfs
*, 
nByã
, *
zOut
);

980 (*
xSÀï
)(
sqlôe3_vfs
*, 
mi¸o£c⁄ds
);

981 (*
xCuºítTime
)(
sqlôe3_vfs
*, *);

982 (*
xGëLa°Eº‹
)(
sqlôe3_vfs
*, , *);

987 (*
xCuºítTimeI¡64
)(
sqlôe3_vfs
*, 
sqlôe3_öt64
*);

992 (*
xSëSy°emCÆl
)(
sqlôe3_vfs
*, c⁄° *
zName
, 
sqlôe3_sysˇŒ_±r
);

993 
sqlôe3_sysˇŒ_±r
 (*
xGëSy°emCÆl
)(
sqlôe3_vfs
*, c⁄° *
zName
);

994 c⁄° *(*
xNextSy°emCÆl
)(
sqlôe3_vfs
*, c⁄° *
zName
);

1022 
	#SQLITE_ACCESS_EXISTS
 0

	)

1023 
	#SQLITE_ACCESS_READWRITE
 1

	)

1024 
	#SQLITE_ACCESS_READ
 2

	)

1048 
	#SQLITE_SHM_UNLOCK
 1

	)

1049 
	#SQLITE_SHM_LOCK
 2

	)

1050 
	#SQLITE_SHM_SHARED
 4

	)

1051 
	#SQLITE_SHM_EXCLUSIVE
 8

	)

1061 
	#SQLITE_SHM_NLOCK
 8

	)

1139 
SQLITE_API
 
sqlôe3_öôülize
();

1140 
SQLITE_API
 
sqlôe3_shutdown
();

1141 
SQLITE_API
 
sqlôe3_os_öô
();

1142 
SQLITE_API
 
sqlôe3_os_íd
();

1173 
SQLITE_API
 
sqlôe3_c⁄fig
(, ...);

1191 
SQLITE_API
 
sqlôe3_db_c⁄fig
(
sqlôe3
*, 
›
, ...);

1256 
sqlôe3_mem_mëhods
 
	tsqlôe3_mem_mëhods
;

1257 
	ssqlôe3_mem_mëhods
 {

1258 *(*
xMÆloc
)();

1259 (*
xFªe
)(*);

1260 *(*
xRóŒoc
)(*,);

1261 (*
xSize
)(*);

1262 (*
xRoundup
)();

1263 (*
xInô
)(*);

1264 (*
xShutdown
)(*);

1265 *
pAµD©a
;

1488 
	#SQLITE_CONFIG_SINGLETHREAD
 1

	)

1489 
	#SQLITE_CONFIG_MULTITHREAD
 2

	)

1490 
	#SQLITE_CONFIG_SERIALIZED
 3

	)

1491 
	#SQLITE_CONFIG_MALLOC
 4

	)

1492 
	#SQLITE_CONFIG_GETMALLOC
 5

	)

1493 
	#SQLITE_CONFIG_SCRATCH
 6

	)

1494 
	#SQLITE_CONFIG_PAGECACHE
 7

	)

1495 
	#SQLITE_CONFIG_HEAP
 8

	)

1496 
	#SQLITE_CONFIG_MEMSTATUS
 9

	)

1497 
	#SQLITE_CONFIG_MUTEX
 10

	)

1498 
	#SQLITE_CONFIG_GETMUTEX
 11

	)

1500 
	#SQLITE_CONFIG_LOOKASIDE
 13

	)

1501 
	#SQLITE_CONFIG_PCACHE
 14

	)

1502 
	#SQLITE_CONFIG_GETPCACHE
 15

	)

1503 
	#SQLITE_CONFIG_LOG
 16

	)

1504 
	#SQLITE_CONFIG_URI
 17

	)

1564 
	#SQLITE_DBCONFIG_LOOKASIDE
 1001

	)

1565 
	#SQLITE_DBCONFIG_ENABLE_FKEY
 1002

	)

1566 
	#SQLITE_DBCONFIG_ENABLE_TRIGGER
 1003

	)

1576 
SQLITE_API
 
sqlôe3_exãnded_ªsu…_codes
(
sqlôe3
*, 
⁄off
);

1625 
SQLITE_API
 
sqlôe3_öt64
 
sqlôe3_œ°_ö£π_rowid
(
sqlôe3
*);

1679 
SQLITE_API
 
sqlôe3_ch™ges
(
sqlôe3
*);

1705 
SQLITE_API
 
sqlôe3_tŸÆ_ch™ges
(
sqlôe3
*);

1744 
SQLITE_API
 
sqlôe3_öãºu±
(
sqlôe3
*);

1779 
SQLITE_API
 
sqlôe3_com∂ëe
(c⁄° *
sql
);

1780 
SQLITE_API
 
sqlôe3_com∂ëe16
(c⁄° *
sql
);

1846 
SQLITE_API
 
sqlôe3_busy_h™dÀr
(
sqlôe3
*, (*)(*,), *);

1866 
SQLITE_API
 
sqlôe3_busy_timeout
(
sqlôe3
*, 
ms
);

1940 
SQLITE_API
 
sqlôe3_gë_èbÀ
(

1941 
sqlôe3
 *
db
,

1942 c⁄° *
zSql
,

1943 ***
∑zResu…
,

1944 *
≤Row
,

1945 *
≤Cﬁumn
,

1946 **
pzEºmsg


1948 
SQLITE_API
 
sqlôe3_‰ì_èbÀ
(**
ªsu…
);

2044 
SQLITE_API
 *
sqlôe3_m¥ötf
(const *,...);

2045 
SQLITE_API
 *
sqlôe3_vm¥ötf
(c⁄° *, 
va_li°
);

2046 
SQLITE_API
 *
sqlôe3_¢¥ötf
(,*,const *, ...);

2047 
SQLITE_API
 *
sqlôe3_v¢¥ötf
(,*,c⁄° *, 
va_li°
);

2119 
SQLITE_API
 *
sqlôe3_mÆloc
();

2120 
SQLITE_API
 *
sqlôe3_ªÆloc
(*, );

2121 
SQLITE_API
 
sqlôe3_‰ì
(*);

2146 
SQLITE_API
 
sqlôe3_öt64
 
sqlôe3_mem‹y_u£d
();

2147 
SQLITE_API
 
sqlôe3_öt64
 
sqlôe3_mem‹y_highw©î
(
ª£tFœg
);

2167 
SQLITE_API
 
sqlôe3_øndom√ss
(
N
, *
P
);

2249 
SQLITE_API
 
sqlôe3_£t_auth‹izî
(

2250 
sqlôe3
*,

2251 (*
xAuth
)(*,,const *,const *,const *,const *),

2252 *
pU£rD©a


2267 
	#SQLITE_DENY
 1

	)

2268 
	#SQLITE_IGNORE
 2

	)

2290 
	#SQLITE_CREATE_INDEX
 1

	)

2291 
	#SQLITE_CREATE_TABLE
 2

	)

2292 
	#SQLITE_CREATE_TEMP_INDEX
 3

	)

2293 
	#SQLITE_CREATE_TEMP_TABLE
 4

	)

2294 
	#SQLITE_CREATE_TEMP_TRIGGER
 5

	)

2295 
	#SQLITE_CREATE_TEMP_VIEW
 6

	)

2296 
	#SQLITE_CREATE_TRIGGER
 7

	)

2297 
	#SQLITE_CREATE_VIEW
 8

	)

2298 
	#SQLITE_DELETE
 9

	)

2299 
	#SQLITE_DROP_INDEX
 10

	)

2300 
	#SQLITE_DROP_TABLE
 11

	)

2301 
	#SQLITE_DROP_TEMP_INDEX
 12

	)

2302 
	#SQLITE_DROP_TEMP_TABLE
 13

	)

2303 
	#SQLITE_DROP_TEMP_TRIGGER
 14

	)

2304 
	#SQLITE_DROP_TEMP_VIEW
 15

	)

2305 
	#SQLITE_DROP_TRIGGER
 16

	)

2306 
	#SQLITE_DROP_VIEW
 17

	)

2307 
	#SQLITE_INSERT
 18

	)

2308 
	#SQLITE_PRAGMA
 19

	)

2309 
	#SQLITE_READ
 20

	)

2310 
	#SQLITE_SELECT
 21

	)

2311 
	#SQLITE_TRANSACTION
 22

	)

2312 
	#SQLITE_UPDATE
 23

	)

2313 
	#SQLITE_ATTACH
 24

	)

2314 
	#SQLITE_DETACH
 25

	)

2315 
	#SQLITE_ALTER_TABLE
 26

	)

2316 
	#SQLITE_REINDEX
 27

	)

2317 
	#SQLITE_ANALYZE
 28

	)

2318 
	#SQLITE_CREATE_VTABLE
 29

	)

2319 
	#SQLITE_DROP_VTABLE
 30

	)

2320 
	#SQLITE_FUNCTION
 31

	)

2321 
	#SQLITE_SAVEPOINT
 32

	)

2322 
	#SQLITE_COPY
 0

	)

2349 
SQLITE_API
 *
sqlôe3_åa˚
(
sqlôe3
*, (*
xTø˚
)(*,const *), *);

2350 
SQLITE_API
 
SQLITE_EXPERIMENTAL
 *
sqlôe3_¥ofûe
(
sqlôe3
*,

2351 (*
xProfûe
)(*,c⁄° *,
sqlôe3_uöt64
), *);

2383 
SQLITE_API
 
sqlôe3_¥ogªss_h™dÀr
(
sqlôe3
*, , (*)(*), *);

2579 
SQLITE_API
 
sqlôe3_›í
(

2580 c⁄° *
fûíame
,

2581 
sqlôe3
 **
µDb


2583 
SQLITE_API
 
sqlôe3_›í16
(

2584 c⁄° *
fûíame
,

2585 
sqlôe3
 **
µDb


2587 
SQLITE_API
 
sqlôe3_›í_v2
(

2588 c⁄° *
fûíame
,

2589 
sqlôe3
 **
µDb
,

2590 
Êags
,

2591 c⁄° *
zVfs


2611 
SQLITE_API
 c⁄° *
sqlôe3_uri_∑ømëî
(c⁄° *
zFûíame
, c⁄° *
zP¨am
);

2647 
SQLITE_API
 
sqlôe3_îrcode
(
sqlôe3
 *
db
);

2648 
SQLITE_API
 
sqlôe3_exãnded_îrcode
(
sqlôe3
 *
db
);

2649 
SQLITE_API
 c⁄° *
sqlôe3_îrmsg
(
sqlôe3
*);

2650 
SQLITE_API
 c⁄° *
sqlôe3_îrmsg16
(
sqlôe3
*);

2676 
sqlôe3_°mt
 
	tsqlôe3_°mt
;

2717 
SQLITE_API
 
sqlôe3_limô
(
sqlôe3
*, 
id
, 
√wVÆ
);

2771 
	#SQLITE_LIMIT_LENGTH
 0

	)

2772 
	#SQLITE_LIMIT_SQL_LENGTH
 1

	)

2773 
	#SQLITE_LIMIT_COLUMN
 2

	)

2774 
	#SQLITE_LIMIT_EXPR_DEPTH
 3

	)

2775 
	#SQLITE_LIMIT_COMPOUND_SELECT
 4

	)

2776 
	#SQLITE_LIMIT_VDBE_OP
 5

	)

2777 
	#SQLITE_LIMIT_FUNCTION_ARG
 6

	)

2778 
	#SQLITE_LIMIT_ATTACHED
 7

	)

2779 
	#SQLITE_LIMIT_LIKE_PATTERN_LENGTH
 8

	)

2780 
	#SQLITE_LIMIT_VARIABLE_NUMBER
 9

	)

2781 
	#SQLITE_LIMIT_TRIGGER_DEPTH
 10

	)

2864 
SQLITE_API
 
sqlôe3_¥ï¨e
(

2865 
sqlôe3
 *
db
,

2866 c⁄° *
zSql
,

2867 
nByã
,

2868 
sqlôe3_°mt
 **
µStmt
,

2869 c⁄° **
pzTaû


2871 
SQLITE_API
 
sqlôe3_¥ï¨e_v2
(

2872 
sqlôe3
 *
db
,

2873 c⁄° *
zSql
,

2874 
nByã
,

2875 
sqlôe3_°mt
 **
µStmt
,

2876 c⁄° **
pzTaû


2878 
SQLITE_API
 
sqlôe3_¥ï¨e16
(

2879 
sqlôe3
 *
db
,

2880 c⁄° *
zSql
,

2881 
nByã
,

2882 
sqlôe3_°mt
 **
µStmt
,

2883 c⁄° **
pzTaû


2885 
SQLITE_API
 
sqlôe3_¥ï¨e16_v2
(

2886 
sqlôe3
 *
db
,

2887 c⁄° *
zSql
,

2888 
nByã
,

2889 
sqlôe3_°mt
 **
µStmt
,

2890 c⁄° **
pzTaû


2900 
SQLITE_API
 c⁄° *
sqlôe3_sql
(
sqlôe3_°mt
 *
pStmt
);

2931 
SQLITE_API
 
sqlôe3_°mt_ªad⁄ly
(
sqlôe3_°mt
 *
pStmt
);

2970 
Mem
 
	tsqlôe3_vÆue
;

2984 
sqlôe3_c⁄ãxt
 
	tsqlôe3_c⁄ãxt
;

3075 
SQLITE_API
 
sqlôe3_böd_blob
(
sqlôe3_°mt
*, , c⁄° *, 
n
, (*)(*));

3076 
SQLITE_API
 
sqlôe3_böd_doubÀ
(
sqlôe3_°mt
*, , );

3077 
SQLITE_API
 
sqlôe3_böd_öt
(
sqlôe3_°mt
*, , );

3078 
SQLITE_API
 
sqlôe3_böd_öt64
(
sqlôe3_°mt
*, , 
sqlôe3_öt64
);

3079 
SQLITE_API
 
sqlôe3_böd_nuŒ
(
sqlôe3_°mt
*, );

3080 
SQLITE_API
 
sqlôe3_böd_ãxt
(
sqlôe3_°mt
*, , c⁄° *, 
n
, (*)(*));

3081 
SQLITE_API
 
sqlôe3_böd_ãxt16
(
sqlôe3_°mt
*, , const *, , (*)(*));

3082 
SQLITE_API
 
sqlôe3_böd_vÆue
(
sqlôe3_°mt
*, , c⁄° 
sqlôe3_vÆue
*);

3083 
SQLITE_API
 
sqlôe3_böd_zîoblob
(
sqlôe3_°mt
*, , 
n
);

3103 
SQLITE_API
 
sqlôe3_böd_∑ømëî_cou¡
(
sqlôe3_°mt
*);

3130 
SQLITE_API
 c⁄° *
sqlôe3_böd_∑ømëî_«me
(
sqlôe3_°mt
*, );

3146 
SQLITE_API
 
sqlôe3_böd_∑ømëî_ödex
(
sqlôe3_°mt
*, c⁄° *
zName
);

3155 
SQLITE_API
 
sqlôe3_˛ór_bödögs
(
sqlôe3_°mt
*);

3166 
SQLITE_API
 
sqlôe3_cﬁumn_cou¡
(
sqlôe3_°mt
 *
pStmt
);

3194 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_«me
(
sqlôe3_°mt
*, 
N
);

3195 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_«me16
(
sqlôe3_°mt
*, 
N
);

3242 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_d©aba£_«me
(
sqlôe3_°mt
*,);

3243 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_d©aba£_«me16
(
sqlôe3_°mt
*,);

3244 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_èbÀ_«me
(
sqlôe3_°mt
*,);

3245 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_èbÀ_«me16
(
sqlôe3_°mt
*,);

3246 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_‹igö_«me
(
sqlôe3_°mt
*,);

3247 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_‹igö_«me16
(
sqlôe3_°mt
*,);

3278 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_de˛ty≥
(
sqlôe3_°mt
*,);

3279 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_de˛ty≥16
(
sqlôe3_°mt
*,);

3358 
SQLITE_API
 
sqlôe3_°ï
(
sqlôe3_°mt
*);

3378 
SQLITE_API
 
sqlôe3_d©a_cou¡
(
sqlôe3_°mt
 *
pStmt
);

3401 
	#SQLITE_INTEGER
 1

	)

3402 
	#SQLITE_FLOAT
 2

	)

3403 
	#SQLITE_BLOB
 4

	)

3404 
	#SQLITE_NULL
 5

	)

3405 #ifde‡
SQLITE_TEXT


3406 #unde‡
SQLITE_TEXT


3408 
	#SQLITE_TEXT
 3

	)

3410 
	#SQLITE3_TEXT
 3

	)

3574 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_blob
(
sqlôe3_°mt
*, 
iCﬁ
);

3575 
SQLITE_API
 
sqlôe3_cﬁumn_byãs
(
sqlôe3_°mt
*, 
iCﬁ
);

3576 
SQLITE_API
 
sqlôe3_cﬁumn_byãs16
(
sqlôe3_°mt
*, 
iCﬁ
);

3577 
SQLITE_API
 
sqlôe3_cﬁumn_doubÀ
(
sqlôe3_°mt
*, 
iCﬁ
);

3578 
SQLITE_API
 
sqlôe3_cﬁumn_öt
(
sqlôe3_°mt
*, 
iCﬁ
);

3579 
SQLITE_API
 
sqlôe3_öt64
 
sqlôe3_cﬁumn_öt64
(
sqlôe3_°mt
*, 
iCﬁ
);

3580 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_ãxt
(
sqlôe3_°mt
*, 
iCﬁ
);

3581 
SQLITE_API
 c⁄° *
sqlôe3_cﬁumn_ãxt16
(
sqlôe3_°mt
*, 
iCﬁ
);

3582 
SQLITE_API
 
sqlôe3_cﬁumn_ty≥
(
sqlôe3_°mt
*, 
iCﬁ
);

3583 
SQLITE_API
 
sqlôe3_vÆue
 *
sqlôe3_cﬁumn_vÆue
(
sqlôe3_°mt
*, 
iCﬁ
);

3610 
SQLITE_API
 
sqlôe3_föÆize
(
sqlôe3_°mt
 *
pStmt
);

3636 
SQLITE_API
 
sqlôe3_ª£t
(
sqlôe3_°mt
 *
pStmt
);

3726 
SQLITE_API
 
sqlôe3_¸óã_fun˘i⁄
(

3727 
sqlôe3
 *
db
,

3728 c⁄° *
zFun˘i⁄Name
,

3729 
nArg
,

3730 
eTextRï
,

3731 *
pAµ
,

3732 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

3733 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

3734 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*)

3736 
SQLITE_API
 
sqlôe3_¸óã_fun˘i⁄16
(

3737 
sqlôe3
 *
db
,

3738 c⁄° *
zFun˘i⁄Name
,

3739 
nArg
,

3740 
eTextRï
,

3741 *
pAµ
,

3742 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

3743 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

3744 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*)

3746 
SQLITE_API
 
sqlôe3_¸óã_fun˘i⁄_v2
(

3747 
sqlôe3
 *
db
,

3748 c⁄° *
zFun˘i⁄Name
,

3749 
nArg
,

3750 
eTextRï
,

3751 *
pAµ
,

3752 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

3753 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

3754 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*),

3755 (*
xDe°roy
)(*)

3764 
	#SQLITE_UTF8
 1

	)

3765 
	#SQLITE_UTF16LE
 2

	)

3766 
	#SQLITE_UTF16BE
 3

	)

3767 
	#SQLITE_UTF16
 4

	)

3768 
	#SQLITE_ANY
 5

	)

3769 
	#SQLITE_UTF16_ALIGNED
 8

	)

3781 #i‚de‡
SQLITE_OMIT_DEPRECATED


3782 
SQLITE_API
 
SQLITE_DEPRECATED
 
sqlôe3_aggªg©e_cou¡
(
sqlôe3_c⁄ãxt
*);

3783 
SQLITE_API
 
SQLITE_DEPRECATED
 
sqlôe3_expúed
(
sqlôe3_°mt
*);

3784 
SQLITE_API
 
SQLITE_DEPRECATED
 
sqlôe3_å™s„r_bödögs
(
sqlôe3_°mt
*, sqlite3_stmt*);

3785 
SQLITE_API
 
SQLITE_DEPRECATED
 
sqlôe3_globÆ_ªcovî
();

3786 
SQLITE_API
 
SQLITE_DEPRECATED
 
sqlôe3_thªad_˛ónup
();

3787 
SQLITE_API
 
SQLITE_DEPRECATED
 
sqlôe3_mem‹y_Æ¨m
((*)(*,
sqlôe3_öt64
,),*,sqlite3_int64);

3835 
SQLITE_API
 c⁄° *
sqlôe3_vÆue_blob
(
sqlôe3_vÆue
*);

3836 
SQLITE_API
 
sqlôe3_vÆue_byãs
(
sqlôe3_vÆue
*);

3837 
SQLITE_API
 
sqlôe3_vÆue_byãs16
(
sqlôe3_vÆue
*);

3838 
SQLITE_API
 
sqlôe3_vÆue_doubÀ
(
sqlôe3_vÆue
*);

3839 
SQLITE_API
 
sqlôe3_vÆue_öt
(
sqlôe3_vÆue
*);

3840 
SQLITE_API
 
sqlôe3_öt64
 
sqlôe3_vÆue_öt64
(
sqlôe3_vÆue
*);

3841 
SQLITE_API
 c⁄° *
sqlôe3_vÆue_ãxt
(
sqlôe3_vÆue
*);

3842 
SQLITE_API
 c⁄° *
sqlôe3_vÆue_ãxt16
(
sqlôe3_vÆue
*);

3843 
SQLITE_API
 c⁄° *
sqlôe3_vÆue_ãxt16À
(
sqlôe3_vÆue
*);

3844 
SQLITE_API
 c⁄° *
sqlôe3_vÆue_ãxt16be
(
sqlôe3_vÆue
*);

3845 
SQLITE_API
 
sqlôe3_vÆue_ty≥
(
sqlôe3_vÆue
*);

3846 
SQLITE_API
 
sqlôe3_vÆue_numîic_ty≥
(
sqlôe3_vÆue
*);

3887 
SQLITE_API
 *
sqlôe3_aggªg©e_c⁄ãxt
(
sqlôe3_c⁄ãxt
*, 
nByãs
);

3901 
SQLITE_API
 *
sqlôe3_u£r_d©a
(
sqlôe3_c⁄ãxt
*);

3912 
SQLITE_API
 
sqlôe3
 *
sqlôe3_c⁄ãxt_db_h™dÀ
(
sqlôe3_c⁄ãxt
*);

3956 
SQLITE_API
 *
sqlôe3_gë_auxd©a
(
sqlôe3_c⁄ãxt
*, 
N
);

3957 
SQLITE_API
 
sqlôe3_£t_auxd©a
(
sqlôe3_c⁄ãxt
*, 
N
, *, (*)(*));

3974 (*
sqlôe3_de°ru˘‹_ty≥
)(*);

3975 
	#SQLITE_STATIC
 ((
sqlôe3_de°ru˘‹_ty≥
)0)

	)

3976 
	#SQLITE_TRANSIENT
 ((
sqlôe3_de°ru˘‹_ty≥
)-1)

	)

4088 
SQLITE_API
 
sqlôe3_ªsu…_blob
(
sqlôe3_c⁄ãxt
*, const *, , (*)(*));

4089 
SQLITE_API
 
sqlôe3_ªsu…_doubÀ
(
sqlôe3_c⁄ãxt
*, );

4090 
SQLITE_API
 
sqlôe3_ªsu…_îr‹
(
sqlôe3_c⁄ãxt
*, const *, );

4091 
SQLITE_API
 
sqlôe3_ªsu…_îr‹16
(
sqlôe3_c⁄ãxt
*, const *, );

4092 
SQLITE_API
 
sqlôe3_ªsu…_îr‹_toobig
(
sqlôe3_c⁄ãxt
*);

4093 
SQLITE_API
 
sqlôe3_ªsu…_îr‹_nomem
(
sqlôe3_c⁄ãxt
*);

4094 
SQLITE_API
 
sqlôe3_ªsu…_îr‹_code
(
sqlôe3_c⁄ãxt
*, );

4095 
SQLITE_API
 
sqlôe3_ªsu…_öt
(
sqlôe3_c⁄ãxt
*, );

4096 
SQLITE_API
 
sqlôe3_ªsu…_öt64
(
sqlôe3_c⁄ãxt
*, 
sqlôe3_öt64
);

4097 
SQLITE_API
 
sqlôe3_ªsu…_nuŒ
(
sqlôe3_c⁄ãxt
*);

4098 
SQLITE_API
 
sqlôe3_ªsu…_ãxt
(
sqlôe3_c⁄ãxt
*, const *, , (*)(*));

4099 
SQLITE_API
 
sqlôe3_ªsu…_ãxt16
(
sqlôe3_c⁄ãxt
*, const *, , (*)(*));

4100 
SQLITE_API
 
sqlôe3_ªsu…_ãxt16À
(
sqlôe3_c⁄ãxt
*, const *, ,(*)(*));

4101 
SQLITE_API
 
sqlôe3_ªsu…_ãxt16be
(
sqlôe3_c⁄ãxt
*, const *, ,(*)(*));

4102 
SQLITE_API
 
sqlôe3_ªsu…_vÆue
(
sqlôe3_c⁄ãxt
*, 
sqlôe3_vÆue
*);

4103 
SQLITE_API
 
sqlôe3_ªsu…_zîoblob
(
sqlôe3_c⁄ãxt
*, 
n
);

4184 
SQLITE_API
 
sqlôe3_¸óã_cﬁœti⁄
(

4185 
sqlôe3
*,

4186 c⁄° *
zName
,

4187 
eTextRï
,

4188 *
pArg
,

4189 (*
xCom∑ª
)(*,,const *,,const *)

4191 
SQLITE_API
 
sqlôe3_¸óã_cﬁœti⁄_v2
(

4192 
sqlôe3
*,

4193 c⁄° *
zName
,

4194 
eTextRï
,

4195 *
pArg
,

4196 (*
xCom∑ª
)(*,,const *,,const *),

4197 (*
xDe°roy
)(*)

4199 
SQLITE_API
 
sqlôe3_¸óã_cﬁœti⁄16
(

4200 
sqlôe3
*,

4201 c⁄° *
zName
,

4202 
eTextRï
,

4203 *
pArg
,

4204 (*
xCom∑ª
)(*,,const *,,const *)

4233 
SQLITE_API
 
sqlôe3_cﬁœti⁄_√eded
(

4234 
sqlôe3
*,

4236 (*)(*,
sqlôe3
*,
eTextRï
,const *)

4238 
SQLITE_API
 
sqlôe3_cﬁœti⁄_√eded16
(

4239 
sqlôe3
*,

4241 (*)(*,
sqlôe3
*,
eTextRï
,const *)

4244 #ifde‡
SQLITE_HAS_CODEC


4252 
SQLITE_API
 
sqlôe3_key
(

4253 
sqlôe3
 *
db
,

4254 c⁄° *
pKey
, 
nKey


4265 
SQLITE_API
 
sqlôe3_ªkey
(

4266 
sqlôe3
 *
db
,

4267 c⁄° *
pKey
, 
nKey


4274 
SQLITE_API
 
sqlôe3_a˘iv©e_£e
(

4275 c⁄° *
zPassPhø£


4279 #ifde‡
SQLITE_ENABLE_CEROD


4284 
SQLITE_API
 
sqlôe3_a˘iv©e_˚rod
(

4285 c⁄° *
zPassPhø£


4306 
SQLITE_API
 
sqlôe3_¶ìp
();

4337 
SQLITE_API
 
SQLITE_EXTERN
 *
sqlôe3_ãmp_dúe˘‹y
;

4360 
SQLITE_API
 
sqlôe3_gë_autocommô
(
sqlôe3
*);

4372 
SQLITE_API
 
sqlôe3
 *
sqlôe3_db_h™dÀ
(
sqlôe3_°mt
*);

4387 
SQLITE_API
 
sqlôe3_°mt
 *
sqlôe3_√xt_°mt
(
sqlôe3
 *
pDb
, sqlôe3_°mà*
pStmt
);

4433 
SQLITE_API
 *
sqlôe3_commô_hook
(
sqlôe3
*, (*)(*), *);

4434 
SQLITE_API
 *
sqlôe3_rﬁlback_hook
(
sqlôe3
*, (*)(*), *);

4482 
SQLITE_API
 *
sqlôe3_upd©e_hook
(

4483 
sqlôe3
*,

4484 (*)(*,,c⁄° *,c⁄° *,
sqlôe3_öt64
),

4515 
SQLITE_API
 
sqlôe3_íabÀ_sh¨ed_ˇche
();

4529 
SQLITE_API
 
sqlôe3_ªÀa£_mem‹y
();

4580 
SQLITE_API
 
sqlôe3_öt64
 
sqlôe3_so·_hóp_limô64
(sqlôe3_öt64 
N
);

4591 
SQLITE_API
 
SQLITE_DEPRECATED
 
sqlôe3_so·_hóp_limô
(
N
);

4656 
SQLITE_API
 
sqlôe3_èbÀ_cﬁumn_mëad©a
(

4657 
sqlôe3
 *
db
,

4658 c⁄° *
zDbName
,

4659 c⁄° *
zTabÀName
,

4660 c⁄° *
zCﬁumnName
,

4661 c⁄° **
pzD©aTy≥
,

4662 c⁄° **
pzCﬁlSeq
,

4663 *
pNŸNuŒ
,

4664 *
pPrim¨yKey
,

4665 *
pAutoöc


4693 
SQLITE_API
 
sqlôe3_lﬂd_exãnsi⁄
(

4694 
sqlôe3
 *
db
,

4695 c⁄° *
zFûe
,

4696 c⁄° *
zProc
,

4697 **
pzEºMsg


4713 
SQLITE_API
 
sqlôe3_íabÀ_lﬂd_exãnsi⁄
(
sqlôe3
 *
db
, 
⁄off
);

4750 
SQLITE_API
 
sqlôe3_auto_exãnsi⁄
((*
xE¡ryPoöt
)());

4758 
SQLITE_API
 
sqlôe3_ª£t_auto_exãnsi⁄
();

4772 
sqlôe3_vèb
 
	tsqlôe3_vèb
;

4773 
sqlôe3_ödex_öfo
 
	tsqlôe3_ödex_öfo
;

4774 
sqlôe3_vèb_curs‹
 
	tsqlôe3_vèb_curs‹
;

4775 
sqlôe3_moduÀ
 
	tsqlôe3_moduÀ
;

4793 
	ssqlôe3_moduÀ
 {

4794 
iVîsi⁄
;

4795 (*
xCª©e
)(
sqlôe3
*, *
pAux
,

4796 
¨gc
, c⁄° *c⁄°*
¨gv
,

4797 
sqlôe3_vèb
 **
µVTab
, **);

4798 (*
xC⁄√˘
)(
sqlôe3
*, *
pAux
,

4799 
¨gc
, c⁄° *c⁄°*
¨gv
,

4800 
sqlôe3_vèb
 **
µVTab
, **);

4801 (*
xBe°Index
)(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_ödex_öfo
*);

4802 (*
xDisc⁄√˘
)(
sqlôe3_vèb
 *
pVTab
);

4803 (*
xDe°roy
)(
sqlôe3_vèb
 *
pVTab
);

4804 (*
xO≥n
)(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
);

4805 (*
xClo£
)(
sqlôe3_vèb_curs‹
*);

4806 (*
xFûãr
)(
sqlôe3_vèb_curs‹
*, 
idxNum
, c⁄° *
idxSå
,

4807 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
);

4808 (*
xNext
)(
sqlôe3_vèb_curs‹
*);

4809 (*
xEof
)(
sqlôe3_vèb_curs‹
*);

4810 (*
xCﬁumn
)(
sqlôe3_vèb_curs‹
*, 
sqlôe3_c⁄ãxt
*, );

4811 (*
xRowid
)(
sqlôe3_vèb_curs‹
*, 
sqlôe3_öt64
 *
pRowid
);

4812 (*
xUpd©e
)(
sqlôe3_vèb
 *, , 
sqlôe3_vÆue
 **, 
sqlôe3_öt64
 *);

4813 (*
xBegö
)(
sqlôe3_vèb
 *
pVTab
);

4814 (*
xSync
)(
sqlôe3_vèb
 *
pVTab
);

4815 (*
xCommô
)(
sqlôe3_vèb
 *
pVTab
);

4816 (*
xRﬁlback
)(
sqlôe3_vèb
 *
pVTab
);

4817 (*
xFödFun˘i⁄
)(
sqlôe3_vèb
 *
pVèb
, 
nArg
, c⁄° *
zName
,

4818 (**
pxFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

4819 **
µArg
);

4820 (*
xRíame
)(
sqlôe3_vèb
 *
pVèb
, c⁄° *
zNew
);

4823 (*
xSavïoöt
)(
sqlôe3_vèb
 *
pVTab
, );

4824 (*
xRñó£
)(
sqlôe3_vèb
 *
pVTab
, );

4825 (*
xRﬁlbackTo
)(
sqlôe3_vèb
 *
pVTab
, );

4881 
	ssqlôe3_ödex_öfo
 {

4883 
nC⁄°øöt
;

4884 
	ssqlôe3_ödex_c⁄°øöt
 {

4885 
iCﬁumn
;

4886 
›
;

4887 
ußbÀ
;

4888 
iTîmOff£t
;

4889 } *
aC⁄°øöt
;

4890 
nOrdîBy
;

4891 
	ssqlôe3_ödex_‹dîby
 {

4892 
iCﬁumn
;

4893 
desc
;

4894 } *
aOrdîBy
;

4896 
	ssqlôe3_ödex_c⁄°øöt_ußge
 {

4897 
¨gvIndex
;

4898 
omô
;

4899 } *
aC⁄°øötUßge
;

4900 
idxNum
;

4901 *
idxSå
;

4902 
√edToFªeIdxSå
;

4903 
‹dîByC⁄sumed
;

4904 
e°im©edCo°
;

4915 
	#SQLITE_INDEX_CONSTRAINT_EQ
 2

	)

4916 
	#SQLITE_INDEX_CONSTRAINT_GT
 4

	)

4917 
	#SQLITE_INDEX_CONSTRAINT_LE
 8

	)

4918 
	#SQLITE_INDEX_CONSTRAINT_LT
 16

	)

4919 
	#SQLITE_INDEX_CONSTRAINT_GE
 32

	)

4920 
	#SQLITE_INDEX_CONSTRAINT_MATCH
 64

	)

4947 
SQLITE_API
 
sqlôe3_¸óã_moduÀ
(

4948 
sqlôe3
 *
db
,

4949 c⁄° *
zName
,

4950 c⁄° 
sqlôe3_moduÀ
 *
p
,

4951 *
pClõ¡D©a


4953 
SQLITE_API
 
sqlôe3_¸óã_moduÀ_v2
(

4954 
sqlôe3
 *
db
,

4955 c⁄° *
zName
,

4956 c⁄° 
sqlôe3_moduÀ
 *
p
,

4957 *
pClõ¡D©a
,

4958 (*
xDe°roy
)(*)

4979 
	ssqlôe3_vèb
 {

4980 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
;

4981 
nRef
;

4982 *
zEºMsg
;

5003 
	ssqlôe3_vèb_curs‹
 {

5004 
sqlôe3_vèb
 *
pVèb
;

5016 
SQLITE_API
 
sqlôe3_de˛¨e_vèb
(
sqlôe3
*, c⁄° *
zSQL
);

5034 
SQLITE_API
 
sqlôe3_ovîlﬂd_fun˘i⁄
(
sqlôe3
*, c⁄° *
zFuncName
, 
nArg
);

5058 
sqlôe3_blob
 
	tsqlôe3_blob
;

5116 
SQLITE_API
 
sqlôe3_blob_›í
(

5117 
sqlôe3
*,

5118 c⁄° *
zDb
,

5119 c⁄° *
zTabÀ
,

5120 c⁄° *
zCﬁumn
,

5121 
sqlôe3_öt64
 
iRow
,

5122 
Êags
,

5123 
sqlôe3_blob
 **
µBlob


5148 
SQLITE_API
 
SQLITE_EXPERIMENTAL
 
sqlôe3_blob_ª›í
(
sqlôe3_blob
 *, 
sqlôe3_öt64
);

5172 
SQLITE_API
 
sqlôe3_blob_˛o£
(
sqlôe3_blob
 *);

5187 
SQLITE_API
 
sqlôe3_blob_byãs
(
sqlôe3_blob
 *);

5215 
SQLITE_API
 
sqlôe3_blob_ªad
(
sqlôe3_blob
 *, *
Z
, 
N
, 
iOff£t
);

5253 
SQLITE_API
 
sqlôe3_blob_wrôe
(
sqlôe3_blob
 *, c⁄° *
z
, 
n
, 
iOff£t
);

5284 
SQLITE_API
 
sqlôe3_vfs
 *
sqlôe3_vfs_föd
(c⁄° *
zVfsName
);

5285 
SQLITE_API
 
sqlôe3_vfs_ªgi°î
(
sqlôe3_vfs
*, 
makeDÊt
);

5286 
SQLITE_API
 
sqlôe3_vfs_uƒegi°î
(
sqlôe3_vfs
*);

5402 
SQLITE_API
 
sqlôe3_muãx
 *
sqlôe3_muãx_Æloc
();

5403 
SQLITE_API
 
sqlôe3_muãx_‰ì
(
sqlôe3_muãx
*);

5404 
SQLITE_API
 
sqlôe3_muãx_íãr
(
sqlôe3_muãx
*);

5405 
SQLITE_API
 
sqlôe3_muãx_åy
(
sqlôe3_muãx
*);

5406 
SQLITE_API
 
sqlôe3_muãx_Àave
(
sqlôe3_muãx
*);

5473 
sqlôe3_muãx_mëhods
 
	tsqlôe3_muãx_mëhods
;

5474 
	ssqlôe3_muãx_mëhods
 {

5475 (*
xMuãxInô
)();

5476 (*
xMuãxEnd
)();

5477 
sqlôe3_muãx
 *(*
xMuãxAŒoc
)();

5478 (*
xMuãxFªe
)(
sqlôe3_muãx
 *);

5479 (*
xMuãxE¡î
)(
sqlôe3_muãx
 *);

5480 (*
xMuãxTry
)(
sqlôe3_muãx
 *);

5481 (*
xMuãxLóve
)(
sqlôe3_muãx
 *);

5482 (*
xMuãxHñd
)(
sqlôe3_muãx
 *);

5483 (*
xMuãxNŸhñd
)(
sqlôe3_muãx
 *);

5515 #i‚de‡
NDEBUG


5516 
SQLITE_API
 
sqlôe3_muãx_hñd
(
sqlôe3_muãx
*);

5517 
SQLITE_API
 
sqlôe3_muãx_nŸhñd
(
sqlôe3_muãx
*);

5530 
	#SQLITE_MUTEX_FAST
 0

	)

5531 
	#SQLITE_MUTEX_RECURSIVE
 1

	)

5532 
	#SQLITE_MUTEX_STATIC_MASTER
 2

	)

5533 
	#SQLITE_MUTEX_STATIC_MEM
 3

	)

5534 
	#SQLITE_MUTEX_STATIC_MEM2
 4

	)

5535 
	#SQLITE_MUTEX_STATIC_OPEN
 4

	)

5536 
	#SQLITE_MUTEX_STATIC_PRNG
 5

	)

5537 
	#SQLITE_MUTEX_STATIC_LRU
 6

	)

5538 
	#SQLITE_MUTEX_STATIC_LRU2
 7

	)

5539 
	#SQLITE_MUTEX_STATIC_PMEM
 7

	)

5550 
SQLITE_API
 
sqlôe3_muãx
 *
sqlôe3_db_muãx
(
sqlôe3
*);

5584 
SQLITE_API
 
sqlôe3_fûe_c⁄åﬁ
(
sqlôe3
*, c⁄° *
zDbName
, 
›
, *);

5603 
SQLITE_API
 
sqlôe3_ã°_c⁄åﬁ
(
›
, ...);

5616 
	#SQLITE_TESTCTRL_FIRST
 5

	)

5617 
	#SQLITE_TESTCTRL_PRNG_SAVE
 5

	)

5618 
	#SQLITE_TESTCTRL_PRNG_RESTORE
 6

	)

5619 
	#SQLITE_TESTCTRL_PRNG_RESET
 7

	)

5620 
	#SQLITE_TESTCTRL_BITVEC_TEST
 8

	)

5621 
	#SQLITE_TESTCTRL_FAULT_INSTALL
 9

	)

5622 
	#SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS
 10

	)

5623 
	#SQLITE_TESTCTRL_PENDING_BYTE
 11

	)

5624 
	#SQLITE_TESTCTRL_ASSERT
 12

	)

5625 
	#SQLITE_TESTCTRL_ALWAYS
 13

	)

5626 
	#SQLITE_TESTCTRL_RESERVE
 14

	)

5627 
	#SQLITE_TESTCTRL_OPTIMIZATIONS
 15

	)

5628 
	#SQLITE_TESTCTRL_ISKEYWORD
 16

	)

5629 
	#SQLITE_TESTCTRL_PGHDRSZ
 17

	)

5630 
	#SQLITE_TESTCTRL_SCRATCHMALLOC
 18

	)

5631 
	#SQLITE_TESTCTRL_LOCALTIME_FAULT
 19

	)

5632 
	#SQLITE_TESTCTRL_LAST
 19

	)

5663 
SQLITE_API
 
sqlôe3_°©us
(
›
, *
pCuºít
, *
pHighw©î
, 
ª£tFœg
);

5748 
	#SQLITE_STATUS_MEMORY_USED
 0

	)

5749 
	#SQLITE_STATUS_PAGECACHE_USED
 1

	)

5750 
	#SQLITE_STATUS_PAGECACHE_OVERFLOW
 2

	)

5751 
	#SQLITE_STATUS_SCRATCH_USED
 3

	)

5752 
	#SQLITE_STATUS_SCRATCH_OVERFLOW
 4

	)

5753 
	#SQLITE_STATUS_MALLOC_SIZE
 5

	)

5754 
	#SQLITE_STATUS_PARSER_STACK
 6

	)

5755 
	#SQLITE_STATUS_PAGECACHE_SIZE
 7

	)

5756 
	#SQLITE_STATUS_SCRATCH_SIZE
 8

	)

5757 
	#SQLITE_STATUS_MALLOC_COUNT
 9

	)

5781 
SQLITE_API
 
sqlôe3_db_°©us
(
sqlôe3
*, 
›
, *
pCur
, *
pHiwå
, 
ª£tFlg
);

5856 
	#SQLITE_DBSTATUS_LOOKASIDE_USED
 0

	)

5857 
	#SQLITE_DBSTATUS_CACHE_USED
 1

	)

5858 
	#SQLITE_DBSTATUS_SCHEMA_USED
 2

	)

5859 
	#SQLITE_DBSTATUS_STMT_USED
 3

	)

5860 
	#SQLITE_DBSTATUS_LOOKASIDE_HIT
 4

	)

5861 
	#SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE
 5

	)

5862 
	#SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL
 6

	)

5863 
	#SQLITE_DBSTATUS_CACHE_HIT
 7

	)

5864 
	#SQLITE_DBSTATUS_CACHE_MISS
 8

	)

5865 
	#SQLITE_DBSTATUS_MAX
 8

	)

5891 
SQLITE_API
 
sqlôe3_°mt_°©us
(
sqlôe3_°mt
*, 
›
,
ª£tFlg
);

5921 
	#SQLITE_STMTSTATUS_FULLSCAN_STEP
 1

	)

5922 
	#SQLITE_STMTSTATUS_SORT
 2

	)

5923 
	#SQLITE_STMTSTATUS_AUTOINDEX
 3

	)

5936 
sqlôe3_pˇche
 
	tsqlôe3_pˇche
;

6088 
sqlôe3_pˇche_mëhods
 
	tsqlôe3_pˇche_mëhods
;

6089 
	ssqlôe3_pˇche_mëhods
 {

6090 *
pArg
;

6091 (*
xInô
)(*);

6092 (*
xShutdown
)(*);

6093 
sqlôe3_pˇche
 *(*
xCª©e
)(
szPage
, 
bPurgóbÀ
);

6094 (*
xCachesize
)(
sqlôe3_pˇche
*, 
nCachesize
);

6095 (*
xPagecou¡
)(
sqlôe3_pˇche
*);

6096 *(*
xFëch
)(
sqlôe3_pˇche
*, 
key
, 
¸óãFœg
);

6097 (*
xU≈ö
)(
sqlôe3_pˇche
*, *, 
disˇrd
);

6098 (*
xRekey
)(
sqlôe3_pˇche
*, *, 
ﬁdKey
, 
√wKey
);

6099 (*
xTrunˇã
)(
sqlôe3_pˇche
*, 
iLimô
);

6100 (*
xDe°roy
)(
sqlôe3_pˇche
*);

6113 
sqlôe3_backup
 
	tsqlôe3_backup
;

6297 
SQLITE_API
 
sqlôe3_backup
 *
sqlôe3_backup_öô
(

6298 
sqlôe3
 *
pDe°
,

6299 c⁄° *
zDe°Name
,

6300 
sqlôe3
 *
pSour˚
,

6301 c⁄° *
zSour˚Name


6303 
SQLITE_API
 
sqlôe3_backup_°ï
(
sqlôe3_backup
 *
p
, 
nPage
);

6304 
SQLITE_API
 
sqlôe3_backup_föish
(
sqlôe3_backup
 *
p
);

6305 
SQLITE_API
 
sqlôe3_backup_ªmaöög
(
sqlôe3_backup
 *
p
);

6306 
SQLITE_API
 
sqlôe3_backup_∑gecou¡
(
sqlôe3_backup
 *
p
);

6422 
SQLITE_API
 
sqlôe3_u∆ock_nŸify
(

6423 
sqlôe3
 *
pBlocked
,

6424 (*
xNŸify
)(**
≠Arg
, 
nArg
),

6425 *
pNŸifyArg


6437 
SQLITE_API
 
sqlôe3_°∫icmp
(const *, const *, );

6460 
SQLITE_API
 
sqlôe3_log
(
iEºCode
, c⁄° *
zF‹m©
, ...);

6497 
SQLITE_API
 *
sqlôe3_wÆ_hook
(

6498 
sqlôe3
*,

6499 (*)(*,
sqlôe3
*,const *,),

6528 
SQLITE_API
 
sqlôe3_wÆ_autocheckpoöt
(
sqlôe3
 *
db
, 
N
);

6546 
SQLITE_API
 
sqlôe3_wÆ_checkpoöt
(
sqlôe3
 *
db
, c⁄° *
zDb
);

6618 
SQLITE_API
 
sqlôe3_wÆ_checkpoöt_v2
(

6619 
sqlôe3
 *
db
,

6620 c⁄° *
zDb
,

6621 
eMode
,

6622 *
≤Log
,

6623 *
≤Ck±


6634 
	#SQLITE_CHECKPOINT_PASSIVE
 0

	)

6635 
	#SQLITE_CHECKPOINT_FULL
 1

	)

6636 
	#SQLITE_CHECKPOINT_RESTART
 2

	)

6652 
SQLITE_API
 
sqlôe3_vèb_c⁄fig
(
sqlôe3
*, 
›
, ...);

6693 
	#SQLITE_VTAB_CONSTRAINT_SUPPORT
 1

	)

6705 
SQLITE_API
 
sqlôe3_vèb_⁄_c⁄Êi˘
(
sqlôe3
 *);

6718 
	#SQLITE_ROLLBACK
 1

	)

6720 
	#SQLITE_FAIL
 3

	)

6722 
	#SQLITE_REPLACE
 5

	)

6730 #ifde‡
SQLITE_OMIT_FLOATING_POINT


6734 #ifde‡
__˝lu•lus


6752 #i‚de‡
_SQLITE3RTREE_H_


6753 
	#_SQLITE3RTREE_H_


	)

6756 #ifde‡
__˝lu•lus


6760 
sqlôe3_πªe_geomëry
 
	tsqlôe3_πªe_geomëry
;

6768 
SQLITE_API
 
sqlôe3_πªe_geomëry_ˇŒback
(

6769 
sqlôe3
 *
db
,

6770 c⁄° *
zGeom
,

6771 (*
xGeom
)(
sqlôe3_πªe_geomëry
 *, 
nCo‹d
, *
aCo‹d
, *
pRes
),

6772 *
pC⁄ãxt


6780 
	ssqlôe3_πªe_geomëry
 {

6781 *
pC⁄ãxt
;

6782 
nP¨am
;

6783 *
aP¨am
;

6784 *
pU£r
;

6785 (*
xDñU£r
)(*);

6789 #ifde‡
__˝lu•lus


	@/usr/include/sqlite3ext.h

18 #i‚de‡
_SQLITE3EXT_H_


19 
	#_SQLITE3EXT_H_


	)

20 
	~"sqlôe3.h
"

22 
sqlôe3_≠i_routöes
 
	tsqlôe3_≠i_routöes
;

34 
	ssqlôe3_≠i_routöes
 {

35 * (*
	maggªg©e_c⁄ãxt
)(
	msqlôe3_c⁄ãxt
*,
	mnByãs
);

36 (*
	maggªg©e_cou¡
)(
	msqlôe3_c⁄ãxt
*);

37 (*
	mböd_blob
)(
	msqlôe3_°mt
*,,c⁄° *,
	mn
,(*)(*));

38 (*
	mböd_doubÀ
)(
	msqlôe3_°mt
*,,);

39 (*
	mböd_öt
)(
	msqlôe3_°mt
*,,);

40 (*
	mböd_öt64
)(
	msqlôe3_°mt
*,,
	msqlôe_öt64
);

41 (*
	mböd_nuŒ
)(
	msqlôe3_°mt
*,);

42 (*
	mböd_∑ømëî_cou¡
)(
	msqlôe3_°mt
*);

43 (*
	mböd_∑ømëî_ödex
)(
	msqlôe3_°mt
*,c⁄° *
	mzName
);

44 c⁄° * (*
	mböd_∑ømëî_«me
)(
	msqlôe3_°mt
*,);

45 (*
	mböd_ãxt
)(
	msqlôe3_°mt
*,,c⁄° *,
	mn
,(*)(*));

46 (*
	mböd_ãxt16
)(
	msqlôe3_°mt
*,,const *,,(*)(*));

47 (*
	mböd_vÆue
)(
	msqlôe3_°mt
*,,c⁄° 
	msqlôe3_vÆue
*);

48 (*
	mbusy_h™dÀr
)(
	msqlôe3
*,(*)(*,),*);

49 (*
	mbusy_timeout
)(
	msqlôe3
*,
	mms
);

50 (*
	mch™ges
)(
	msqlôe3
*);

51 (*
	m˛o£
)(
	msqlôe3
*);

52 (*
	mcﬁœti⁄_√eded
)(
	msqlôe3
*,*,(*)(*,sqlite3*,

53 
	meTextRï
,const *));

54 (*
	mcﬁœti⁄_√eded16
)(
	msqlôe3
*,*,(*)(*,sqlite3*,

55 
	meTextRï
,const *));

56 c⁄° * (*
	mcﬁumn_blob
)(
	msqlôe3_°mt
*,
	miCﬁ
);

57 (*
	mcﬁumn_byãs
)(
	msqlôe3_°mt
*,
	miCﬁ
);

58 (*
	mcﬁumn_byãs16
)(
	msqlôe3_°mt
*,
	miCﬁ
);

59 (*
	mcﬁumn_cou¡
)(
sqlôe3_°mt
*
	mpStmt
);

60 c⁄° * (*
	mcﬁumn_d©aba£_«me
)(
	msqlôe3_°mt
*,);

61 c⁄° * (*
	mcﬁumn_d©aba£_«me16
)(
	msqlôe3_°mt
*,);

62 c⁄° * (*
	mcﬁumn_de˛ty≥
)(
	msqlôe3_°mt
*,
	mi
);

63 c⁄° * (*
	mcﬁumn_de˛ty≥16
)(
	msqlôe3_°mt
*,);

64 (*
	mcﬁumn_doubÀ
)(
	msqlôe3_°mt
*,
	miCﬁ
);

65 (*
	mcﬁumn_öt
)(
	msqlôe3_°mt
*,
	miCﬁ
);

66 
sqlôe_öt64
 (*
cﬁumn_öt64
)(
	msqlôe3_°mt
*,
	miCﬁ
);

67 c⁄° * (*
	mcﬁumn_«me
)(
	msqlôe3_°mt
*,);

68 c⁄° * (*
	mcﬁumn_«me16
)(
	msqlôe3_°mt
*,);

69 c⁄° * (*
	mcﬁumn_‹igö_«me
)(
	msqlôe3_°mt
*,);

70 c⁄° * (*
	mcﬁumn_‹igö_«me16
)(
	msqlôe3_°mt
*,);

71 c⁄° * (*
	mcﬁumn_èbÀ_«me
)(
	msqlôe3_°mt
*,);

72 c⁄° * (*
	mcﬁumn_èbÀ_«me16
)(
	msqlôe3_°mt
*,);

73 c⁄° * (*
	mcﬁumn_ãxt
)(
	msqlôe3_°mt
*,
	miCﬁ
);

74 c⁄° * (*
	mcﬁumn_ãxt16
)(
	msqlôe3_°mt
*,
	miCﬁ
);

75 (*
	mcﬁumn_ty≥
)(
	msqlôe3_°mt
*,
	miCﬁ
);

76 
	msqlôe3_vÆue
* (*
	mcﬁumn_vÆue
)(
	msqlôe3_°mt
*,
	miCﬁ
);

77 * (*
	mcommô_hook
)(
	msqlôe3
*,(*)(*),*);

78 (*
	mcom∂ëe
)(c⁄° *
	msql
);

79 (*
	mcom∂ëe16
)(c⁄° *
	msql
);

80 (*
	m¸óã_cﬁœti⁄
)(
	msqlôe3
*,const *,,*,

82 (*
	m¸óã_cﬁœti⁄16
)(
	msqlôe3
*,const *,,*,

84 (*
	m¸óã_fun˘i⁄
)(
	msqlôe3
*,const *,,,*,

85 (*
	mxFunc
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

86 (*
	mxSãp
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

87 (*
	mxFöÆ
)(
	msqlôe3_c⁄ãxt
*));

88 (*
	m¸óã_fun˘i⁄16
)(
	msqlôe3
*,const *,,,*,

89 (*
	mxFunc
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

90 (*
	mxSãp
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

91 (*
	mxFöÆ
)(
	msqlôe3_c⁄ãxt
*));

92 (*
	m¸óã_moduÀ
)(
	msqlôe3
*,c⁄° *,c⁄° 
	msqlôe3_moduÀ
*,*);

93 (*
	md©a_cou¡
)(
sqlôe3_°mt
*
	mpStmt
);

94 
	msqlôe3
 * (*
	mdb_h™dÀ
)(
	msqlôe3_°mt
*);

95 (*
	mde˛¨e_vèb
)(
	msqlôe3
*,const *);

96 (*
	míabÀ_sh¨ed_ˇche
)();

97 (*
	mîrcode
)(
sqlôe3
*
	mdb
);

98 c⁄° * (*
	mîrmsg
)(
	msqlôe3
*);

99 c⁄° * (*
	mîrmsg16
)(
	msqlôe3
*);

100 (*
	mexec
)(
	msqlôe3
*,c⁄° *,
	msqlôe3_ˇŒback
,*,**);

101 (*
	mexpúed
)(
	msqlôe3_°mt
*);

102 (*
	mföÆize
)(
sqlôe3_°mt
*
	mpStmt
);

103 (*
	m‰ì
)(*);

104 (*
	m‰ì_èbÀ
)(**
	mªsu…
);

105 (*
	mgë_autocommô
)(
	msqlôe3
*);

106 * (*
	mgë_auxd©a
)(
	msqlôe3_c⁄ãxt
*,);

107 (*
	mgë_èbÀ
)(
	msqlôe3
*,const *,***,*,*,**);

108 (*
	mglobÆ_ªcovî
)();

109 (*
	möãºu±x
)(
	msqlôe3
*);

110 
sqlôe_öt64
 (*
œ°_ö£π_rowid
)(
	msqlôe3
*);

111 c⁄° * (*
	mlibvîsi⁄
)();

112 (*
	mlibvîsi⁄_numbî
)();

113 *(*
	mmÆloc
)();

114 * (*
	mm¥ötf
)(const *,...);

115 (*
	m›í
)(c⁄° *,
	msqlôe3
**);

116 (*
	m›í16
)(c⁄° *,
	msqlôe3
**);

117 (*
	m¥ï¨e
)(
	msqlôe3
*,c⁄° *,,
	msqlôe3_°mt
**,const **);

118 (*
	m¥ï¨e16
)(
	msqlôe3
*,c⁄° *,,
	msqlôe3_°mt
**,const **);

119 * (*
	m¥ofûe
)(
	msqlôe3
*,(*)(*,c⁄° *,
	msqlôe_uöt64
),*);

120 (*
	m¥ogªss_h™dÀr
)(
	msqlôe3
*,,(*)(*),*);

121 *(*
	mªÆloc
)(*,);

122 (*
	mª£t
)(
sqlôe3_°mt
*
	mpStmt
);

123 (*
	mªsu…_blob
)(
	msqlôe3_c⁄ãxt
*,const *,,(*)(*));

124 (*
	mªsu…_doubÀ
)(
	msqlôe3_c⁄ãxt
*,);

125 (*
	mªsu…_îr‹
)(
	msqlôe3_c⁄ãxt
*,const *,);

126 (*
	mªsu…_îr‹16
)(
	msqlôe3_c⁄ãxt
*,const *,);

127 (*
	mªsu…_öt
)(
	msqlôe3_c⁄ãxt
*,);

128 (*
	mªsu…_öt64
)(
	msqlôe3_c⁄ãxt
*,
	msqlôe_öt64
);

129 (*
	mªsu…_nuŒ
)(
	msqlôe3_c⁄ãxt
*);

130 (*
	mªsu…_ãxt
)(
	msqlôe3_c⁄ãxt
*,const *,,(*)(*));

131 (*
	mªsu…_ãxt16
)(
	msqlôe3_c⁄ãxt
*,const *,,(*)(*));

132 (*
	mªsu…_ãxt16be
)(
	msqlôe3_c⁄ãxt
*,const *,,(*)(*));

133 (*
	mªsu…_ãxt16À
)(
	msqlôe3_c⁄ãxt
*,const *,,(*)(*));

134 (*
	mªsu…_vÆue
)(
	msqlôe3_c⁄ãxt
*,
	msqlôe3_vÆue
*);

135 * (*
	mrﬁlback_hook
)(
	msqlôe3
*,(*)(*),*);

136 (*
	m£t_auth‹izî
)(
	msqlôe3
*,(*)(*,,const *,const *,

138 (*
	m£t_auxd©a
)(
	msqlôe3_c⁄ãxt
*,,*,(*)(*));

139 * (*
	m¢¥ötf
)(,*,const *,...);

140 (*
	m°ï
)(
	msqlôe3_°mt
*);

141 (*
	mèbÀ_cﬁumn_mëad©a
)(
	msqlôe3
*,const *,const *,const *,

143 (*
	mthªad_˛ónup
)();

144 (*
	mtŸÆ_ch™ges
)(
	msqlôe3
*);

145 * (*
	måa˚
)(
	msqlôe3
*,(*
	mxTø˚
)(*,const *),*);

146 (*
	må™s„r_bödögs
)(
	msqlôe3_°mt
*,sqlite3_stmt*);

147 * (*
	mupd©e_hook
)(
	msqlôe3
*,(*)(*,,const*,const*,

148 
	msqlôe_öt64
),*);

149 * (*
	mu£r_d©a
)(
	msqlôe3_c⁄ãxt
*);

150 c⁄° * (*
	mvÆue_blob
)(
	msqlôe3_vÆue
*);

151 (*
	mvÆue_byãs
)(
	msqlôe3_vÆue
*);

152 (*
	mvÆue_byãs16
)(
	msqlôe3_vÆue
*);

153 (*
	mvÆue_doubÀ
)(
	msqlôe3_vÆue
*);

154 (*
	mvÆue_öt
)(
	msqlôe3_vÆue
*);

155 
sqlôe_öt64
 (*
vÆue_öt64
)(
	msqlôe3_vÆue
*);

156 (*
	mvÆue_numîic_ty≥
)(
	msqlôe3_vÆue
*);

157 c⁄° * (*
	mvÆue_ãxt
)(
	msqlôe3_vÆue
*);

158 c⁄° * (*
	mvÆue_ãxt16
)(
	msqlôe3_vÆue
*);

159 c⁄° * (*
	mvÆue_ãxt16be
)(
	msqlôe3_vÆue
*);

160 c⁄° * (*
	mvÆue_ãxt16À
)(
	msqlôe3_vÆue
*);

161 (*
	mvÆue_ty≥
)(
	msqlôe3_vÆue
*);

162 *(*
	mvm¥ötf
)(c⁄° *,
	mva_li°
);

164 (*
	movîlﬂd_fun˘i⁄
)(
	msqlôe3
*, c⁄° *
	mzFuncName
, 
	mnArg
);

166 (*
	m¥ï¨e_v2
)(
	msqlôe3
*,c⁄° *,,
	msqlôe3_°mt
**,const **);

167 (*
	m¥ï¨e16_v2
)(
	msqlôe3
*,c⁄° *,,
	msqlôe3_°mt
**,const **);

168 (*
	m˛ór_bödögs
)(
	msqlôe3_°mt
*);

170 (*
	m¸óã_moduÀ_v2
)(
	msqlôe3
*,c⁄° *,c⁄° 
	msqlôe3_moduÀ
*,*,

171 (*
	mxDe°roy
)(*));

173 (*
	mböd_zîoblob
)(
	msqlôe3_°mt
*,,);

174 (*
	mblob_byãs
)(
	msqlôe3_blob
*);

175 (*
	mblob_˛o£
)(
	msqlôe3_blob
*);

176 (*
	mblob_›í
)(
	msqlôe3
*,c⁄° *,c⁄° *,c⁄° *,
	msqlôe3_öt64
,

177 ,
	msqlôe3_blob
**);

178 (*
	mblob_ªad
)(
	msqlôe3_blob
*,*,,);

179 (*
	mblob_wrôe
)(
	msqlôe3_blob
*,const *,,);

180 (*
	m¸óã_cﬁœti⁄_v2
)(
	msqlôe3
*,const *,,*,

183 (*
	mfûe_c⁄åﬁ
)(
	msqlôe3
*,const *,,*);

184 
sqlôe3_öt64
 (*
mem‹y_highw©î
)();

185 
sqlôe3_öt64
 (*
mem‹y_u£d
)();

186 
	msqlôe3_muãx
 *(*
	mmuãx_Æloc
)();

187 (*
	mmuãx_íãr
)(
	msqlôe3_muãx
*);

188 (*
	mmuãx_‰ì
)(
	msqlôe3_muãx
*);

189 (*
	mmuãx_Àave
)(
	msqlôe3_muãx
*);

190 (*
	mmuãx_åy
)(
	msqlôe3_muãx
*);

191 (*
	m›í_v2
)(c⁄° *,
	msqlôe3
**,,const *);

192 (*
	mªÀa£_mem‹y
)();

193 (*
	mªsu…_îr‹_nomem
)(
	msqlôe3_c⁄ãxt
*);

194 (*
	mªsu…_îr‹_toobig
)(
	msqlôe3_c⁄ãxt
*);

195 (*
	m¶ìp
)();

196 (*
	mso·_hóp_limô
)();

197 
	msqlôe3_vfs
 *(*
	mvfs_föd
)(const *);

198 (*
	mvfs_ªgi°î
)(
	msqlôe3_vfs
*,);

199 (*
	mvfs_uƒegi°î
)(
	msqlôe3_vfs
*);

200 (*
	mxthªadß„
)();

201 (*
	mªsu…_zîoblob
)(
	msqlôe3_c⁄ãxt
*,);

202 (*
	mªsu…_îr‹_code
)(
	msqlôe3_c⁄ãxt
*,);

203 (*
	mã°_c⁄åﬁ
)(, ...);

204 (*
	møndom√ss
)(,*);

205 
	msqlôe3
 *(*
	mc⁄ãxt_db_h™dÀ
)(
	msqlôe3_c⁄ãxt
*);

206 (*
	mexãnded_ªsu…_codes
)(
	msqlôe3
*,);

207 (*
	mlimô
)(
	msqlôe3
*,,);

208 
	msqlôe3_°mt
 *(*
	m√xt_°mt
)(
	msqlôe3
*,sqlite3_stmt*);

209 c⁄° *(*
	msql
)(
	msqlôe3_°mt
*);

210 (*
	m°©us
)(,*,*,);

211 (*
	mbackup_föish
)(
	msqlôe3_backup
*);

212 
	msqlôe3_backup
 *(*
	mbackup_öô
)(
	msqlôe3
*,const *,sqlite3*,const *);

213 (*
	mbackup_∑gecou¡
)(
	msqlôe3_backup
*);

214 (*
	mbackup_ªmaöög
)(
	msqlôe3_backup
*);

215 (*
	mbackup_°ï
)(
	msqlôe3_backup
*,);

216 c⁄° *(*
	mcompûe›ti⁄_gë
)();

217 (*
	mcompûe›ti⁄_u£d
)(const *);

218 (*
	m¸óã_fun˘i⁄_v2
)(
	msqlôe3
*,const *,,,*,

219 (*
	mxFunc
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

220 (*
	mxSãp
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

221 (*
	mxFöÆ
)(
	msqlôe3_c⁄ãxt
*),

222 (*
	mxDe°roy
)(*));

223 (*
	mdb_c⁄fig
)(
	msqlôe3
*,,...);

224 
	msqlôe3_muãx
 *(*
	mdb_muãx
)(
	msqlôe3
*);

225 (*
	mdb_°©us
)(
	msqlôe3
*,,*,*,);

226 (*
	mexãnded_îrcode
)(
	msqlôe3
*);

227 (*
	mlog
)(,const *,...);

228 
sqlôe3_öt64
 (*
so·_hóp_limô64
)(
	msqlôe3_öt64
);

229 c⁄° *(*
	msour˚id
)();

230 (*
	m°mt_°©us
)(
	msqlôe3_°mt
*,,);

231 (*
	m°∫icmp
)(const *,const *,);

232 (*
	mu∆ock_nŸify
)(
	msqlôe3
*,(*)(**,),*);

233 (*
	mwÆ_autocheckpoöt
)(
	msqlôe3
*,);

234 (*
	mwÆ_checkpoöt
)(
	msqlôe3
*,const *);

235 *(*
	mwÆ_hook
)(
	msqlôe3
*,(*)(*,sqlite3*,const *,),*);

236 (*
	mblob_ª›í
)(
	msqlôe3_blob
*,
	msqlôe3_öt64
);

237 (*
	mvèb_c⁄fig
)(
	msqlôe3
*,
	m›
,...);

238 (*
	mvèb_⁄_c⁄Êi˘
)(
	msqlôe3
*);

252 #i‚de‡
SQLITE_CORE


253 
	#sqlôe3_aggªg©e_c⁄ãxt
 
sqlôe3_≠i
->
aggªg©e_c⁄ãxt


	)

254 #i‚de‡
SQLITE_OMIT_DEPRECATED


255 
	#sqlôe3_aggªg©e_cou¡
 
sqlôe3_≠i
->
aggªg©e_cou¡


	)

257 
	#sqlôe3_böd_blob
 
sqlôe3_≠i
->
böd_blob


	)

258 
	#sqlôe3_böd_doubÀ
 
sqlôe3_≠i
->
böd_doubÀ


	)

259 
	#sqlôe3_böd_öt
 
sqlôe3_≠i
->
böd_öt


	)

260 
	#sqlôe3_böd_öt64
 
sqlôe3_≠i
->
böd_öt64


	)

261 
	#sqlôe3_böd_nuŒ
 
sqlôe3_≠i
->
böd_nuŒ


	)

262 
	#sqlôe3_böd_∑ømëî_cou¡
 
sqlôe3_≠i
->
böd_∑ømëî_cou¡


	)

263 
	#sqlôe3_böd_∑ømëî_ödex
 
sqlôe3_≠i
->
böd_∑ømëî_ödex


	)

264 
	#sqlôe3_böd_∑ømëî_«me
 
sqlôe3_≠i
->
böd_∑ømëî_«me


	)

265 
	#sqlôe3_böd_ãxt
 
sqlôe3_≠i
->
böd_ãxt


	)

266 
	#sqlôe3_böd_ãxt16
 
sqlôe3_≠i
->
böd_ãxt16


	)

267 
	#sqlôe3_böd_vÆue
 
sqlôe3_≠i
->
böd_vÆue


	)

268 
	#sqlôe3_busy_h™dÀr
 
sqlôe3_≠i
->
busy_h™dÀr


	)

269 
	#sqlôe3_busy_timeout
 
sqlôe3_≠i
->
busy_timeout


	)

270 
	#sqlôe3_ch™ges
 
sqlôe3_≠i
->
ch™ges


	)

271 
	#sqlôe3_˛o£
 
sqlôe3_≠i
->
˛o£


	)

272 
	#sqlôe3_cﬁœti⁄_√eded
 
sqlôe3_≠i
->
cﬁœti⁄_√eded


	)

273 
	#sqlôe3_cﬁœti⁄_√eded16
 
sqlôe3_≠i
->
cﬁœti⁄_√eded16


	)

274 
	#sqlôe3_cﬁumn_blob
 
sqlôe3_≠i
->
cﬁumn_blob


	)

275 
	#sqlôe3_cﬁumn_byãs
 
sqlôe3_≠i
->
cﬁumn_byãs


	)

276 
	#sqlôe3_cﬁumn_byãs16
 
sqlôe3_≠i
->
cﬁumn_byãs16


	)

277 
	#sqlôe3_cﬁumn_cou¡
 
sqlôe3_≠i
->
cﬁumn_cou¡


	)

278 
	#sqlôe3_cﬁumn_d©aba£_«me
 
sqlôe3_≠i
->
cﬁumn_d©aba£_«me


	)

279 
	#sqlôe3_cﬁumn_d©aba£_«me16
 
sqlôe3_≠i
->
cﬁumn_d©aba£_«me16


	)

280 
	#sqlôe3_cﬁumn_de˛ty≥
 
sqlôe3_≠i
->
cﬁumn_de˛ty≥


	)

281 
	#sqlôe3_cﬁumn_de˛ty≥16
 
sqlôe3_≠i
->
cﬁumn_de˛ty≥16


	)

282 
	#sqlôe3_cﬁumn_doubÀ
 
sqlôe3_≠i
->
cﬁumn_doubÀ


	)

283 
	#sqlôe3_cﬁumn_öt
 
sqlôe3_≠i
->
cﬁumn_öt


	)

284 
	#sqlôe3_cﬁumn_öt64
 
sqlôe3_≠i
->
cﬁumn_öt64


	)

285 
	#sqlôe3_cﬁumn_«me
 
sqlôe3_≠i
->
cﬁumn_«me


	)

286 
	#sqlôe3_cﬁumn_«me16
 
sqlôe3_≠i
->
cﬁumn_«me16


	)

287 
	#sqlôe3_cﬁumn_‹igö_«me
 
sqlôe3_≠i
->
cﬁumn_‹igö_«me


	)

288 
	#sqlôe3_cﬁumn_‹igö_«me16
 
sqlôe3_≠i
->
cﬁumn_‹igö_«me16


	)

289 
	#sqlôe3_cﬁumn_èbÀ_«me
 
sqlôe3_≠i
->
cﬁumn_èbÀ_«me


	)

290 
	#sqlôe3_cﬁumn_èbÀ_«me16
 
sqlôe3_≠i
->
cﬁumn_èbÀ_«me16


	)

291 
	#sqlôe3_cﬁumn_ãxt
 
sqlôe3_≠i
->
cﬁumn_ãxt


	)

292 
	#sqlôe3_cﬁumn_ãxt16
 
sqlôe3_≠i
->
cﬁumn_ãxt16


	)

293 
	#sqlôe3_cﬁumn_ty≥
 
sqlôe3_≠i
->
cﬁumn_ty≥


	)

294 
	#sqlôe3_cﬁumn_vÆue
 
sqlôe3_≠i
->
cﬁumn_vÆue


	)

295 
	#sqlôe3_commô_hook
 
sqlôe3_≠i
->
commô_hook


	)

296 
	#sqlôe3_com∂ëe
 
sqlôe3_≠i
->
com∂ëe


	)

297 
	#sqlôe3_com∂ëe16
 
sqlôe3_≠i
->
com∂ëe16


	)

298 
	#sqlôe3_¸óã_cﬁœti⁄
 
sqlôe3_≠i
->
¸óã_cﬁœti⁄


	)

299 
	#sqlôe3_¸óã_cﬁœti⁄16
 
sqlôe3_≠i
->
¸óã_cﬁœti⁄16


	)

300 
	#sqlôe3_¸óã_fun˘i⁄
 
sqlôe3_≠i
->
¸óã_fun˘i⁄


	)

301 
	#sqlôe3_¸óã_fun˘i⁄16
 
sqlôe3_≠i
->
¸óã_fun˘i⁄16


	)

302 
	#sqlôe3_¸óã_moduÀ
 
sqlôe3_≠i
->
¸óã_moduÀ


	)

303 
	#sqlôe3_¸óã_moduÀ_v2
 
sqlôe3_≠i
->
¸óã_moduÀ_v2


	)

304 
	#sqlôe3_d©a_cou¡
 
sqlôe3_≠i
->
d©a_cou¡


	)

305 
	#sqlôe3_db_h™dÀ
 
sqlôe3_≠i
->
db_h™dÀ


	)

306 
	#sqlôe3_de˛¨e_vèb
 
sqlôe3_≠i
->
de˛¨e_vèb


	)

307 
	#sqlôe3_íabÀ_sh¨ed_ˇche
 
sqlôe3_≠i
->
íabÀ_sh¨ed_ˇche


	)

308 
	#sqlôe3_îrcode
 
sqlôe3_≠i
->
îrcode


	)

309 
	#sqlôe3_îrmsg
 
sqlôe3_≠i
->
îrmsg


	)

310 
	#sqlôe3_îrmsg16
 
sqlôe3_≠i
->
îrmsg16


	)

311 
	#sqlôe3_exec
 
sqlôe3_≠i
->
exec


	)

312 #i‚de‡
SQLITE_OMIT_DEPRECATED


313 
	#sqlôe3_expúed
 
sqlôe3_≠i
->
expúed


	)

315 
	#sqlôe3_föÆize
 
sqlôe3_≠i
->
föÆize


	)

316 
	#sqlôe3_‰ì
 
sqlôe3_≠i
->
‰ì


	)

317 
	#sqlôe3_‰ì_èbÀ
 
sqlôe3_≠i
->
‰ì_èbÀ


	)

318 
	#sqlôe3_gë_autocommô
 
sqlôe3_≠i
->
gë_autocommô


	)

319 
	#sqlôe3_gë_auxd©a
 
sqlôe3_≠i
->
gë_auxd©a


	)

320 
	#sqlôe3_gë_èbÀ
 
sqlôe3_≠i
->
gë_èbÀ


	)

321 #i‚de‡
SQLITE_OMIT_DEPRECATED


322 
	#sqlôe3_globÆ_ªcovî
 
sqlôe3_≠i
->
globÆ_ªcovî


	)

324 
	#sqlôe3_öãºu±
 
sqlôe3_≠i
->
öãºu±x


	)

325 
	#sqlôe3_œ°_ö£π_rowid
 
sqlôe3_≠i
->
œ°_ö£π_rowid


	)

326 
	#sqlôe3_libvîsi⁄
 
sqlôe3_≠i
->
libvîsi⁄


	)

327 
	#sqlôe3_libvîsi⁄_numbî
 
sqlôe3_≠i
->
libvîsi⁄_numbî


	)

328 
	#sqlôe3_mÆloc
 
sqlôe3_≠i
->
mÆloc


	)

329 
	#sqlôe3_m¥ötf
 
sqlôe3_≠i
->
m¥ötf


	)

330 
	#sqlôe3_›í
 
sqlôe3_≠i
->
›í


	)

331 
	#sqlôe3_›í16
 
sqlôe3_≠i
->
›í16


	)

332 
	#sqlôe3_¥ï¨e
 
sqlôe3_≠i
->
¥ï¨e


	)

333 
	#sqlôe3_¥ï¨e16
 
sqlôe3_≠i
->
¥ï¨e16


	)

334 
	#sqlôe3_¥ï¨e_v2
 
sqlôe3_≠i
->
¥ï¨e_v2


	)

335 
	#sqlôe3_¥ï¨e16_v2
 
sqlôe3_≠i
->
¥ï¨e16_v2


	)

336 
	#sqlôe3_¥ofûe
 
sqlôe3_≠i
->
¥ofûe


	)

337 
	#sqlôe3_¥ogªss_h™dÀr
 
sqlôe3_≠i
->
¥ogªss_h™dÀr


	)

338 
	#sqlôe3_ªÆloc
 
sqlôe3_≠i
->
ªÆloc


	)

339 
	#sqlôe3_ª£t
 
sqlôe3_≠i
->
ª£t


	)

340 
	#sqlôe3_ªsu…_blob
 
sqlôe3_≠i
->
ªsu…_blob


	)

341 
	#sqlôe3_ªsu…_doubÀ
 
sqlôe3_≠i
->
ªsu…_doubÀ


	)

342 
	#sqlôe3_ªsu…_îr‹
 
sqlôe3_≠i
->
ªsu…_îr‹


	)

343 
	#sqlôe3_ªsu…_îr‹16
 
sqlôe3_≠i
->
ªsu…_îr‹16


	)

344 
	#sqlôe3_ªsu…_öt
 
sqlôe3_≠i
->
ªsu…_öt


	)

345 
	#sqlôe3_ªsu…_öt64
 
sqlôe3_≠i
->
ªsu…_öt64


	)

346 
	#sqlôe3_ªsu…_nuŒ
 
sqlôe3_≠i
->
ªsu…_nuŒ


	)

347 
	#sqlôe3_ªsu…_ãxt
 
sqlôe3_≠i
->
ªsu…_ãxt


	)

348 
	#sqlôe3_ªsu…_ãxt16
 
sqlôe3_≠i
->
ªsu…_ãxt16


	)

349 
	#sqlôe3_ªsu…_ãxt16be
 
sqlôe3_≠i
->
ªsu…_ãxt16be


	)

350 
	#sqlôe3_ªsu…_ãxt16À
 
sqlôe3_≠i
->
ªsu…_ãxt16À


	)

351 
	#sqlôe3_ªsu…_vÆue
 
sqlôe3_≠i
->
ªsu…_vÆue


	)

352 
	#sqlôe3_rﬁlback_hook
 
sqlôe3_≠i
->
rﬁlback_hook


	)

353 
	#sqlôe3_£t_auth‹izî
 
sqlôe3_≠i
->
£t_auth‹izî


	)

354 
	#sqlôe3_£t_auxd©a
 
sqlôe3_≠i
->
£t_auxd©a


	)

355 
	#sqlôe3_¢¥ötf
 
sqlôe3_≠i
->
¢¥ötf


	)

356 
	#sqlôe3_°ï
 
sqlôe3_≠i
->
°ï


	)

357 
	#sqlôe3_èbÀ_cﬁumn_mëad©a
 
sqlôe3_≠i
->
èbÀ_cﬁumn_mëad©a


	)

358 
	#sqlôe3_thªad_˛ónup
 
sqlôe3_≠i
->
thªad_˛ónup


	)

359 
	#sqlôe3_tŸÆ_ch™ges
 
sqlôe3_≠i
->
tŸÆ_ch™ges


	)

360 
	#sqlôe3_åa˚
 
sqlôe3_≠i
->
åa˚


	)

361 #i‚de‡
SQLITE_OMIT_DEPRECATED


362 
	#sqlôe3_å™s„r_bödögs
 
sqlôe3_≠i
->
å™s„r_bödögs


	)

364 
	#sqlôe3_upd©e_hook
 
sqlôe3_≠i
->
upd©e_hook


	)

365 
	#sqlôe3_u£r_d©a
 
sqlôe3_≠i
->
u£r_d©a


	)

366 
	#sqlôe3_vÆue_blob
 
sqlôe3_≠i
->
vÆue_blob


	)

367 
	#sqlôe3_vÆue_byãs
 
sqlôe3_≠i
->
vÆue_byãs


	)

368 
	#sqlôe3_vÆue_byãs16
 
sqlôe3_≠i
->
vÆue_byãs16


	)

369 
	#sqlôe3_vÆue_doubÀ
 
sqlôe3_≠i
->
vÆue_doubÀ


	)

370 
	#sqlôe3_vÆue_öt
 
sqlôe3_≠i
->
vÆue_öt


	)

371 
	#sqlôe3_vÆue_öt64
 
sqlôe3_≠i
->
vÆue_öt64


	)

372 
	#sqlôe3_vÆue_numîic_ty≥
 
sqlôe3_≠i
->
vÆue_numîic_ty≥


	)

373 
	#sqlôe3_vÆue_ãxt
 
sqlôe3_≠i
->
vÆue_ãxt


	)

374 
	#sqlôe3_vÆue_ãxt16
 
sqlôe3_≠i
->
vÆue_ãxt16


	)

375 
	#sqlôe3_vÆue_ãxt16be
 
sqlôe3_≠i
->
vÆue_ãxt16be


	)

376 
	#sqlôe3_vÆue_ãxt16À
 
sqlôe3_≠i
->
vÆue_ãxt16À


	)

377 
	#sqlôe3_vÆue_ty≥
 
sqlôe3_≠i
->
vÆue_ty≥


	)

378 
	#sqlôe3_vm¥ötf
 
sqlôe3_≠i
->
vm¥ötf


	)

379 
	#sqlôe3_ovîlﬂd_fun˘i⁄
 
sqlôe3_≠i
->
ovîlﬂd_fun˘i⁄


	)

380 
	#sqlôe3_¥ï¨e_v2
 
sqlôe3_≠i
->
¥ï¨e_v2


	)

381 
	#sqlôe3_¥ï¨e16_v2
 
sqlôe3_≠i
->
¥ï¨e16_v2


	)

382 
	#sqlôe3_˛ór_bödögs
 
sqlôe3_≠i
->
˛ór_bödögs


	)

383 
	#sqlôe3_böd_zîoblob
 
sqlôe3_≠i
->
böd_zîoblob


	)

384 
	#sqlôe3_blob_byãs
 
sqlôe3_≠i
->
blob_byãs


	)

385 
	#sqlôe3_blob_˛o£
 
sqlôe3_≠i
->
blob_˛o£


	)

386 
	#sqlôe3_blob_›í
 
sqlôe3_≠i
->
blob_›í


	)

387 
	#sqlôe3_blob_ªad
 
sqlôe3_≠i
->
blob_ªad


	)

388 
	#sqlôe3_blob_wrôe
 
sqlôe3_≠i
->
blob_wrôe


	)

389 
	#sqlôe3_¸óã_cﬁœti⁄_v2
 
sqlôe3_≠i
->
¸óã_cﬁœti⁄_v2


	)

390 
	#sqlôe3_fûe_c⁄åﬁ
 
sqlôe3_≠i
->
fûe_c⁄åﬁ


	)

391 
	#sqlôe3_mem‹y_highw©î
 
sqlôe3_≠i
->
mem‹y_highw©î


	)

392 
	#sqlôe3_mem‹y_u£d
 
sqlôe3_≠i
->
mem‹y_u£d


	)

393 
	#sqlôe3_muãx_Æloc
 
sqlôe3_≠i
->
muãx_Æloc


	)

394 
	#sqlôe3_muãx_íãr
 
sqlôe3_≠i
->
muãx_íãr


	)

395 
	#sqlôe3_muãx_‰ì
 
sqlôe3_≠i
->
muãx_‰ì


	)

396 
	#sqlôe3_muãx_Àave
 
sqlôe3_≠i
->
muãx_Àave


	)

397 
	#sqlôe3_muãx_åy
 
sqlôe3_≠i
->
muãx_åy


	)

398 
	#sqlôe3_›í_v2
 
sqlôe3_≠i
->
›í_v2


	)

399 
	#sqlôe3_ªÀa£_mem‹y
 
sqlôe3_≠i
->
ªÀa£_mem‹y


	)

400 
	#sqlôe3_ªsu…_îr‹_nomem
 
sqlôe3_≠i
->
ªsu…_îr‹_nomem


	)

401 
	#sqlôe3_ªsu…_îr‹_toobig
 
sqlôe3_≠i
->
ªsu…_îr‹_toobig


	)

402 
	#sqlôe3_¶ìp
 
sqlôe3_≠i
->
¶ìp


	)

403 
	#sqlôe3_so·_hóp_limô
 
sqlôe3_≠i
->
so·_hóp_limô


	)

404 
	#sqlôe3_vfs_föd
 
sqlôe3_≠i
->
vfs_föd


	)

405 
	#sqlôe3_vfs_ªgi°î
 
sqlôe3_≠i
->
vfs_ªgi°î


	)

406 
	#sqlôe3_vfs_uƒegi°î
 
sqlôe3_≠i
->
vfs_uƒegi°î


	)

407 
	#sqlôe3_thªadß„
 
sqlôe3_≠i
->
xthªadß„


	)

408 
	#sqlôe3_ªsu…_zîoblob
 
sqlôe3_≠i
->
ªsu…_zîoblob


	)

409 
	#sqlôe3_ªsu…_îr‹_code
 
sqlôe3_≠i
->
ªsu…_îr‹_code


	)

410 
	#sqlôe3_ã°_c⁄åﬁ
 
sqlôe3_≠i
->
ã°_c⁄åﬁ


	)

411 
	#sqlôe3_øndom√ss
 
sqlôe3_≠i
->
øndom√ss


	)

412 
	#sqlôe3_c⁄ãxt_db_h™dÀ
 
sqlôe3_≠i
->
c⁄ãxt_db_h™dÀ


	)

413 
	#sqlôe3_exãnded_ªsu…_codes
 
sqlôe3_≠i
->
exãnded_ªsu…_codes


	)

414 
	#sqlôe3_limô
 
sqlôe3_≠i
->
limô


	)

415 
	#sqlôe3_√xt_°mt
 
sqlôe3_≠i
->
√xt_°mt


	)

416 
	#sqlôe3_sql
 
sqlôe3_≠i
->
sql


	)

417 
	#sqlôe3_°©us
 
sqlôe3_≠i
->
°©us


	)

418 
	#sqlôe3_backup_föish
 
sqlôe3_≠i
->
backup_föish


	)

419 
	#sqlôe3_backup_öô
 
sqlôe3_≠i
->
backup_öô


	)

420 
	#sqlôe3_backup_∑gecou¡
 
sqlôe3_≠i
->
backup_∑gecou¡


	)

421 
	#sqlôe3_backup_ªmaöög
 
sqlôe3_≠i
->
backup_ªmaöög


	)

422 
	#sqlôe3_backup_°ï
 
sqlôe3_≠i
->
backup_°ï


	)

423 
	#sqlôe3_compûe›ti⁄_gë
 
sqlôe3_≠i
->
compûe›ti⁄_gë


	)

424 
	#sqlôe3_compûe›ti⁄_u£d
 
sqlôe3_≠i
->
compûe›ti⁄_u£d


	)

425 
	#sqlôe3_¸óã_fun˘i⁄_v2
 
sqlôe3_≠i
->
¸óã_fun˘i⁄_v2


	)

426 
	#sqlôe3_db_c⁄fig
 
sqlôe3_≠i
->
db_c⁄fig


	)

427 
	#sqlôe3_db_muãx
 
sqlôe3_≠i
->
db_muãx


	)

428 
	#sqlôe3_db_°©us
 
sqlôe3_≠i
->
db_°©us


	)

429 
	#sqlôe3_exãnded_îrcode
 
sqlôe3_≠i
->
exãnded_îrcode


	)

430 
	#sqlôe3_log
 
sqlôe3_≠i
->
log


	)

431 
	#sqlôe3_so·_hóp_limô64
 
sqlôe3_≠i
->
so·_hóp_limô64


	)

432 
	#sqlôe3_sour˚id
 
sqlôe3_≠i
->
sour˚id


	)

433 
	#sqlôe3_°mt_°©us
 
sqlôe3_≠i
->
°mt_°©us


	)

434 
	#sqlôe3_°∫icmp
 
sqlôe3_≠i
->
°∫icmp


	)

435 
	#sqlôe3_u∆ock_nŸify
 
sqlôe3_≠i
->
u∆ock_nŸify


	)

436 
	#sqlôe3_wÆ_autocheckpoöt
 
sqlôe3_≠i
->
wÆ_autocheckpoöt


	)

437 
	#sqlôe3_wÆ_checkpoöt
 
sqlôe3_≠i
->
wÆ_checkpoöt


	)

438 
	#sqlôe3_wÆ_hook
 
sqlôe3_≠i
->
wÆ_hook


	)

439 
	#sqlôe3_blob_ª›í
 
sqlôe3_≠i
->
blob_ª›í


	)

440 
	#sqlôe3_vèb_c⁄fig
 
sqlôe3_≠i
->
vèb_c⁄fig


	)

441 
	#sqlôe3_vèb_⁄_c⁄Êi˘
 
sqlôe3_≠i
->
vèb_⁄_c⁄Êi˘


	)

444 
	#SQLITE_EXTENSION_INIT1
 c⁄° 
sqlôe3_≠i_routöes
 *
sqlôe3_≠i
 = 0;

	)

445 
	#SQLITE_EXTENSION_INIT2
(
v
Ë
sqlôe3_≠i
 = v;

	)

	@/usr/include/stab.h

1 #i‚de‡
__GNU_STAB__


5 
	#__GNU_STAB__


	)

7 
	#__deföe_°ab
(
NAME
, 
CODE
, 
STRING
ËNAME=CODE,

	)

9 
	e__°ab_debug_code


11 
	~<bôs/°ab.def
>

12 
	mLAST_UNUSED_STAB_CODE


15 #unde‡
__deföe_°ab


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdio_ext.h

23 #i‚de‡
_STDIO_EXT_H


24 
	#_STDIO_EXT_H
 1

	)

26 
	~<°dio.h
>

31 
	mFSETLOCKING_QUERY
 = 0,

32 
	#FSETLOCKING_QUERY
 
FSETLOCKING_QUERY


	)

35 
	mFSETLOCKING_INTERNAL
,

36 
	#FSETLOCKING_INTERNAL
 
FSETLOCKING_INTERNAL


	)

38 
	mFSETLOCKING_BYCALLER


39 
	#FSETLOCKING_BYCALLER
 
FSETLOCKING_BYCALLER


	)

43 
__BEGIN_DECLS


47 
size_t
 
	$__fbufsize
 (
FILE
 *
__Â
Ë
__THROW
;

52 
	$__‰ódög
 (
FILE
 *
__Â
Ë
__THROW
;

57 
	$__fwrôög
 (
FILE
 *
__Â
Ë
__THROW
;

62 
	$__‰ódabÀ
 (
FILE
 *
__Â
Ë
__THROW
;

65 
	$__fwrôabÀ
 (
FILE
 *
__Â
Ë
__THROW
;

69 
	$__Êbf
 (
FILE
 *
__Â
Ë
__THROW
;

73 
	$__Âurge
 (
FILE
 *
__Â
Ë
__THROW
;

76 
size_t
 
	$__Âídög
 (
FILE
 *
__Â
Ë
__THROW
;

79 
	`_Êushlbf
 ();

83 
	$__f£éockög
 (
FILE
 *
__Â
, 
__ty≥
Ë
__THROW
;

85 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/stropts.h

19 #i‚de‡
_STROPTS_H


20 
	#_STROPTS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/xtôy≥s.h
>

26 #i‚de‡
__gid_t_deföed


27 
__gid_t
 
	tgid_t
;

28 
	#__gid_t_deföed


	)

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 
__t_usˇœr_t
 
	tt_usˇœr_t
;

39 
	~<bôs/°r›ts.h
>

42 
__BEGIN_DECLS


45 
	$iß°ªam
 (
__fûdes
Ë
__THROW
;

51 
	`gëmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

52 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

53 *
__ª°ri˘
 
__Êag•
);

60 
	`gëpmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

61 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

62 *
__ª°ri˘
 
__b™dp
, *__ª°ri˘ 
__Êag•
);

67 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

73 
	`putmsg
 (
__fûdes
, 
__c⁄°
 
°rbuf
 *
__˘Õå
,

74 
__c⁄°
 
°rbuf
 *
__d©≠å
, 
__Êags
);

80 
	`puçmsg
 (
__fûdes
, 
__c⁄°
 
°rbuf
 *
__˘Õå
,

81 
__c⁄°
 
°rbuf
 *
__d©≠å
, 
__b™d
, 
__Êags
);

85 
	$Áâach
 (
__fûdes
, 
__c⁄°
 *
__∑th
Ë
__THROW
;

88 
	$fdëach
 (
__c⁄°
 *
__∑th
Ë
__THROW
;

90 
__END_DECLS


	@/usr/include/sudo_plugin.h

17 #i‚de‡
_SUDO_PLUGIN_H


18 
	#_SUDO_PLUGIN_H


	)

21 
	#SUDO_API_VERSION_MAJOR
 1

	)

22 
	#SUDO_API_VERSION_MINOR
 1

	)

23 
	#SUDO_API_MKVERSION
(
x
, 
y
Ë((x << 16Ë| y)

	)

24 
	#SUDO_API_VERSION
 
	`SUDO_API_MKVERSION
(
SUDO_API_VERSION_MAJOR
, 
SUDO_API_VERSION_MINOR
)

	)

27 
	#SUDO_API_VERSION_GET_MAJOR
(
v
Ë((vË>> 16)

	)

28 
	#SUDO_API_VERSION_GET_MINOR
(
v
Ë((vË& 0xffff)

	)

29 
	#SUDO_API_VERSION_SET_MAJOR
(
vp
, 
n
) do { \

30 *(
vp
Ë(*(vpË& 0x0000ffffË| ((
n
) << 16); \

31 } 0)

	)

32 
	#SUDO_VERSION_SET_MINOR
(
vp
, 
n
) do { \

33 *(
vp
Ë(*(vpË& 0xffff0000Ë| (
n
); \

34 } 0)

	)

37 
	ssudo_c⁄v_mesßge
 {

38 
	#SUDO_CONV_PROMPT_ECHO_OFF
 0x0001

	)

39 
	#SUDO_CONV_PROMPT_ECHO_ON
 0x0002

	)

40 
	#SUDO_CONV_ERROR_MSG
 0x0003

	)

41 
	#SUDO_CONV_INFO_MSG
 0x0004

	)

42 
	#SUDO_CONV_PROMPT_MASK
 0x0005

	)

43 
	#SUDO_CONV_PROMPT_ECHO_OK
 0x1000

	)

44 
	mmsg_ty≥
;

45 
	mtimeout
;

46 c⁄° *
	mmsg
;

49 
	ssudo_c⁄v_ª∂y
 {

50 *
	mª∂y
;

53 (*
	tsudo_c⁄v_t
)(
	tnum_msgs
, c⁄° 
	tsudo_c⁄v_mesßge
 
	tmsgs
[],

54 
	tsudo_c⁄v_ª∂y
 
	tª∂õs
[]);

55 (*
	tsudo_¥ötf_t
)(
	tmsg_ty≥
, c⁄° *
	tfmt
, ...);

58 
∑sswd
;

59 
	spﬁicy_∂ugö
 {

60 
	#SUDO_POLICY_PLUGIN
 1

	)

61 
ty≥
;

62 
vîsi⁄
;

63 (*
›í
)(
vîsi⁄
, 
sudo_c⁄v_t
 
c⁄vîßti⁄
,

64 
sudo_¥ötf_t
 
sudo_¥ötf
, * c⁄° 
£âögs
[],

65 * c⁄° 
u£r_öfo
[], * c⁄° 
u£r_ív
[]);

66 (*
˛o£
)(
exô_°©us
, 
îr‹
);

67 (*
show_vîsi⁄
)(
vîbo£
);

68 (*
check_pﬁicy
)(
¨gc
, * c⁄° 
¨gv
[],

69 *
ív_add
[], **
comm™d_öfo
[],

70 **
¨gv_out
[], **
u£r_ív_out
[]);

71 (*
li°
)(
¨gc
, * c⁄° 
¨gv
[], 
vîbo£
,

72 c⁄° *
li°_u£r
);

73 (*
vÆid©e
)();

74 (*
övÆid©e
)(
ªmove
);

75 (*
öô_£ssi⁄
)(
∑sswd
 *
pwd
);

79 
	sio_∂ugö
 {

80 
	#SUDO_IO_PLUGIN
 2

	)

81 
ty≥
;

82 
vîsi⁄
;

83 (*
›í
)(
vîsi⁄
, 
sudo_c⁄v_t
 
c⁄vîßti⁄
,

84 
sudo_¥ötf_t
 
sudo_¥ötf
, * c⁄° 
£âögs
[],

85 * c⁄° 
u£r_öfo
[], * c⁄° 
comm™d_öfo
[],

86 
¨gc
, * c⁄° 
¨gv
[], * c⁄° 
u£r_ív
[]);

87 (*
˛o£
)(
exô_°©us
, 
îr‹
);

88 (*
show_vîsi⁄
)(
vîbo£
);

89 (*
log_âyö
)(c⁄° *
buf
, 
Àn
);

90 (*
log_âyout
)(c⁄° *
buf
, 
Àn
);

91 (*
log_°dö
)(c⁄° *
buf
, 
Àn
);

92 (*
log_°dout
)(c⁄° *
buf
, 
Àn
);

93 (*
log_°dîr
)(c⁄° *
buf
, 
Àn
);

97 
	#GROUP_API_VERSION_MAJOR
 1

	)

98 
	#GROUP_API_VERSION_MINOR
 0

	)

99 
	#GROUP_API_VERSION
 ((
GROUP_API_VERSION_MAJOR
 << 16Ë| 
GROUP_API_VERSION_MINOR
)

	)

102 
	#GROUP_API_VERSION_GET_MAJOR
(
v
Ë((vË>> 16)

	)

103 
	#GROUP_API_VERSION_GET_MINOR
(
v
Ë((vË& 0xffff)

	)

104 
	#GROUP_API_VERSION_SET_MAJOR
(
vp
, 
n
) do { \

105 *(
vp
Ë(*(vpË& 0x0000ffffË| ((
n
) << 16); \

106 
	}
} 0)

	)

107 
	#GROUP_API_VERSION_SET_MINOR
(
vp
, 
n
) do { \

108 *(
vp
Ë(*(vpË& 0xffff0000Ë| (
n
); \

109 } 0)

	)

118 
	ssud€rs_group_∂ugö
 {

119 
	mvîsi⁄
;

120 (*
	möô
)(
	mvîsi⁄
, 
sudo_¥ötf_t
 
	msudo_¥ötf
, *c⁄° 
	m¨gv
[]);

121 (*
	m˛ónup
)();

122 (*
	mquîy
)(c⁄° *
	mu£r
, c⁄° *
	mgroup
, c⁄° 
∑sswd
 *
	mpwd
);

	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/sysexits.h

32 #i‚def 
_SYSEXITS_H


33 
	#_SYSEXITS_H
 1

	)

92 
	#EX_OK
 0

	)

94 
	#EX__BASE
 64

	)

96 
	#EX_USAGE
 64

	)

97 
	#EX_DATAERR
 65

	)

98 
	#EX_NOINPUT
 66

	)

99 
	#EX_NOUSER
 67

	)

100 
	#EX_NOHOST
 68

	)

101 
	#EX_UNAVAILABLE
 69

	)

102 
	#EX_SOFTWARE
 70

	)

103 
	#EX_OSERR
 71

	)

104 
	#EX_OSFILE
 72

	)

105 
	#EX_CANTCREAT
 73

	)

106 
	#EX_IOERR
 74

	)

107 
	#EX_TEMPFAIL
 75

	)

108 
	#EX_PROTOCOL
 76

	)

109 
	#EX_NOPERM
 77

	)

110 
	#EX_CONFIG
 78

	)

112 
	#EX__MAX
 78

	)

	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/tags

1 !
	g_TAG_FILE_FORMAT
 2 /
exãnded
 
	gf‹m©
; --f‹m©=1 
wûl
 
nŸ
 
≠≥nd
 ;"ÅoÜines/

2 !
	g_TAG_FILE_SORTED
 1 /0=
uns‹ãd
, 1=
s‹ãd
, 2=
fﬁdˇ£
/

3 !
_TAG_PROGRAM_AUTHOR
 
D¨ªn
 
Hõbît
 /
dhõbît
@
u£rs
.
sour˚f‹ge
.
√t
/

4 !
_TAG_PROGRAM_NAME
 
Exubî™t
 
Cègs


5 !
_TAG_PROGRAM_URL
 
hâp
:

6 !
_TAG_PROGRAM_VERSION
 5.9~
svn20110310


7 
A
 
›ís¶
/
md4
.
h
 /^ 
MD4_LONG
 A,
	gB
,
	gC
,
	gD
;
	g$
/;" m struct:MD4state_st

8 
A
 
	g›ís¶
/
	gmd5
.
	gh
 /^ 
MD5_LONG
 
	gA
,
	gB
,
	gC
,
	gD
;
	g$
/;" m struct:MD5state_st

9 
A
 
	g›ís¶
/
	grùemd
.
	gh
 /^ 
RIPEMD160_LONG
 
	gA
,
	gB
,
	gC
,
	gD
,
	gE
;
	g$
/;" m struct:RIPEMD160state_st

10 
A
 
	g›ís¶
/
	gs¶
.
	gh
 /^ 
BIGNUM
 *
	gN
,*
	gg
,*
	gs
,*
	gB
,*
	gA
;
	g$
/;" m struct:srp_ctx_st

11 
A1
 
	glöux
/
	gixju£r
.
	gh
 /^ 
	gA1
 = 
hz440
,
	g$
/;"ÉÉnum:__anon1687

12 
A2
 
	glöux
/
	gixju£r
.
	gh
 /^ 
	gA2
 = 
hz880
,
	g$
/;"ÉÉnum:__anon1687

13 
A3_EMU32IN
 
	gsound
/
	gemu10k1
.
	gh
 111;" d

14 
A3_EMU32OUT
 
	gsound
/
	gemu10k1
.
	gh
 112;" d

15 
ABDAY_1
 
	gœngöfo
.
	gh
 /^ 
	gABDAY_1
 = 
_NL_ITEM
 (
__LC_TIME
, 0), \

	@/usr/include/tar.h

21 #i‚def 
_TAR_H


22 
	#_TAR_H
 1

	)

72 
	#TSUID
 04000

	)

73 
	#TSGID
 02000

	)

74 
	#TSVTX
 01000

	)

75 
	#TUREAD
 00400

	)

76 
	#TUWRITE
 00200

	)

77 
	#TUEXEC
 00100

	)

78 
	#TGREAD
 00040

	)

79 
	#TGWRITE
 00020

	)

80 
	#TGEXEC
 00010

	)

81 
	#TOREAD
 00004

	)

82 
	#TOWRITE
 00002

	)

83 
	#TOEXEC
 00001

	)

89 
	#REGTYPE
 '0'

	)

90 
	#AREGTYPE
 '\0'

	)

91 
	#LNKTYPE
 '1'

	)

92 
	#SYMTYPE
 '2'

	)

93 
	#CHRTYPE
 '3'

	)

94 
	#BLKTYPE
 '4'

	)

95 
	#DIRTYPE
 '5'

	)

96 
	#FIFOTYPE
 '6'

	)

97 
	#CONTTYPE
 '7'

	)

101 
	#TMAGIC
 "u°¨"

	)

102 
	#TMAGLEN
 6

	)

105 
	#TVERSION
 "00"

	)

106 
	#TVERSLEN
 2

	)

	@/usr/include/term.h

41 #i‚de‡
NCURSES_TERM_H_ö˛


42 
	#NCURSES_TERM_H_ö˛
 1

	)

44 #unde‡
NCURSES_VERSION


45 
	#NCURSES_VERSION
 "5.9"

	)

47 
	~<ncur£s_dŒ.h
>

49 #ifde‡
__˝lu•lus


57 #unde‡
NCURSES_CONST


58 
	#NCURSES_CONST
 c⁄°

	)

60 #unde‡
NCURSES_SBOOL


61 
	#NCURSES_SBOOL
 

	)

63 #unde‡
NCURSES_XNAMES


64 
	#NCURSES_XNAMES
 1

	)

69 #unde‡
TTY


70 #unde‡
SET_TTY


71 #unde‡
GET_TTY


77 #unde‡
TERMIOS


78 
	#TERMIOS
 1

	)

80 
	~<ãrmios.h
>

81 
	#TTY
 
ãrmios


	)

88 #unde‡
TERMIOS


89 
	#TERMIOS
 1

	)

91 
	~<ãrmio.h
>

92 
	#TTY
 
ãrmio


	)

98 #i‚de‡
TCSANOW


99 
	#TCSANOW
 
TCSETA


	)

101 #i‚de‡
TCSADRAIN


102 
	#TCSADRAIN
 
TCSETAW


	)

104 #i‚de‡
TCSAFLUSH


105 
	#TCSAFLUSH
 
TCSETAF


	)

107 #i‚de‡
tc£èâr


108 
	#tc£èâr
(
fd
, 
cmd
, 
¨g
Ë
	`io˘l
(fd, cmd,árg)

	)

110 #i‚de‡
tcgë©å


111 
	#tcgë©å
(
fd
, 
¨g
Ë
	`io˘l
(fd, 
TCGETA
,árg)

	)

113 #i‚de‡
cfgëo•ìd


114 
	#cfgëo•ìd
(
t
Ë(—)->
c_cÊag
 & 
CBAUD
)

	)

116 #i‚de‡
TCIFLUSH


117 
	#TCIFLUSH
 0

	)

119 #i‚de‡
TCOFLUSH


120 
	#TCOFLUSH
 1

	)

122 #i‚de‡
TCIOFLUSH


123 
	#TCIOFLUSH
 2

	)

125 #i‚de‡
tcÊush


126 
	#tcÊush
(
fd
, 
¨g
Ë
	`io˘l
(fd, 
TCFLSH
,árg)

	)

131 #i‡
__MINGW32__


132 
	~<ncur£s_mögw.h
>

133 
	#TTY
 
ãrmios


	)

135 #unde‡
TERMIOS


136 
	~<sgây.h
>

137 
	~<sys/io˘l.h
>

138 
	#TTY
 
sgâyb


	)

144 #ifde‡
TERMIOS


145 
	#GET_TTY
(
fd
, 
buf
Ë
	`tcgë©å
(fd, buf)

	)

146 
	#SET_TTY
(
fd
, 
buf
Ë
	`tc£èâr
(fd, 
TCSADRAIN
, buf)

	)

148 
	#GET_TTY
(
fd
, 
buf
Ë
	`gây
(fd, buf)

	)

149 
	#SET_TTY
(
fd
, 
buf
Ë
	`°ty
(fd, buf)

	)

152 
	#NAMESIZE
 256

	)

154 
	#CUR
 
cur_ãrm
->
ty≥
.

	)

156 
	#auto_À·_m¨gö
 
CUR
 
Boﬁóns
[0]

	)

157 
	#auto_right_m¨gö
 
CUR
 
Boﬁóns
[1]

	)

158 
	#no_esc_˘lc
 
CUR
 
Boﬁóns
[2]

	)

159 
	#˚ﬁ_°™dout_glôch
 
CUR
 
Boﬁóns
[3]

	)

160 
	#ót_√wlöe_glôch
 
CUR
 
Boﬁóns
[4]

	)

161 
	#îa£_ovî°rike
 
CUR
 
Boﬁóns
[5]

	)

162 
	#gíîic_ty≥
 
CUR
 
Boﬁóns
[6]

	)

163 
	#h¨d_c›y
 
CUR
 
Boﬁóns
[7]

	)

164 
	#has_mëa_key
 
CUR
 
Boﬁóns
[8]

	)

165 
	#has_°©us_löe
 
CUR
 
Boﬁóns
[9]

	)

166 
	#ö£π_nuŒ_glôch
 
CUR
 
Boﬁóns
[10]

	)

167 
	#mem‹y_above
 
CUR
 
Boﬁóns
[11]

	)

168 
	#mem‹y_bñow
 
CUR
 
Boﬁóns
[12]

	)

169 
	#move_ö£π_mode
 
CUR
 
Boﬁóns
[13]

	)

170 
	#move_°™dout_mode
 
CUR
 
Boﬁóns
[14]

	)

171 
	#ovî_°rike
 
CUR
 
Boﬁóns
[15]

	)

172 
	#°©us_löe_esc_ok
 
CUR
 
Boﬁóns
[16]

	)

173 
	#de°_èbs_magic_smso
 
CUR
 
Boﬁóns
[17]

	)

174 
	#tûde_glôch
 
CUR
 
Boﬁóns
[18]

	)

175 
	#å™•¨ít_undîlöe
 
CUR
 
Boﬁóns
[19]

	)

176 
	#x⁄_xoff
 
CUR
 
Boﬁóns
[20]

	)

177 
	#√eds_x⁄_xoff
 
CUR
 
Boﬁóns
[21]

	)

178 
	#¥å_sûít
 
CUR
 
Boﬁóns
[22]

	)

179 
	#h¨d_curs‹
 
CUR
 
Boﬁóns
[23]

	)

180 
	#n⁄_ªv_rmcup
 
CUR
 
Boﬁóns
[24]

	)

181 
	#no_∑d_ch¨
 
CUR
 
Boﬁóns
[25]

	)

182 
	#n⁄_de°_s¸ﬁl_ªgi⁄
 
CUR
 
Boﬁóns
[26]

	)

183 
	#ˇn_ch™ge
 
CUR
 
Boﬁóns
[27]

	)

184 
	#back_cﬁ‹_îa£
 
CUR
 
Boﬁóns
[28]

	)

185 
	#hue_lighäess_ßtuøti⁄
 
CUR
 
Boﬁóns
[29]

	)

186 
	#cﬁ_addr_glôch
 
CUR
 
Boﬁóns
[30]

	)

187 
	#¸_ˇn˚ls_mi¸o_mode
 
CUR
 
Boﬁóns
[31]

	)

188 
	#has_¥öt_whìl
 
CUR
 
Boﬁóns
[32]

	)

189 
	#row_addr_glôch
 
CUR
 
Boﬁóns
[33]

	)

190 
	#£mi_auto_right_m¨gö
 
CUR
 
Boﬁóns
[34]

	)

191 
	#˝i_ch™ges_ªs
 
CUR
 
Boﬁóns
[35]

	)

192 
	#Õi_ch™ges_ªs
 
CUR
 
Boﬁóns
[36]

	)

193 
	#cﬁumns
 
CUR
 
Numbîs
[0]

	)

194 
	#öô_èbs
 
CUR
 
Numbîs
[1]

	)

195 
	#löes
 
CUR
 
Numbîs
[2]

	)

196 
	#löes_of_mem‹y
 
CUR
 
Numbîs
[3]

	)

197 
	#magic_cookõ_glôch
 
CUR
 
Numbîs
[4]

	)

198 
	#∑ddög_baud_øã
 
CUR
 
Numbîs
[5]

	)

199 
	#vútuÆ_ãrmöÆ
 
CUR
 
Numbîs
[6]

	)

200 
	#width_°©us_löe
 
CUR
 
Numbîs
[7]

	)

201 
	#num_œbñs
 
CUR
 
Numbîs
[8]

	)

202 
	#œbñ_height
 
CUR
 
Numbîs
[9]

	)

203 
	#œbñ_width
 
CUR
 
Numbîs
[10]

	)

204 
	#max_©åibuãs
 
CUR
 
Numbîs
[11]

	)

205 
	#maximum_wödows
 
CUR
 
Numbîs
[12]

	)

206 
	#max_cﬁ‹s
 
CUR
 
Numbîs
[13]

	)

207 
	#max_∑ús
 
CUR
 
Numbîs
[14]

	)

208 
	#no_cﬁ‹_video
 
CUR
 
Numbîs
[15]

	)

209 
	#buf„r_ˇ∑côy
 
CUR
 
Numbîs
[16]

	)

210 
	#dŸ_vît_•acög
 
CUR
 
Numbîs
[17]

	)

211 
	#dŸ_h‹z_•acög
 
CUR
 
Numbîs
[18]

	)

212 
	#max_mi¸o_addªss
 
CUR
 
Numbîs
[19]

	)

213 
	#max_mi¸o_jump
 
CUR
 
Numbîs
[20]

	)

214 
	#mi¸o_cﬁ_size
 
CUR
 
Numbîs
[21]

	)

215 
	#mi¸o_löe_size
 
CUR
 
Numbîs
[22]

	)

216 
	#numbî_of_pös
 
CUR
 
Numbîs
[23]

	)

217 
	#ouçut_ªs_ch¨
 
CUR
 
Numbîs
[24]

	)

218 
	#ouçut_ªs_löe
 
CUR
 
Numbîs
[25]

	)

219 
	#ouçut_ªs_h‹z_öch
 
CUR
 
Numbîs
[26]

	)

220 
	#ouçut_ªs_vît_öch
 
CUR
 
Numbîs
[27]

	)

221 
	#¥öt_øã
 
CUR
 
Numbîs
[28]

	)

222 
	#wide_ch¨_size
 
CUR
 
Numbîs
[29]

	)

223 
	#buâ⁄s
 
CUR
 
Numbîs
[30]

	)

224 
	#bô_image_ítwöög
 
CUR
 
Numbîs
[31]

	)

225 
	#bô_image_ty≥
 
CUR
 
Numbîs
[32]

	)

226 
	#back_èb
 
CUR
 
Såögs
[0]

	)

227 
	#bñl
 
CUR
 
Såögs
[1]

	)

228 
	#ˇºüge_ªtu∫
 
CUR
 
Såögs
[2]

	)

229 
	#ch™ge_s¸ﬁl_ªgi⁄
 
CUR
 
Såögs
[3]

	)

230 
	#˛ór_Æl_èbs
 
CUR
 
Såögs
[4]

	)

231 
	#˛ór_s¸ìn
 
CUR
 
Såögs
[5]

	)

232 
	#˛r_eﬁ
 
CUR
 
Såögs
[6]

	)

233 
	#˛r_eos
 
CUR
 
Såögs
[7]

	)

234 
	#cﬁumn_addªss
 
CUR
 
Såögs
[8]

	)

235 
	#comm™d_ch¨a˘î
 
CUR
 
Såögs
[9]

	)

236 
	#curs‹_addªss
 
CUR
 
Såögs
[10]

	)

237 
	#curs‹_down
 
CUR
 
Såögs
[11]

	)

238 
	#curs‹_home
 
CUR
 
Såögs
[12]

	)

239 
	#curs‹_övisibÀ
 
CUR
 
Såögs
[13]

	)

240 
	#curs‹_À·
 
CUR
 
Såögs
[14]

	)

241 
	#curs‹_mem_addªss
 
CUR
 
Såögs
[15]

	)

242 
	#curs‹_n‹mÆ
 
CUR
 
Såögs
[16]

	)

243 
	#curs‹_right
 
CUR
 
Såögs
[17]

	)

244 
	#curs‹_to_Œ
 
CUR
 
Såögs
[18]

	)

245 
	#curs‹_up
 
CUR
 
Såögs
[19]

	)

246 
	#curs‹_visibÀ
 
CUR
 
Såögs
[20]

	)

247 
	#dñëe_ch¨a˘î
 
CUR
 
Såögs
[21]

	)

248 
	#dñëe_löe
 
CUR
 
Såögs
[22]

	)

249 
	#dis_°©us_löe
 
CUR
 
Såögs
[23]

	)

250 
	#down_hÆf_löe
 
CUR
 
Såögs
[24]

	)

251 
	#íãr_Æt_ch¨£t_mode
 
CUR
 
Såögs
[25]

	)

252 
	#íãr_blök_mode
 
CUR
 
Såögs
[26]

	)

253 
	#íãr_bﬁd_mode
 
CUR
 
Såögs
[27]

	)

254 
	#íãr_ˇ_mode
 
CUR
 
Såögs
[28]

	)

255 
	#íãr_dñëe_mode
 
CUR
 
Såögs
[29]

	)

256 
	#íãr_dim_mode
 
CUR
 
Såögs
[30]

	)

257 
	#íãr_ö£π_mode
 
CUR
 
Såögs
[31]

	)

258 
	#íãr_£cuª_mode
 
CUR
 
Såögs
[32]

	)

259 
	#íãr_¥Ÿe˘ed_mode
 
CUR
 
Såögs
[33]

	)

260 
	#íãr_ªvî£_mode
 
CUR
 
Såögs
[34]

	)

261 
	#íãr_°™dout_mode
 
CUR
 
Såögs
[35]

	)

262 
	#íãr_undîlöe_mode
 
CUR
 
Såögs
[36]

	)

263 
	#îa£_ch¨s
 
CUR
 
Såögs
[37]

	)

264 
	#exô_Æt_ch¨£t_mode
 
CUR
 
Såögs
[38]

	)

265 
	#exô_©åibuã_mode
 
CUR
 
Såögs
[39]

	)

266 
	#exô_ˇ_mode
 
CUR
 
Såögs
[40]

	)

267 
	#exô_dñëe_mode
 
CUR
 
Såögs
[41]

	)

268 
	#exô_ö£π_mode
 
CUR
 
Såögs
[42]

	)

269 
	#exô_°™dout_mode
 
CUR
 
Såögs
[43]

	)

270 
	#exô_undîlöe_mode
 
CUR
 
Såögs
[44]

	)

271 
	#Êash_s¸ìn
 
CUR
 
Såögs
[45]

	)

272 
	#f‹m_„ed
 
CUR
 
Såögs
[46]

	)

273 
	#‰om_°©us_löe
 
CUR
 
Såögs
[47]

	)

274 
	#öô_1°rög
 
CUR
 
Såögs
[48]

	)

275 
	#öô_2°rög
 
CUR
 
Såögs
[49]

	)

276 
	#öô_3°rög
 
CUR
 
Såögs
[50]

	)

277 
	#öô_fûe
 
CUR
 
Såögs
[51]

	)

278 
	#ö£π_ch¨a˘î
 
CUR
 
Såögs
[52]

	)

279 
	#ö£π_löe
 
CUR
 
Såögs
[53]

	)

280 
	#ö£π_∑ddög
 
CUR
 
Såögs
[54]

	)

281 
	#key_back•a˚
 
CUR
 
Såögs
[55]

	)

282 
	#key_ˇèb
 
CUR
 
Såögs
[56]

	)

283 
	#key_˛ór
 
CUR
 
Såögs
[57]

	)

284 
	#key_˘ab
 
CUR
 
Såögs
[58]

	)

285 
	#key_dc
 
CUR
 
Såögs
[59]

	)

286 
	#key_dl
 
CUR
 
Såögs
[60]

	)

287 
	#key_down
 
CUR
 
Såögs
[61]

	)

288 
	#key_eic
 
CUR
 
Såögs
[62]

	)

289 
	#key_eﬁ
 
CUR
 
Såögs
[63]

	)

290 
	#key_eos
 
CUR
 
Såögs
[64]

	)

291 
	#key_f0
 
CUR
 
Såögs
[65]

	)

292 
	#key_f1
 
CUR
 
Såögs
[66]

	)

293 
	#key_f10
 
CUR
 
Såögs
[67]

	)

294 
	#key_f2
 
CUR
 
Såögs
[68]

	)

295 
	#key_f3
 
CUR
 
Såögs
[69]

	)

296 
	#key_f4
 
CUR
 
Såögs
[70]

	)

297 
	#key_f5
 
CUR
 
Såögs
[71]

	)

298 
	#key_f6
 
CUR
 
Såögs
[72]

	)

299 
	#key_f7
 
CUR
 
Såögs
[73]

	)

300 
	#key_f8
 
CUR
 
Såögs
[74]

	)

301 
	#key_f9
 
CUR
 
Såögs
[75]

	)

302 
	#key_home
 
CUR
 
Såögs
[76]

	)

303 
	#key_ic
 
CUR
 
Såögs
[77]

	)

304 
	#key_û
 
CUR
 
Såögs
[78]

	)

305 
	#key_À·
 
CUR
 
Såögs
[79]

	)

306 
	#key_Œ
 
CUR
 
Såögs
[80]

	)

307 
	#key_≈age
 
CUR
 
Såögs
[81]

	)

308 
	#key_µage
 
CUR
 
Såögs
[82]

	)

309 
	#key_right
 
CUR
 
Såögs
[83]

	)

310 
	#key_sf
 
CUR
 
Såögs
[84]

	)

311 
	#key_§
 
CUR
 
Såögs
[85]

	)

312 
	#key_°ab
 
CUR
 
Såögs
[86]

	)

313 
	#key_up
 
CUR
 
Såögs
[87]

	)

314 
	#key∑d_loˇl
 
CUR
 
Såögs
[88]

	)

315 
	#key∑d_xmô
 
CUR
 
Såögs
[89]

	)

316 
	#œb_f0
 
CUR
 
Såögs
[90]

	)

317 
	#œb_f1
 
CUR
 
Såögs
[91]

	)

318 
	#œb_f10
 
CUR
 
Såögs
[92]

	)

319 
	#œb_f2
 
CUR
 
Såögs
[93]

	)

320 
	#œb_f3
 
CUR
 
Såögs
[94]

	)

321 
	#œb_f4
 
CUR
 
Såögs
[95]

	)

322 
	#œb_f5
 
CUR
 
Såögs
[96]

	)

323 
	#œb_f6
 
CUR
 
Såögs
[97]

	)

324 
	#œb_f7
 
CUR
 
Såögs
[98]

	)

325 
	#œb_f8
 
CUR
 
Såögs
[99]

	)

326 
	#œb_f9
 
CUR
 
Såögs
[100]

	)

327 
	#mëa_off
 
CUR
 
Såögs
[101]

	)

328 
	#mëa_⁄
 
CUR
 
Såögs
[102]

	)

329 
	#√wlöe
 
CUR
 
Såögs
[103]

	)

330 
	#∑d_ch¨
 
CUR
 
Såögs
[104]

	)

331 
	#∑rm_dch
 
CUR
 
Såögs
[105]

	)

332 
	#∑rm_dñëe_löe
 
CUR
 
Såögs
[106]

	)

333 
	#∑rm_down_curs‹
 
CUR
 
Såögs
[107]

	)

334 
	#∑rm_ich
 
CUR
 
Såögs
[108]

	)

335 
	#∑rm_ödex
 
CUR
 
Såögs
[109]

	)

336 
	#∑rm_ö£π_löe
 
CUR
 
Såögs
[110]

	)

337 
	#∑rm_À·_curs‹
 
CUR
 
Såögs
[111]

	)

338 
	#∑rm_right_curs‹
 
CUR
 
Såögs
[112]

	)

339 
	#∑rm_rödex
 
CUR
 
Såögs
[113]

	)

340 
	#∑rm_up_curs‹
 
CUR
 
Såögs
[114]

	)

341 
	#pkey_key
 
CUR
 
Såögs
[115]

	)

342 
	#pkey_loˇl
 
CUR
 
Såögs
[116]

	)

343 
	#pkey_xmô
 
CUR
 
Såögs
[117]

	)

344 
	#¥öt_s¸ìn
 
CUR
 
Såögs
[118]

	)

345 
	#¥å_off
 
CUR
 
Såögs
[119]

	)

346 
	#¥å_⁄
 
CUR
 
Såögs
[120]

	)

347 
	#ª≥©_ch¨
 
CUR
 
Såögs
[121]

	)

348 
	#ª£t_1°rög
 
CUR
 
Såögs
[122]

	)

349 
	#ª£t_2°rög
 
CUR
 
Såögs
[123]

	)

350 
	#ª£t_3°rög
 
CUR
 
Såögs
[124]

	)

351 
	#ª£t_fûe
 
CUR
 
Såögs
[125]

	)

352 
	#ª°‹e_curs‹
 
CUR
 
Såögs
[126]

	)

353 
	#row_addªss
 
CUR
 
Såögs
[127]

	)

354 
	#ßve_curs‹
 
CUR
 
Såögs
[128]

	)

355 
	#s¸ﬁl_f‹w¨d
 
CUR
 
Såögs
[129]

	)

356 
	#s¸ﬁl_ªvî£
 
CUR
 
Såögs
[130]

	)

357 
	#£t_©åibuãs
 
CUR
 
Såögs
[131]

	)

358 
	#£t_èb
 
CUR
 
Såögs
[132]

	)

359 
	#£t_wödow
 
CUR
 
Såögs
[133]

	)

360 
	#èb
 
CUR
 
Såögs
[134]

	)

361 
	#to_°©us_löe
 
CUR
 
Såögs
[135]

	)

362 
	#undîlöe_ch¨
 
CUR
 
Såögs
[136]

	)

363 
	#up_hÆf_löe
 
CUR
 
Såögs
[137]

	)

364 
	#öô_¥og
 
CUR
 
Såögs
[138]

	)

365 
	#key_a1
 
CUR
 
Såögs
[139]

	)

366 
	#key_a3
 
CUR
 
Såögs
[140]

	)

367 
	#key_b2
 
CUR
 
Såögs
[141]

	)

368 
	#key_c1
 
CUR
 
Såögs
[142]

	)

369 
	#key_c3
 
CUR
 
Såögs
[143]

	)

370 
	#¥å_n⁄
 
CUR
 
Såögs
[144]

	)

371 
	#ch¨_∑ddög
 
CUR
 
Såögs
[145]

	)

372 
	#acs_ch¨s
 
CUR
 
Såögs
[146]

	)

373 
	#∂ab_n‹m
 
CUR
 
Såögs
[147]

	)

374 
	#key_bèb
 
CUR
 
Såögs
[148]

	)

375 
	#íãr_x⁄_mode
 
CUR
 
Såögs
[149]

	)

376 
	#exô_x⁄_mode
 
CUR
 
Såögs
[150]

	)

377 
	#íãr_am_mode
 
CUR
 
Såögs
[151]

	)

378 
	#exô_am_mode
 
CUR
 
Såögs
[152]

	)

379 
	#x⁄_ch¨a˘î
 
CUR
 
Såögs
[153]

	)

380 
	#xoff_ch¨a˘î
 
CUR
 
Såögs
[154]

	)

381 
	#ía_acs
 
CUR
 
Såögs
[155]

	)

382 
	#œbñ_⁄
 
CUR
 
Såögs
[156]

	)

383 
	#œbñ_off
 
CUR
 
Såögs
[157]

	)

384 
	#key_beg
 
CUR
 
Såögs
[158]

	)

385 
	#key_ˇn˚l
 
CUR
 
Såögs
[159]

	)

386 
	#key_˛o£
 
CUR
 
Såögs
[160]

	)

387 
	#key_comm™d
 
CUR
 
Såögs
[161]

	)

388 
	#key_c›y
 
CUR
 
Såögs
[162]

	)

389 
	#key_¸óã
 
CUR
 
Såögs
[163]

	)

390 
	#key_íd
 
CUR
 
Såögs
[164]

	)

391 
	#key_íãr
 
CUR
 
Såögs
[165]

	)

392 
	#key_exô
 
CUR
 
Såögs
[166]

	)

393 
	#key_föd
 
CUR
 
Såögs
[167]

	)

394 
	#key_hñp
 
CUR
 
Såögs
[168]

	)

395 
	#key_m¨k
 
CUR
 
Såögs
[169]

	)

396 
	#key_mesßge
 
CUR
 
Såögs
[170]

	)

397 
	#key_move
 
CUR
 
Såögs
[171]

	)

398 
	#key_√xt
 
CUR
 
Såögs
[172]

	)

399 
	#key_›í
 
CUR
 
Såögs
[173]

	)

400 
	#key_›ti⁄s
 
CUR
 
Såögs
[174]

	)

401 
	#key_¥evious
 
CUR
 
Såögs
[175]

	)

402 
	#key_¥öt
 
CUR
 
Såögs
[176]

	)

403 
	#key_ªdo
 
CUR
 
Såögs
[177]

	)

404 
	#key_ª„ªn˚
 
CUR
 
Såögs
[178]

	)

405 
	#key_ª‰esh
 
CUR
 
Såögs
[179]

	)

406 
	#key_ª∂a˚
 
CUR
 
Såögs
[180]

	)

407 
	#key_ª°¨t
 
CUR
 
Såögs
[181]

	)

408 
	#key_ªsume
 
CUR
 
Såögs
[182]

	)

409 
	#key_ßve
 
CUR
 
Såögs
[183]

	)

410 
	#key_su•íd
 
CUR
 
Såögs
[184]

	)

411 
	#key_undo
 
CUR
 
Såögs
[185]

	)

412 
	#key_sbeg
 
CUR
 
Såögs
[186]

	)

413 
	#key_sˇn˚l
 
CUR
 
Såögs
[187]

	)

414 
	#key_scomm™d
 
CUR
 
Såögs
[188]

	)

415 
	#key_sc›y
 
CUR
 
Såögs
[189]

	)

416 
	#key_s¸óã
 
CUR
 
Såögs
[190]

	)

417 
	#key_sdc
 
CUR
 
Såögs
[191]

	)

418 
	#key_sdl
 
CUR
 
Såögs
[192]

	)

419 
	#key_£À˘
 
CUR
 
Såögs
[193]

	)

420 
	#key_£nd
 
CUR
 
Såögs
[194]

	)

421 
	#key_£ﬁ
 
CUR
 
Såögs
[195]

	)

422 
	#key_£xô
 
CUR
 
Såögs
[196]

	)

423 
	#key_sföd
 
CUR
 
Såögs
[197]

	)

424 
	#key_shñp
 
CUR
 
Såögs
[198]

	)

425 
	#key_shome
 
CUR
 
Såögs
[199]

	)

426 
	#key_sic
 
CUR
 
Såögs
[200]

	)

427 
	#key_¶e·
 
CUR
 
Såögs
[201]

	)

428 
	#key_smesßge
 
CUR
 
Såögs
[202]

	)

429 
	#key_smove
 
CUR
 
Såögs
[203]

	)

430 
	#key_¢ext
 
CUR
 
Såögs
[204]

	)

431 
	#key_s›ti⁄s
 
CUR
 
Såögs
[205]

	)

432 
	#key_•ªvious
 
CUR
 
Såögs
[206]

	)

433 
	#key_•röt
 
CUR
 
Såögs
[207]

	)

434 
	#key_§edo
 
CUR
 
Såögs
[208]

	)

435 
	#key_§ïœ˚
 
CUR
 
Såögs
[209]

	)

436 
	#key_§ight
 
CUR
 
Såögs
[210]

	)

437 
	#key_§sume
 
CUR
 
Såögs
[211]

	)

438 
	#key_sßve
 
CUR
 
Såögs
[212]

	)

439 
	#key_ssu•íd
 
CUR
 
Såögs
[213]

	)

440 
	#key_sundo
 
CUR
 
Såögs
[214]

	)

441 
	#ªq_f‹_öput
 
CUR
 
Såögs
[215]

	)

442 
	#key_f11
 
CUR
 
Såögs
[216]

	)

443 
	#key_f12
 
CUR
 
Såögs
[217]

	)

444 
	#key_f13
 
CUR
 
Såögs
[218]

	)

445 
	#key_f14
 
CUR
 
Såögs
[219]

	)

446 
	#key_f15
 
CUR
 
Såögs
[220]

	)

447 
	#key_f16
 
CUR
 
Såögs
[221]

	)

448 
	#key_f17
 
CUR
 
Såögs
[222]

	)

449 
	#key_f18
 
CUR
 
Såögs
[223]

	)

450 
	#key_f19
 
CUR
 
Såögs
[224]

	)

451 
	#key_f20
 
CUR
 
Såögs
[225]

	)

452 
	#key_f21
 
CUR
 
Såögs
[226]

	)

453 
	#key_f22
 
CUR
 
Såögs
[227]

	)

454 
	#key_f23
 
CUR
 
Såögs
[228]

	)

455 
	#key_f24
 
CUR
 
Såögs
[229]

	)

456 
	#key_f25
 
CUR
 
Såögs
[230]

	)

457 
	#key_f26
 
CUR
 
Såögs
[231]

	)

458 
	#key_f27
 
CUR
 
Såögs
[232]

	)

459 
	#key_f28
 
CUR
 
Såögs
[233]

	)

460 
	#key_f29
 
CUR
 
Såögs
[234]

	)

461 
	#key_f30
 
CUR
 
Såögs
[235]

	)

462 
	#key_f31
 
CUR
 
Såögs
[236]

	)

463 
	#key_f32
 
CUR
 
Såögs
[237]

	)

464 
	#key_f33
 
CUR
 
Såögs
[238]

	)

465 
	#key_f34
 
CUR
 
Såögs
[239]

	)

466 
	#key_f35
 
CUR
 
Såögs
[240]

	)

467 
	#key_f36
 
CUR
 
Såögs
[241]

	)

468 
	#key_f37
 
CUR
 
Såögs
[242]

	)

469 
	#key_f38
 
CUR
 
Såögs
[243]

	)

470 
	#key_f39
 
CUR
 
Såögs
[244]

	)

471 
	#key_f40
 
CUR
 
Såögs
[245]

	)

472 
	#key_f41
 
CUR
 
Såögs
[246]

	)

473 
	#key_f42
 
CUR
 
Såögs
[247]

	)

474 
	#key_f43
 
CUR
 
Såögs
[248]

	)

475 
	#key_f44
 
CUR
 
Såögs
[249]

	)

476 
	#key_f45
 
CUR
 
Såögs
[250]

	)

477 
	#key_f46
 
CUR
 
Såögs
[251]

	)

478 
	#key_f47
 
CUR
 
Såögs
[252]

	)

479 
	#key_f48
 
CUR
 
Såögs
[253]

	)

480 
	#key_f49
 
CUR
 
Såögs
[254]

	)

481 
	#key_f50
 
CUR
 
Såögs
[255]

	)

482 
	#key_f51
 
CUR
 
Såögs
[256]

	)

483 
	#key_f52
 
CUR
 
Såögs
[257]

	)

484 
	#key_f53
 
CUR
 
Såögs
[258]

	)

485 
	#key_f54
 
CUR
 
Såögs
[259]

	)

486 
	#key_f55
 
CUR
 
Såögs
[260]

	)

487 
	#key_f56
 
CUR
 
Såögs
[261]

	)

488 
	#key_f57
 
CUR
 
Såögs
[262]

	)

489 
	#key_f58
 
CUR
 
Såögs
[263]

	)

490 
	#key_f59
 
CUR
 
Såögs
[264]

	)

491 
	#key_f60
 
CUR
 
Såögs
[265]

	)

492 
	#key_f61
 
CUR
 
Såögs
[266]

	)

493 
	#key_f62
 
CUR
 
Såögs
[267]

	)

494 
	#key_f63
 
CUR
 
Såögs
[268]

	)

495 
	#˛r_bﬁ
 
CUR
 
Såögs
[269]

	)

496 
	#˛ór_m¨gös
 
CUR
 
Såögs
[270]

	)

497 
	#£t_À·_m¨gö
 
CUR
 
Såögs
[271]

	)

498 
	#£t_right_m¨gö
 
CUR
 
Såögs
[272]

	)

499 
	#œbñ_f‹m©
 
CUR
 
Såögs
[273]

	)

500 
	#£t_˛ock
 
CUR
 
Såögs
[274]

	)

501 
	#di•œy_˛ock
 
CUR
 
Såögs
[275]

	)

502 
	#ªmove_˛ock
 
CUR
 
Såögs
[276]

	)

503 
	#¸óã_wödow
 
CUR
 
Såögs
[277]

	)

504 
	#gŸo_wödow
 
CUR
 
Såögs
[278]

	)

505 
	#h™gup
 
CUR
 
Såögs
[279]

	)

506 
	#dül_ph⁄e
 
CUR
 
Såögs
[280]

	)

507 
	#quick_dül
 
CUR
 
Såögs
[281]

	)

508 
	#t⁄e
 
CUR
 
Såögs
[282]

	)

509 
	#pul£
 
CUR
 
Såögs
[283]

	)

510 
	#Êash_hook
 
CUR
 
Såögs
[284]

	)

511 
	#fixed_∑u£
 
CUR
 
Såögs
[285]

	)

512 
	#waô_t⁄e
 
CUR
 
Såögs
[286]

	)

513 
	#u£r0
 
CUR
 
Såögs
[287]

	)

514 
	#u£r1
 
CUR
 
Såögs
[288]

	)

515 
	#u£r2
 
CUR
 
Såögs
[289]

	)

516 
	#u£r3
 
CUR
 
Såögs
[290]

	)

517 
	#u£r4
 
CUR
 
Såögs
[291]

	)

518 
	#u£r5
 
CUR
 
Såögs
[292]

	)

519 
	#u£r6
 
CUR
 
Såögs
[293]

	)

520 
	#u£r7
 
CUR
 
Såögs
[294]

	)

521 
	#u£r8
 
CUR
 
Såögs
[295]

	)

522 
	#u£r9
 
CUR
 
Såögs
[296]

	)

523 
	#‹ig_∑ú
 
CUR
 
Såögs
[297]

	)

524 
	#‹ig_cﬁ‹s
 
CUR
 
Såögs
[298]

	)

525 
	#öôülize_cﬁ‹
 
CUR
 
Såögs
[299]

	)

526 
	#öôülize_∑ú
 
CUR
 
Såögs
[300]

	)

527 
	#£t_cﬁ‹_∑ú
 
CUR
 
Såögs
[301]

	)

528 
	#£t_f‹eground
 
CUR
 
Såögs
[302]

	)

529 
	#£t_background
 
CUR
 
Såögs
[303]

	)

530 
	#ch™ge_ch¨_pôch
 
CUR
 
Såögs
[304]

	)

531 
	#ch™ge_löe_pôch
 
CUR
 
Såögs
[305]

	)

532 
	#ch™ge_ªs_h‹z
 
CUR
 
Såögs
[306]

	)

533 
	#ch™ge_ªs_vît
 
CUR
 
Såögs
[307]

	)

534 
	#deföe_ch¨
 
CUR
 
Såögs
[308]

	)

535 
	#íãr_doubÀwide_mode
 
CUR
 
Såögs
[309]

	)

536 
	#íãr_dø·_quÆôy
 
CUR
 
Såögs
[310]

	)

537 
	#íãr_ôÆics_mode
 
CUR
 
Såögs
[311]

	)

538 
	#íãr_À·w¨d_mode
 
CUR
 
Såögs
[312]

	)

539 
	#íãr_mi¸o_mode
 
CUR
 
Såögs
[313]

	)

540 
	#íãr_√¨_Àâî_quÆôy
 
CUR
 
Såögs
[314]

	)

541 
	#íãr_n‹mÆ_quÆôy
 
CUR
 
Såögs
[315]

	)

542 
	#íãr_shadow_mode
 
CUR
 
Såögs
[316]

	)

543 
	#íãr_subs¸ùt_mode
 
CUR
 
Såögs
[317]

	)

544 
	#íãr_su≥rs¸ùt_mode
 
CUR
 
Såögs
[318]

	)

545 
	#íãr_upw¨d_mode
 
CUR
 
Såögs
[319]

	)

546 
	#exô_doubÀwide_mode
 
CUR
 
Såögs
[320]

	)

547 
	#exô_ôÆics_mode
 
CUR
 
Såögs
[321]

	)

548 
	#exô_À·w¨d_mode
 
CUR
 
Såögs
[322]

	)

549 
	#exô_mi¸o_mode
 
CUR
 
Såögs
[323]

	)

550 
	#exô_shadow_mode
 
CUR
 
Såögs
[324]

	)

551 
	#exô_subs¸ùt_mode
 
CUR
 
Såögs
[325]

	)

552 
	#exô_su≥rs¸ùt_mode
 
CUR
 
Såögs
[326]

	)

553 
	#exô_upw¨d_mode
 
CUR
 
Såögs
[327]

	)

554 
	#mi¸o_cﬁumn_addªss
 
CUR
 
Såögs
[328]

	)

555 
	#mi¸o_down
 
CUR
 
Såögs
[329]

	)

556 
	#mi¸o_À·
 
CUR
 
Såögs
[330]

	)

557 
	#mi¸o_right
 
CUR
 
Såögs
[331]

	)

558 
	#mi¸o_row_addªss
 
CUR
 
Såögs
[332]

	)

559 
	#mi¸o_up
 
CUR
 
Såögs
[333]

	)

560 
	#‹dî_of_pös
 
CUR
 
Såögs
[334]

	)

561 
	#∑rm_down_mi¸o
 
CUR
 
Såögs
[335]

	)

562 
	#∑rm_À·_mi¸o
 
CUR
 
Såögs
[336]

	)

563 
	#∑rm_right_mi¸o
 
CUR
 
Såögs
[337]

	)

564 
	#∑rm_up_mi¸o
 
CUR
 
Såögs
[338]

	)

565 
	#£À˘_ch¨_£t
 
CUR
 
Såögs
[339]

	)

566 
	#£t_bŸtom_m¨gö
 
CUR
 
Såögs
[340]

	)

567 
	#£t_bŸtom_m¨gö_∑rm
 
CUR
 
Såögs
[341]

	)

568 
	#£t_À·_m¨gö_∑rm
 
CUR
 
Såögs
[342]

	)

569 
	#£t_right_m¨gö_∑rm
 
CUR
 
Såögs
[343]

	)

570 
	#£t_t›_m¨gö
 
CUR
 
Såögs
[344]

	)

571 
	#£t_t›_m¨gö_∑rm
 
CUR
 
Såögs
[345]

	)

572 
	#°¨t_bô_image
 
CUR
 
Såögs
[346]

	)

573 
	#°¨t_ch¨_£t_def
 
CUR
 
Såögs
[347]

	)

574 
	#°›_bô_image
 
CUR
 
Såögs
[348]

	)

575 
	#°›_ch¨_£t_def
 
CUR
 
Såögs
[349]

	)

576 
	#subs¸ùt_ch¨a˘îs
 
CUR
 
Såögs
[350]

	)

577 
	#su≥rs¸ùt_ch¨a˘îs
 
CUR
 
Såögs
[351]

	)

578 
	#the£_ˇu£_¸
 
CUR
 
Såögs
[352]

	)

579 
	#zîo_mŸi⁄
 
CUR
 
Såögs
[353]

	)

580 
	#ch¨_£t_«mes
 
CUR
 
Såögs
[354]

	)

581 
	#key_mou£
 
CUR
 
Såögs
[355]

	)

582 
	#mou£_öfo
 
CUR
 
Såögs
[356]

	)

583 
	#ªq_mou£_pos
 
CUR
 
Såögs
[357]

	)

584 
	#gë_mou£
 
CUR
 
Såögs
[358]

	)

585 
	#£t_a_f‹eground
 
CUR
 
Såögs
[359]

	)

586 
	#£t_a_background
 
CUR
 
Såögs
[360]

	)

587 
	#pkey_∂ab
 
CUR
 
Såögs
[361]

	)

588 
	#devi˚_ty≥
 
CUR
 
Såögs
[362]

	)

589 
	#code_£t_öô
 
CUR
 
Såögs
[363]

	)

590 
	#£t0_des_£q
 
CUR
 
Såögs
[364]

	)

591 
	#£t1_des_£q
 
CUR
 
Såögs
[365]

	)

592 
	#£t2_des_£q
 
CUR
 
Såögs
[366]

	)

593 
	#£t3_des_£q
 
CUR
 
Såögs
[367]

	)

594 
	#£t_Ã_m¨gö
 
CUR
 
Såögs
[368]

	)

595 
	#£t_tb_m¨gö
 
CUR
 
Såögs
[369]

	)

596 
	#bô_image_ª≥©
 
CUR
 
Såögs
[370]

	)

597 
	#bô_image_√wlöe
 
CUR
 
Såögs
[371]

	)

598 
	#bô_image_ˇºüge_ªtu∫
 
CUR
 
Såögs
[372]

	)

599 
	#cﬁ‹_«mes
 
CUR
 
Såögs
[373]

	)

600 
	#deföe_bô_image_ªgi⁄
 
CUR
 
Såögs
[374]

	)

601 
	#íd_bô_image_ªgi⁄
 
CUR
 
Såögs
[375]

	)

602 
	#£t_cﬁ‹_b™d
 
CUR
 
Såögs
[376]

	)

603 
	#£t_∑ge_Àngth
 
CUR
 
Såögs
[377]

	)

604 
	#di•œy_pc_ch¨
 
CUR
 
Såögs
[378]

	)

605 
	#íãr_pc_ch¨£t_mode
 
CUR
 
Såögs
[379]

	)

606 
	#exô_pc_ch¨£t_mode
 
CUR
 
Såögs
[380]

	)

607 
	#íãr_sˇncode_mode
 
CUR
 
Såögs
[381]

	)

608 
	#exô_sˇncode_mode
 
CUR
 
Såögs
[382]

	)

609 
	#pc_ãrm_›ti⁄s
 
CUR
 
Såögs
[383]

	)

610 
	#sˇncode_esˇ≥
 
CUR
 
Såögs
[384]

	)

611 
	#Æt_sˇncode_esc
 
CUR
 
Såögs
[385]

	)

612 
	#íãr_h‹iz⁄èl_hl_mode
 
CUR
 
Såögs
[386]

	)

613 
	#íãr_À·_hl_mode
 
CUR
 
Såögs
[387]

	)

614 
	#íãr_low_hl_mode
 
CUR
 
Såögs
[388]

	)

615 
	#íãr_right_hl_mode
 
CUR
 
Såögs
[389]

	)

616 
	#íãr_t›_hl_mode
 
CUR
 
Såögs
[390]

	)

617 
	#íãr_vîtiˇl_hl_mode
 
CUR
 
Såögs
[391]

	)

618 
	#£t_a_©åibuãs
 
CUR
 
Såögs
[392]

	)

619 
	#£t_pgÀn_öch
 
CUR
 
Såögs
[393]

	)

621 
	#BOOLWRITE
 37

	)

622 
	#NUMWRITE
 33

	)

623 
	#STRWRITE
 394

	)

626 
	#bìhive_glôch
 
no_esc_˘lc


	)

627 
	#ãÀøy_glôch
 
de°_èbs_magic_smso


	)

628 
	#mi¸o_ch¨_size
 
mi¸o_cﬁ_size


	)

630 #ifde‡
__INTERNAL_CAPS_VISIBLE


631 
	#ãrmˇp_öô2
 
CUR
 
Såögs
[394]

	)

632 
	#ãrmˇp_ª£t
 
CUR
 
Såögs
[395]

	)

633 
	#magic_cookõ_glôch_ul
 
CUR
 
Numbîs
[33]

	)

634 
	#back•a˚s_wôh_bs
 
CUR
 
Boﬁóns
[37]

	)

635 
	#¸t_no_s¸ﬁlög
 
CUR
 
Boﬁóns
[38]

	)

636 
	#no_c‹ª˘ly_w‹kög_¸
 
CUR
 
Boﬁóns
[39]

	)

637 
	#ˇºüge_ªtu∫_dñay
 
CUR
 
Numbîs
[34]

	)

638 
	#√w_löe_dñay
 
CUR
 
Numbîs
[35]

	)

639 
	#löe„ed_if_nŸ_lf
 
CUR
 
Såögs
[396]

	)

640 
	#back•a˚_if_nŸ_bs
 
CUR
 
Såögs
[397]

	)

641 
	#gnu_has_mëa_key
 
CUR
 
Boﬁóns
[40]

	)

642 
	#löe„ed_is_√wlöe
 
CUR
 
Boﬁóns
[41]

	)

643 
	#back•a˚_dñay
 
CUR
 
Numbîs
[36]

	)

644 
	#h‹iz⁄èl_èb_dñay
 
CUR
 
Numbîs
[37]

	)

645 
	#numbî_of_fun˘i⁄_keys
 
CUR
 
Numbîs
[38]

	)

646 
	#Ÿhî_n⁄_fun˘i⁄_keys
 
CUR
 
Såögs
[398]

	)

647 
	#¨row_key_m≠
 
CUR
 
Såögs
[399]

	)

648 
	#has_h¨dw¨e_èbs
 
CUR
 
Boﬁóns
[42]

	)

649 
	#ªtu∫_d€s_˛r_eﬁ
 
CUR
 
Boﬁóns
[43]

	)

650 
	#acs_ulc‹√r
 
CUR
 
Såögs
[400]

	)

651 
	#acs_Œc‹√r
 
CUR
 
Såögs
[401]

	)

652 
	#acs_urc‹√r
 
CUR
 
Såögs
[402]

	)

653 
	#acs_Ãc‹√r
 
CUR
 
Såögs
[403]

	)

654 
	#acs_…ì
 
CUR
 
Såögs
[404]

	)

655 
	#acs_πì
 
CUR
 
Såögs
[405]

	)

656 
	#acs_bãe
 
CUR
 
Såögs
[406]

	)

657 
	#acs_âì
 
CUR
 
Såögs
[407]

	)

658 
	#acs_hlöe
 
CUR
 
Såögs
[408]

	)

659 
	#acs_vlöe
 
CUR
 
Såögs
[409]

	)

660 
	#acs_∂us
 
CUR
 
Såögs
[410]

	)

661 
	#mem‹y_lock
 
CUR
 
Såögs
[411]

	)

662 
	#mem‹y_u∆ock
 
CUR
 
Såögs
[412]

	)

663 
	#box_ch¨s_1
 
CUR
 
Såögs
[413]

	)

670 
	#BOOLCOUNT
 44

	)

671 
	#NUMCOUNT
 39

	)

672 
	#STRCOUNT
 414

	)

675 
	#acs_ch¨s_ödex
 146

	)

677 
	sãrmty≥
 {

678 *
ãrm_«mes
;

679 *
°r_èbÀ
;

680 
NCURSES_SBOOL
 *
Boﬁóns
;

681 *
Numbîs
;

682 **
Såögs
;

684 #i‡
NCURSES_XNAMES


685 *
ext_°r_èbÀ
;

686 **
ext_Names
;

688 
num_Boﬁóns
;

689 
num_Numbîs
;

690 
num_Såögs
;

692 
ext_Boﬁóns
;

693 
ext_Numbîs
;

694 
ext_Såögs
;

697 } 
	tTERMTYPE
;

699 
	sãrm
 {

700 
TERMTYPE
 
ty≥
;

701 
Fûedes
;

702 
TTY
 
Oâyb
,

703 
Nâyb
;

704 
_baudøã
;

705 * 
_ãrm«me
;

706 } 
	tTERMINAL
;

709 
NCURSES_EXPORT_VAR
(
TERMINAL
 *Ë
cur_ãrm
;

711 
NCURSES_WRAPPED_VAR
(
TERMINAL
 *, 
cur_ãrm
);

712 
	#cur_ãrm
 
	`NCURSES_PUBLIC_VAR
(
	`cur_ãrm
())

	)

714 
NCURSES_EXPORT_VAR
(
TERMINAL
 *Ë
cur_ãrm
;

718 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁ«mes
);

719 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁcodes
);

720 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁ‚ames
);

721 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
num«mes
);

722 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
numcodes
);

723 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
num‚ames
);

724 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°∫ames
);

725 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°rcodes
);

726 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°r‚ames
);

728 
	#boﬁ«mes
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁ«mes
())

	)

729 
	#boﬁcodes
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁcodes
())

	)

730 
	#boﬁ‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁ‚ames
())

	)

731 
	#num«mes
 
	`NCURSES_PUBLIC_VAR
(
	`num«mes
())

	)

732 
	#numcodes
 
	`NCURSES_PUBLIC_VAR
(
	`numcodes
())

	)

733 
	#num‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`num‚ames
())

	)

734 
	#°∫ames
 
	`NCURSES_PUBLIC_VAR
(
	`°∫ames
())

	)

735 
	#°rcodes
 
	`NCURSES_PUBLIC_VAR
(
	`°rcodes
())

	)

736 
	#°r‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`°r‚ames
())

	)

740 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁ«mes
[];

741 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁcodes
[];

742 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁ‚ames
[];

743 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
num«mes
[];

744 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
numcodes
[];

745 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
num‚ames
[];

746 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°∫ames
[];

747 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°rcodes
[];

748 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°r‚ames
[];

753 
NCURSES_EXPORT
(Ë
_nc_£t_ây_mode
 (
TTY
 *
buf
);

754 
NCURSES_EXPORT
(Ë
_nc_gë_ây_mode
 (
TTY
 *
buf
);

755 
NCURSES_EXPORT
(Ë
_nc_ªad_íåy
 (c⁄° * c⁄°, * c⁄°, 
TERMTYPE
 *const);

756 
NCURSES_EXPORT
(Ë
_nc_ªad_fûe_íåy
 (c⁄° *c⁄°, 
TERMTYPE
 *);

757 
NCURSES_EXPORT
(Ë
_nc_ªad_ãrmty≥
 (
TERMTYPE
 *, *, );

758 
NCURSES_EXPORT
(*Ë
_nc_fú°_«me
 (const *const);

759 
NCURSES_EXPORT
(Ë
_nc_«me_m©ch
 (const *const, const *const, const *const);

760 
NCURSES_EXPORT
(c⁄° 
TERMTYPE
 *Ë
_nc_ÁŒback
 (const *);

763 
NCURSES_EXPORT
(
TERMINAL
 *Ë
£t_cuπîm
 (TERMINAL *);

764 
NCURSES_EXPORT
(Ë
dñ_cuπîm
 (
TERMINAL
 *);

767 
NCURSES_EXPORT
(Ë
ª°¨âîm
 (
NCURSES_CONST
 *, , *);

768 
NCURSES_EXPORT
(Ë
£tu±îm
 (
NCURSES_CONST
 *,,*);

771 #i‡!
deföed
(
__NCURSES_H
)

772 
NCURSES_EXPORT
(*Ë
tigë°r
 (
NCURSES_CONST
 *);

773 
NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

774 
NCURSES_EXPORT
(Ë
puç
 (const *);

775 
NCURSES_EXPORT
(Ë
tigëÊag
 (
NCURSES_CONST
 *);

776 
NCURSES_EXPORT
(Ë
tigënum
 (
NCURSES_CONST
 *);

779 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ...);

781 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ,,,,,,,,);

782 
NCURSES_EXPORT
(*Ë
ç¨m_v¨¨gs
 (
NCURSES_CONST
 *, ...);

785 
NCURSES_EXPORT
(*Ë
tù¨m
 (const *, ...);

790 #i‡!
deföed
(
NCURSES_TERMCAP_H_ö˛
)

791 
NCURSES_EXPORT
(*Ë
tgë°r
 (
NCURSES_CONST
 *, **);

792 
NCURSES_EXPORT
(*Ë
tgŸo
 (const *, , );

793 
NCURSES_EXPORT
(Ë
tgëít
 (*, const *);

794 
NCURSES_EXPORT
(Ë
tgëÊag
 (
NCURSES_CONST
 *);

795 
NCURSES_EXPORT
(Ë
tgënum
 (
NCURSES_CONST
 *);

796 
NCURSES_EXPORT
(Ë
çuts
 (const *, , (*)());

802 #i‡
deföed
(
NCURSES_SP_FUNCS
) && (NCURSES_SP_FUNCS != 0)

804 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
tigë°r
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

805 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
puç
Ë(
SCREEN
*, const *);

806 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tigëÊag
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

807 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tigënum
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

810 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ç¨m
Ë(
SCREEN
*, 
NCURSES_CONST
 *, ...);

812 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ç¨m
Ë(
SCREEN
*, 
NCURSES_CONST
 *, ,,,,,,,,);

813 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ç¨m_v¨¨gs
Ë(
SCREEN
*, 
NCURSES_CONST
 *, ...);

817 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
tgë°r
Ë(
SCREEN
*, 
NCURSES_CONST
 *, **);

818 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
tgŸo
Ë(
SCREEN
*, const *, , );

819 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tgëít
Ë(
SCREEN
*, *, const *);

820 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tgëÊag
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

821 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tgënum
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

822 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
çuts
Ë(
SCREEN
*, c⁄° *, , 
NCURSES_SP_OUTC
);

824 
NCURSES_EXPORT
(
TERMINAL
 *Ë
NCURSES_SP_NAME
(
£t_cuπîm
Ë(
SCREEN
*, TERMINAL *);

825 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
dñ_cuπîm
Ë(
SCREEN
*, 
TERMINAL
 *);

827 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª°¨âîm
Ë(
SCREEN
*, 
NCURSES_CONST
 *, , *);

830 #ifde‡
__˝lu•lus


	@/usr/include/term_entry.h

41 #i‚de‡
NCURSES_TERM_ENTRY_H_ö˛


42 
	#NCURSES_TERM_ENTRY_H_ö˛
 1

	)

44 #ifde‡
__˝lu•lus


48 
	~<ãrm.h
>

50 
	#MAX_USES
 32

	)

51 
	#MAX_CROSSLINKS
 16

	)

53 
	síåy
 {

54 
TERMTYPE
 
âîm
;

55 
nu£s
;

58 *
«me
;

59 
íåy
 *
lök
;

60 
löe
;

62 
u£s
[
MAX_USES
];

63 
n¸os¶öks
;

64 
íåy
 *
¸os¶öks
[
MAX_CROSSLINKS
];

65 
c°¨t
, 
˚nd
;

66 
°¨éöe
;

67 
íåy
 *
√xt
;

68 
íåy
 *
œ°
;

70 
	tENTRY
;

72 #i‡
NCURSES_XNAMES


73 
	#NUM_BOOLEANS
(
ç
Ë—p)->
num_Boﬁóns


	)

74 
	#NUM_NUMBERS
(
ç
Ë—p)->
num_Numbîs


	)

75 
	#NUM_STRINGS
(
ç
Ë—p)->
num_Såögs


	)

76 
	#EXT_NAMES
(
ç
,
i
,
limô
,
ödex
,
èbÀ
Ë(ò>limôË?Åp->
ext_Names
[ödex] :ÅabÀ[i]

	)

78 
	#NUM_BOOLEANS
(
ç
Ë
BOOLCOUNT


	)

79 
	#NUM_NUMBERS
(
ç
Ë
NUMCOUNT


	)

80 
	#NUM_STRINGS
(
ç
Ë
STRCOUNT


	)

81 
	#EXT_NAMES
(
ç
,
i
,
limô
,
ödex
,
èbÀ
ËèbÀ[i]

	)

84 
	#NUM_EXT_NAMES
(
ç
Ë(Ë(—p)->
ext_Boﬁóns
 + (ç)->
ext_Numbîs
 + (ç)->
ext_Såögs
)

	)

86 
	#f‹_óch_boﬁón
(
n
,
ç
Ë¿0;Ç < 
	`NUM_BOOLEANS
—p);Ç++)

	)

87 
	#f‹_óch_numbî
(
n
,
ç
Ë¿0;Ç < 
	`NUM_NUMBERS
—p);Ç++)

	)

88 
	#f‹_óch_°rög
(
n
,
ç
Ë¿0;Ç < 
	`NUM_STRINGS
—p);Ç++)

	)

90 #i‡
NCURSES_XNAMES


91 
	#f‹_óch_ext_boﬁón
(
n
,
ç
Ë¿
BOOLCOUNT
;Ç < 
	`NUM_BOOLEANS
—p);Ç++)

	)

92 
	#f‹_óch_ext_numbî
(
n
,
ç
Ë¿
NUMCOUNT
;Ç < 
	`NUM_NUMBERS
—p);Ç++)

	)

93 
	#f‹_óch_ext_°rög
(
n
,
ç
Ë¿
STRCOUNT
;Ç < 
	`NUM_STRINGS
—p);Ç++)

	)

96 
	#ExtBoﬁ«me
(
ç
,
i
,
«mes
Ë
	`EXT_NAMES
—p, i, 
BOOLCOUNT
, (ò- (ç->
num_Boﬁóns
 -Åp->
ext_Boﬁóns
)),Çames)

	)

97 
	#ExtNum«me
(
ç
,
i
,
«mes
Ë
	`EXT_NAMES
—p, i, 
NUMCOUNT
, (ò- (ç->
num_Numbîs
 -Åp->
ext_Numbîs
)Ë+Åp->
ext_Boﬁóns
,Çames)

	)

98 
	#ExtSå«me
(
ç
,
i
,
«mes
Ë
	`EXT_NAMES
—p, i, 
STRCOUNT
, (ò- (ç->
num_Såögs
 -Åp->
ext_Såögs
)Ë+ (ç->
ext_Numbîs
 +Åp->
ext_Boﬁóns
),Çames)

	)

100 
NCURSES_EXPORT_VAR
(
ENTRY
 *Ë
_nc_hód
;

101 
NCURSES_EXPORT_VAR
(
ENTRY
 *Ë
_nc_èû
;

102 
	#f‹_íåy_li°
(
qp
Ëq∞
_nc_hód
; qp; q∞qp->
√xt
)

	)

104 
	#MAX_LINE
 132

	)

106 
	#NULLHOOK
 (
	`boﬁ
(*)(
ENTRY
 *))0

	)

112 
	#WANTED
(
s
Ë((sË=
ABSENT_STRING
)

	)

113 
	#PRESENT
(
s
Ë(((sË!
ABSENT_STRING
Ë&& ((sË!
CANCELLED_STRING
))

	)

115 
	#ANDMISSING
(
p
,
q
) \

116 {i‡(
	`PRESENT
(
p
Ë&& !PRESENT(
q
)Ë
	`_nc_w¨nög
(#∞" buànÿ" #q);}

	)

118 
	#PAIRED
(
p
,
q
) \

120 i‡(
	`PRESENT
(
q
Ë&& !PRESENT(
p
)) \

121 
	`_nc_w¨nög
(#q " butÇo " #p); \

122 i‡(
	`PRESENT
(
p
Ë&& !PRESENT(
q
)) \

123 
	`_nc_w¨nög
(#p " butÇo " #q); \

124 }

	)

127 
NCURSES_EXPORT
(
ENTRY
 *Ë
_nc_c›y_íåy
 (ENTRY *
ﬁdp
);

128 
NCURSES_EXPORT
(*Ë
_nc_ßve_°r
 (const *const);

129 
NCURSES_EXPORT
(Ë
_nc_öô_íåy
 (
TERMTYPE
 *const);

130 
NCURSES_EXPORT
(Ë
_nc_mîge_íåy
 (
TERMTYPE
 *const, TERMTYPE *const);

131 
NCURSES_EXPORT
(Ë
_nc_wøp_íåy
 (
ENTRY
 *c⁄°, 
boﬁ
);

134 
NCURSES_EXPORT
(Ë
_nc_Æign_ãrmty≥
 (
TERMTYPE
 *, TERMTYPE *);

135 
NCURSES_EXPORT
(Ë
_nc_c›y_ãrmty≥
 (
TERMTYPE
 *, TERMTYPE *);

138 
NCURSES_EXPORT
(Ë
_nc_‰ì_ãrmty≥
 (
TERMTYPE
 *);

141 
NCURSES_EXPORT
(Ë
_nc_öô_acs
 ();

144 
NCURSES_EXPORT
(*Ë
_nc_åim_sgr0
 (
TERMTYPE
 *);

147 #i‡
NCURSES_XNAMES


148 
NCURSES_EXPORT_VAR
(
boﬁ
Ë
_nc_u£r_deföabÀ
;

149 
NCURSES_EXPORT_VAR
(
boﬁ
Ë
_nc_dißbÀ_≥riod
;

151 
NCURSES_EXPORT
(Ë
_nc_∑r£_íåy
 (
ENTRY
 *, , 
boﬁ
);

152 
NCURSES_EXPORT
(Ë
_nc_ˇpcmp
 (const *, const *);

155 
NCURSES_EXPORT
(Ë
_nc_£t_wrôedú
 (*);

156 
NCURSES_EXPORT
(Ë
_nc_wrôe_íåy
 (
TERMTYPE
 *const);

159 
NCURSES_EXPORT
(Ë
_nc_ªad_íåy_sour˚
 (
FILE
*, *, , 
boﬁ
, boﬁ (*)(
ENTRY
*));

160 
NCURSES_EXPORT
(
boﬁ
Ë
_nc_íåy_m©ch
 (*, *);

161 
NCURSES_EXPORT
(Ë
_nc_ªsﬁve_u£s
 (
boﬁ
);

162 
NCURSES_EXPORT
(Ë
_nc_ªsﬁve_u£s2
 (
boﬁ
, bool);

163 
NCURSES_EXPORT
(Ë
_nc_‰ì_íåõs
 (
ENTRY
 *);

164 
NCURSES_IMPEXP
 
NCURSES_API
 (*
_nc_check_ãrmty≥
)(
TERMTYPE
 *);

165 
NCURSES_IMPEXP
 
NCURSES_API
 (*
_nc_check_ãrmty≥2
)(
TERMTYPE
 *, 
boﬁ
);

168 
NCURSES_EXPORT
(Ë
_nc_åa˚_x«mes
 (
TERMTYPE
 *);

170 #ifde‡
__˝lu•lus


	@/usr/include/termcap.h

36 #i‚de‡
NCURSES_TERMCAP_H_ö˛


37 
	#NCURSES_TERMCAP_H_ö˛
 1

	)

39 #unde‡
NCURSES_VERSION


40 
	#NCURSES_VERSION
 "5.9"

	)

42 
	~<ncur£s_dŒ.h
>

44 #ifde‡
__˝lu•lus


49 
	~<sys/ty≥s.h
>

51 #unde‡
NCURSES_CONST


52 
	#NCURSES_CONST
 c⁄°

	)

54 #unde‡
NCURSES_OSPEED


55 
	#NCURSES_OSPEED
 

	)

57 
NCURSES_EXPORT_VAR
(Ë
PC
;

58 
NCURSES_EXPORT_VAR
(*Ë
UP
;

59 
NCURSES_EXPORT_VAR
(*Ë
BC
;

60 
NCURSES_EXPORT_VAR
(
NCURSES_OSPEED
Ë
o•ìd
;

62 #i‡!
deföed
(
NCURSES_TERM_H_ö˛
)

63 
NCURSES_EXPORT
(*Ë
tgë°r
 (
NCURSES_CONST
 *, **);

64 
NCURSES_EXPORT
(*Ë
tgŸo
 (const *, , );

65 
NCURSES_EXPORT
(Ë
tgëít
 (*, const *);

66 
NCURSES_EXPORT
(Ë
tgëÊag
 (
NCURSES_CONST
 *);

67 
NCURSES_EXPORT
(Ë
tgënum
 (
NCURSES_CONST
 *);

68 
NCURSES_EXPORT
(Ë
çuts
 (const *, , (*)());

71 #ifde‡
__˝lu•lus


	@/usr/include/termio.h

5 
	~<ãrmios.h
>

6 
	~<sys/io˘l.h
>

	@/usr/include/termios.h

23 #i‚def 
_TERMIOS_H


24 
	#_TERMIOS_H
 1

	)

26 
	~<„©uªs.h
>

27 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

36 
	g__BEGIN_DECLS


40 
	~<bôs/ãrmios.h
>

42 #ifde‡
__USE_BSD


45 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

49 
•ìd_t
 
	$cfgëo•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

52 
•ìd_t
 
	$cfgëi•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

55 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

58 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

60 #ifdef 
__USE_BSD


62 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

67 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

71 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

72 
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

75 #ifdef 
__USE_BSD


77 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

81 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

87 
	`tcdøö
 (
__fd
);

91 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

95 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

98 #ifde‡
__USE_UNIX98


100 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

104 #ifde‡
__USE_BSD


105 
	~<sys/âydeÁu…s.h
>

108 
__END_DECLS


	@/usr/include/tgmath.h

24 #i‚de‡
_TGMATH_H


25 
	#_TGMATH_H
 1

	)

28 
	~<m©h.h
>

29 
	~<com∂ex.h
>

38 #i‡
__GNUC_PREREQ
 (2, 7)

40 #ifde‡
__NO_LONG_DOUBLE_MATH


41 
	#__tgml
(
f˘
Ë
	)
fct

43 
	#__tgml
(
f˘
Ëf˘ ## 
l


	)

51 #i‡
__GNUC_PREREQ
 (3, 1)

52 
	#__Êﬂtög_ty≥
(
ty≥
) \

53 (
	`__buûtö_˛assify_ty≥
 ((
ty≥
) 0) == 8 \

54 || (
	`__buûtö_˛assify_ty≥
 ((
ty≥
) 0) == 9 \

55 && 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 ((
ty≥
Ë0)Ë=8))

	)

57 
	#__Êﬂtög_ty≥
(
ty≥
Ë((—y≥Ë0.25Ë&& (—y≥Ë0.25 - 1))

	)

62 
	#__tgm©h_ªÆ_ty≥_sub
(
T
, 
E
) \

63 
	`__ty≥of__
 (*(0 ? (__ty≥of__ (0 ? (*Ë0 : (*Ë(
E
))) 0 \

64 : (
	`__ty≥of__
 (0 ? (
T
 *Ë0 : (*Ë(!(
E
)))Ë0))

	)

67 
	#__tgm©h_ªÆ_ty≥
(
ex¥
) \

68 
	`__tgm©h_ªÆ_ty≥_sub
 (
	`__ty≥of__
 ((__ty≥of__ (
ex¥
)) 0), \

69 
	`__Êﬂtög_ty≥
 (
	`__ty≥of__
 (
ex¥
)))

	)

75 
	#__TGMATH_UNARY_REAL_ONLY
(
VÆ
, 
F˘
) \

76 (
	`__exãnsi⁄__
 (( (
VÆ
) ==  () \

77 || 
	`__buûtö_˛assify_ty≥
 (
VÆ
) != 8) \

78 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
	`F˘
 (Val) \

79 : ( (
VÆ
) ==  ()) \

80 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
F˘
##
	`f
 (Val) \

81 : (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
	`__tgml
(
F˘
Ë(VÆ)))

	)

83 
	#__TGMATH_UNARY_REAL_RET_ONLY
(
VÆ
, 
RëTy≥
, 
F˘
) \

84 (
	`__exãnsi⁄__
 (( (
VÆ
) ==  () \

85 || 
	`__buûtö_˛assify_ty≥
 (
VÆ
) != 8) \

86 ? (
RëTy≥
Ë
	`F˘
 (
VÆ
) \

87 : ( (
VÆ
) ==  ()) \

88 ? (
RëTy≥
Ë
F˘
##
	`f
 (
VÆ
) \

89 : (
RëTy≥
Ë
	`__tgml
(
F˘
Ë(
VÆ
)))

	)

91 
	#__TGMATH_BINARY_FIRST_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
F˘
) \

92 (
	`__exãnsi⁄__
 (( (
VÆ1
) ==  () \

93 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8) \

94 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)Ë
	`F˘
 (VÆ1, 
VÆ2
) \

95 : ( (
VÆ1
) ==  ()) \

96 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)Ë
F˘
##
	`f
 (VÆ1, 
VÆ2
) \

97 : (
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)Ë
	`__tgml
(
F˘
Ë(VÆ1, 
VÆ2
)))

	)

99 
	#__TGMATH_BINARY_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
F˘
) \

100 (
	`__exãnsi⁄__
 ((( (
VÆ1
) >  () \

101 ||  (
VÆ2
) >  ()) \

102 && 
	`__buûtö_˛assify_ty≥
 ((
VÆ1
Ë+ (
VÆ2
)) == 8) \

103 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

104 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

105 
	`__tgml
(
F˘
Ë(
VÆ1
, 
VÆ2
) \

106 : ( (
VÆ1
) ==  () \

107 ||  (
VÆ2
) ==  () \

108 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8 \

109 || 
	`__buûtö_˛assify_ty≥
 (
VÆ2
) != 8) \

110 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

111 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

112 
	`F˘
 (
VÆ1
, 
VÆ2
) \

113 : (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

114 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

115 
F˘
##
	`f
 (
VÆ1
, 
VÆ2
)))

	)

117 
	#__TGMATH_TERNARY_FIRST_SECOND_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
VÆ3
, 
F˘
) \

118 (
	`__exãnsi⁄__
 ((( (
VÆ1
) >  () \

119 ||  (
VÆ2
) >  ()) \

120 && 
	`__buûtö_˛assify_ty≥
 ((
VÆ1
Ë+ (
VÆ2
)) == 8) \

121 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

122 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

123 
	`__tgml
(
F˘
Ë(
VÆ1
, 
VÆ2
, 
VÆ3
) \

124 : ( (
VÆ1
) ==  () \

125 ||  (
VÆ2
) ==  () \

126 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8 \

127 || 
	`__buûtö_˛assify_ty≥
 (
VÆ2
) != 8) \

128 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

129 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

130 
	`F˘
 (
VÆ1
, 
VÆ2
, 
VÆ3
) \

131 : (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

132 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

133 
F˘
##
	`f
 (
VÆ1
, 
VÆ2
, 
VÆ3
)))

	)

135 
	#__TGMATH_TERNARY_REAL_ONLY
(
VÆ1
, 
VÆ2
, 
VÆ3
, 
F˘
) \

136 (
	`__exãnsi⁄__
 ((( (
VÆ1
) >  () \

137 ||  (
VÆ2
) >  () \

138 ||  (
VÆ3
) >  ()) \

139 && 
	`__buûtö_˛assify_ty≥
 ((
VÆ1
Ë+ (
VÆ2
Ë+ (
VÆ3
)) \

141 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

142 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0 \

143 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ3
)) 0)) \

144 
	`__tgml
(
F˘
Ë(
VÆ1
, 
VÆ2
, 
VÆ3
) \

145 : ( (
VÆ1
) ==  () \

146 ||  (
VÆ2
) ==  () \

147 ||  (
VÆ3
) ==  () \

148 || 
	`__buûtö_˛assify_ty≥
 (
VÆ1
) != 8 \

149 || 
	`__buûtö_˛assify_ty≥
 (
VÆ2
) != 8 \

150 || 
	`__buûtö_˛assify_ty≥
 (
VÆ3
) != 8) \

151 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

152 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0 \

153 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ3
)) 0)) \

154 
	`F˘
 (
VÆ1
, 
VÆ2
, 
VÆ3
) \

155 : (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

156 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0 \

157 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ3
)) 0)) \

158 
F˘
##
	`f
 (
VÆ1
, 
VÆ2
, 
VÆ3
)))

	)

162 
	#__TGMATH_UNARY_REAL_IMAG
(
VÆ
, 
F˘
, 
Cf˘
) \

163 (
	`__exãnsi⁄__
 (( (
	`__ªÆ__
 (
VÆ
)) ==  () \

164 || 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ
)) != 8) \

165 ? (( (
	`__ªÆ__
 (
VÆ
)) ==  (Val)) \

166 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
	`F˘
 (Val) \

167 : (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
	`Cf˘
 (Val)) \

168 : ( (
	`__ªÆ__
 (
VÆ
)) ==  ()) \

169 ? (( (
	`__ªÆ__
 (
VÆ
)) ==  (Val)) \

170 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
F˘
##
	`f
 (Val) \

171 : (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
Cf˘
##
	`f
 (Val)) \

172 : (( (
	`__ªÆ__
 (
VÆ
)) ==  (Val)) \

173 ? (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
	`__tgml
(
F˘
) (Val) \

174 : (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)Ë
	`__tgml
(
Cf˘
Ë(VÆ))))

	)

176 
	#__TGMATH_UNARY_IMAG
(
VÆ
, 
Cf˘
) \

177 (
	`__exãnsi⁄__
 (( (
	`__ªÆ__
 (
VÆ
)) ==  () \

178 || 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ
)) != 8) \

179 ? (
	`__ty≥of__
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0 \

180 + 
_Com∂ex_I
)Ë
	`Cf˘
 (
VÆ
) \

181 : ( (
	`__ªÆ__
 (
VÆ
)) ==  ()) \

182 ? (
	`__ty≥of__
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0 \

183 + 
_Com∂ex_I
)Ë
Cf˘
##
	`f
 (
VÆ
) \

184 : (
	`__ty≥of__
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0 \

185 + 
_Com∂ex_I
)Ë
	`__tgml
(
Cf˘
Ë(
VÆ
)))

	)

189 
	#__TGMATH_UNARY_REAL_IMAG_RET_REAL
(
VÆ
, 
F˘
, 
Cf˘
) \

190 (
	`__exãnsi⁄__
 (( (
	`__ªÆ__
 (
VÆ
)) ==  () \

191 || 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ
)) != 8) \

192 ? (( (
	`__ªÆ__
 (
VÆ
)) ==  (Val)) \

193 ? (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0))\

194 
	`F˘
 (
VÆ
) \

195 : (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0))\

196 
	`Cf˘
 (
VÆ
)) \

197 : ( (
	`__ªÆ__
 (
VÆ
)) ==  ()) \

198 ? (( (
	`__ªÆ__
 (
VÆ
)) ==  (Val)) \

199 ? (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0))\

200 
F˘
##
	`f
 (
VÆ
) \

201 : (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0))\

202 
Cf˘
##
	`f
 (
VÆ
)) \

203 : (( (
	`__ªÆ__
 (
VÆ
)) ==  (Val)) \

204 ? (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0))\

205 
	`__tgml
(
F˘
Ë(
VÆ
) \

206 : (
	`__ty≥of__
 (
	`__ªÆ__
 (
	`__tgm©h_ªÆ_ty≥
 (
VÆ
)) 0))\

207 
	`__tgml
(
Cf˘
Ë(
VÆ
))))

	)

211 
	#__TGMATH_BINARY_REAL_IMAG
(
VÆ1
, 
VÆ2
, 
F˘
, 
Cf˘
) \

212 (
	`__exãnsi⁄__
 ((( (
	`__ªÆ__
 (
VÆ1
)) >  () \

213 ||  (
	`__ªÆ__
 (
VÆ2
)) >  ()) \

214 && 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ1
) \

215 + 
	`__ªÆ__
 (
VÆ2
)) == 8) \

216 ? (( (
	`__ªÆ__
 (
VÆ1
)) ==  (Val1) \

217 &&  (
	`__ªÆ__
 (
VÆ2
)) ==  (Val2)) \

218 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

219 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

220 
	`__tgml
(
F˘
Ë(
VÆ1
, 
VÆ2
) \

221 : (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

222 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

223 
	`__tgml
(
Cf˘
Ë(
VÆ1
, 
VÆ2
)) \

224 : ( (
	`__ªÆ__
 (
VÆ1
)) ==  () \

225 ||  (
	`__ªÆ__
 (
VÆ2
)) ==  () \

226 || 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ1
)) != 8 \

227 || 
	`__buûtö_˛assify_ty≥
 (
	`__ªÆ__
 (
VÆ2
)) != 8) \

228 ? (( (
	`__ªÆ__
 (
VÆ1
)) ==  (Val1) \

229 &&  (
	`__ªÆ__
 (
VÆ2
)) ==  (Val2)) \

230 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

231 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

232 
	`F˘
 (
VÆ1
, 
VÆ2
) \

233 : (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

234 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

235 
	`Cf˘
 (
VÆ1
, 
VÆ2
)) \

236 : (( (
	`__ªÆ__
 (
VÆ1
)) ==  (Val1) \

237 &&  (
	`__ªÆ__
 (
VÆ2
)) ==  (Val2)) \

238 ? (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

239 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

240 
F˘
##
	`f
 (
VÆ1
, 
VÆ2
) \

241 : (
	`__ty≥of
 ((
	`__tgm©h_ªÆ_ty≥
 (
VÆ1
)) 0 \

242 + (
	`__tgm©h_ªÆ_ty≥
 (
VÆ2
)) 0)) \

243 
Cf˘
##
	`f
 (
VÆ1
, 
VÆ2
))))

	)

255 
	#acos
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
acos
, 
ˇcos
)

	)

257 
	#asö
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
asö
, 
ˇsö
)

	)

259 
	#©™
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
©™
, 
ˇèn
)

	)

261 
	#©™2
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
©™2
)

	)

264 
	#cos
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
cos
, 
ccos
)

	)

266 
	#sö
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
sö
, 
csö
)

	)

268 
	#èn
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
èn
, 
˘™
)

	)

274 
	#acosh
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
acosh
, 
ˇcosh
)

	)

276 
	#asöh
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
asöh
, 
ˇsöh
)

	)

278 
	#©™h
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
©™h
, 
ˇènh
)

	)

281 
	#cosh
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
cosh
, 
ccosh
)

	)

283 
	#söh
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
söh
, 
csöh
)

	)

285 
	#ènh
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
ènh
, 
˘™h
)

	)

291 
	#exp
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
exp
, 
˚xp
)

	)

294 
	#‰exp
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_FIRST_REAL_ONLY
 (VÆ1, VÆ2, 
‰exp
)

	)

297 
	#ldexp
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_FIRST_REAL_ONLY
 (VÆ1, VÆ2, 
ldexp
)

	)

300 
	#log
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
log
, 
˛og
)

	)

303 #ifde‡
__USE_GNU


304 
	#log10
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
log10
, 
__˛og10
)

	)

306 
	#log10
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
log10
)

	)

310 
	#expm1
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
expm1
)

	)

313 
	#log1p
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
log1p
)

	)

316 
	#logb
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
logb
)

	)

319 
	#exp2
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
exp2
)

	)

322 
	#log2
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
log2
)

	)

328 
	#pow
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_IMAG
 (VÆ1, VÆ2, 
pow
, 
˝ow
)

	)

331 
	#sqπ
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG
 (VÆ, 
sqπ
, 
csqπ
)

	)

334 
	#hypŸ
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
hypŸ
)

	)

337 
	#cbπ
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
cbπ
)

	)

343 
	#˚û
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
˚û
)

	)

346 
	#Ábs
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG_RET_REAL
 (VÆ, 
Ábs
, 
ˇbs
)

	)

349 
	#Êo‹
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
Êo‹
)

	)

352 
	#fmod
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fmod
)

	)

356 
	#√¨byöt
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
√¨byöt
)

	)

360 
	#round
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
round
)

	)

364 
	#åunc
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
åunc
)

	)

369 
	#ªmquo
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

370 
	`__TGMATH_TERNARY_FIRST_SECOND_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
VÆ3
, 
ªmquo
)

	)

374 
	#Ãöt
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, , 
Ãöt
)

	)

375 
	#Œröt
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, , 
Œröt
)

	)

379 
	#Ãound
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, , 
Ãound
)

	)

380 
	#Œround
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, , 
Œround
)

	)

384 
	#c›ysign
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
c›ysign
)

	)

387 
	#îf
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
îf
)

	)

388 
	#îfc
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
îfc
)

	)

389 
	#tgamma
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
tgamma
)

	)

390 
	#lgamma
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
lgamma
)

	)

395 
	#röt
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_ONLY
 (VÆ, 
röt
)

	)

398 
	#√xè·î
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
√xè·î
)

	)

399 
	#√xâow¨d
(
VÆ1
, 
VÆ2
) \

400 
	`__TGMATH_BINARY_FIRST_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
√xâow¨d
)

	)

403 
	#ªmaödî
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
ªmaödî
)

	)

406 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


407 
	#sˇlb
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
sˇlb
)

	)

411 
	#sˇlbn
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_FIRST_REAL_ONLY
 (VÆ1, VÆ2, 
sˇlbn
)

	)

414 
	#sˇlb 
(
VÆ1
, 
VÆ2
) \

415 
	`__TGMATH_BINARY_FIRST_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
sˇlb 
)

	)

418 
	#ûogb
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_RET_ONLY
 (VÆ, , 
ûogb
)

	)

422 
	#fdim
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fdim
)

	)

425 
	#fmax
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fmax
)

	)

428 
	#fmö
(
VÆ1
, 
VÆ2
Ë
	`__TGMATH_BINARY_REAL_ONLY
 (VÆ1, VÆ2, 
fmö
)

	)

432 
	#fma
(
VÆ1
, 
VÆ2
, 
VÆ3
) \

433 
	`__TGMATH_TERNARY_REAL_ONLY
 (
VÆ1
, 
VÆ2
, 
VÆ3
, 
fma
)

	)

439 
	#ˇrg
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG_RET_REAL
 (VÆ, 
ˇrg
, c¨g)

	)

442 
	#c⁄j
(
VÆ
Ë
	`__TGMATH_UNARY_IMAG
 (VÆ, 
c⁄j
)

	)

445 
	#˝roj
(
VÆ
Ë
	`__TGMATH_UNARY_IMAG
 (VÆ, 
˝roj
)

	)

451 
	#cimag
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG_RET_REAL
 (VÆ, 
cimag
, cimag)

	)

454 
	#¸ól
(
VÆ
Ë
	`__TGMATH_UNARY_REAL_IMAG_RET_REAL
 (VÆ, 
¸ól
, cªÆ)

	)

	@/usr/include/thread_db.h

20 #i‚de‡
_THREAD_DB_H


21 
	#_THREAD_DB_H
 1

	)

26 
	~<±hªad.h
>

27 
	~<°döt.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/¥ocfs.h
>

35 
	mTD_OK
,

36 
	mTD_ERR
,

37 
	mTD_NOTHR
,

38 
	mTD_NOSV
,

39 
	mTD_NOLWP
,

40 
	mTD_BADPH
,

41 
	mTD_BADTH
,

42 
	mTD_BADSH
,

43 
	mTD_BADTA
,

44 
	mTD_BADKEY
,

45 
	mTD_NOMSG
,

46 
	mTD_NOFPREGS
,

47 
	mTD_NOLIBTHREAD
,

48 
	mTD_NOEVENT
,

49 
	mTD_NOCAPAB
,

50 
	mTD_DBERR
,

51 
	mTD_NOAPLIC
,

52 
	mTD_NOTSD
,

53 
	mTD_MALLOC
,

54 
	mTD_PARTIALREG
,

55 
	mTD_NOXREGS
,

56 
	mTD_TLSDEFER
,

57 
	mTD_NOTALLOC
 = 
TD_TLSDEFER
,

58 
	mTD_VERSION
,

59 
	mTD_NOTLS


60 } 
	ttd_îr_e
;

67 
	mTD_THR_ANY_STATE
,

68 
	mTD_THR_UNKNOWN
,

69 
	mTD_THR_STOPPED
,

70 
	mTD_THR_RUN
,

71 
	mTD_THR_ACTIVE
,

72 
	mTD_THR_ZOMBIE
,

73 
	mTD_THR_SLEEP
,

74 
	mTD_THR_STOPPED_ASLEEP


75 } 
	ttd_thr_°©e_e
;

81 
	mTD_THR_ANY_TYPE
,

82 
	mTD_THR_USER
,

83 
	mTD_THR_SYSTEM


84 } 
	ttd_thr_ty≥_e
;

90 
td_thøgít
 
	ttd_thøgít_t
;

93 
	std_thrh™dÀ


95 
td_thøgít_t
 *
	mth_è_p
;

96 
pßddr_t
 
	mth_unique
;

97 } 
	ttd_thrh™dÀ_t
;

101 
	glök_m≠
;

105 
	#TD_THR_ANY_USER_FLAGS
 0xffffffff

	)

106 
	#TD_THR_LOWEST_PRIORITY
 -20

	)

107 
	#TD_SIGNO_MASK
 
NULL


	)

110 
	#TD_EVENTSIZE
 2

	)

111 
	#BT_UISHIFT
 5

	)

112 
	#BT_NBIPUI
 (1 << 
BT_UISHIFT
Ë

	)

113 
	#BT_UIMASK
 (
BT_NBIPUI
 - 1Ë

	)

116 
	std_thr_evíts


118 
uöt32_t
 
	mevít_bôs
[
TD_EVENTSIZE
];

119 } 
	ttd_thr_evíts_t
;

122 
	#__td_evítmask
(
n
) \

123 (
	`UINT32_C
 (1Ë<< (((
n
Ë- 1Ë& 
BT_UIMASK
))

	)

124 
	#__td_evítw‹d
(
n
) \

125 ((
	`UINT32_C
 ((
n
Ë- 1)Ë>> 
BT_UISHIFT
)

	)

127 
	#td_evít_em±y£t
(
£ç
) \

129 
__i
; \

130 
__i
 = 
TD_EVENTSIZE
; __i > 0; --__i) \

131 (
£ç
)->
evít_bôs
[
__i
 - 1] = 0; \

132 } 0)

	)

134 
	#td_evít_fûl£t
(
£ç
) \

136 
__i
; \

137 
__i
 = 
TD_EVENTSIZE
; __i > 0; --__i) \

138 (
£ç
)->
evít_bôs
[
__i
 - 1] = 
	`UINT32_C
 (0xffffffff); \

139 } 0)

	)

141 
	#td_evít_add£t
(
£ç
, 
n
) \

142 (((
£ç
)->
evít_bôs
[
	`__td_evítw‹d
 (
n
)]Ë|
	`__td_evítmask
 (n))

	)

143 
	#td_evít_dñ£t
(
£ç
, 
n
) \

144 (((
£ç
)->
evít_bôs
[
	`__td_evítw‹d
 (
n
)]Ë&~
	`__td_evítmask
 (n))

	)

145 
	#td_evítismembî
(
£ç
, 
n
) \

146 (
	`__td_evítmask
 (
n
Ë& ((
£ç
)->
evít_bôs
[
	`__td_evítw‹d
 (n)]))

	)

147 #i‡
TD_EVENTSIZE
 == 2

148 
	#td_evíti£m±y
(
£ç
) \

149 (!((
£ç
)->
evít_bôs
[0]Ë&& !((£ç)->evít_bôs[1]))

	)

157 
	mTD_ALL_EVENTS
,

158 
	mTD_EVENT_NONE
 = 
TD_ALL_EVENTS
,

159 
	mTD_READY
,

160 
	mTD_SLEEP
,

161 
	mTD_SWITCHTO
,

162 
	mTD_SWITCHFROM
,

163 
	mTD_LOCK_TRY
,

164 
	mTD_CATCHSIG
,

165 
	mTD_IDLE
,

166 
	mTD_CREATE
,

167 
	mTD_DEATH
,

168 
	mTD_PREEMPT
,

169 
	mTD_PRI_INHERIT
,

170 
	mTD_REAP
,

171 
	mTD_CONCURRENCY
,

172 
	mTD_TIMEOUT
,

173 
	mTD_MIN_EVENT_NUM
 = 
TD_READY
,

174 
	mTD_MAX_EVENT_NUM
 = 
TD_TIMEOUT
,

175 
	mTD_EVENTS_ENABLE
 = 31

176 } 
	ttd_evít_e
;

181 
	mNOTIFY_BPT
,

182 
	mNOTIFY_AUTOBPT
,

184 
	mNOTIFY_SYSCALL


185 } 
	ttd_nŸify_e
;

188 
	std_nŸify


190 
td_nŸify_e
 
	mty≥
;

193 
pßddr_t
 
	mb±addr
;

194 
	msysˇŒno
;

195 } 
	mu
;

196 } 
	ttd_nŸify_t
;

199 
	std_evít_msg


201 
td_evít_e
 
	mevít
;

202 c⁄° 
td_thrh™dÀ_t
 *
	mth_p
;

206 
td_synch™dÀ_t
 *
	msh
;

208 
uöçå_t
 
	md©a
;

209 } 
	mmsg
;

210 } 
	ttd_evít_msg_t
;

215 
td_thr_evíts_t
 
	mevítmask
;

216 
td_evít_e
 
	mevíäum
;

217 *
	mevítd©a
;

218 } 
	ttd_evítbuf_t
;

222 
	std_è_°©s


224 
	m¡hªads
;

225 
	mr_c⁄cuºícy
;

226 
	mƒu¬abÀ_num
;

227 
	mƒu¬abÀ_dí
;

228 
	ma_c⁄cuºícy_num
;

229 
	ma_c⁄cuºícy_dí
;

230 
	m∆wps_num
;

232 
	m∆wps_dí
;

234 
	mnidÀ_num
;

236 
	mnidÀ_dí
;

238 } 
	ttd_è_°©s_t
;

243 
±hªad_t
 
	tthªad_t
;

244 
±hªad_key_t
 
	tthªad_key_t
;

248 
	ttd_thr_ôî_f
 (c⁄° 
	ttd_thrh™dÀ_t
 *, *);

251 
	ttd_key_ôî_f
 (
	tthªad_key_t
, (*) (*), *);

256 
ps_¥och™dÀ
;

260 
	std_thröfo


262 
td_thøgít_t
 *
ti_è_p
;

263 
ti_u£r_Êags
;

264 
thªad_t
 
ti_tid
;

266 *
ti_és
;

267 
pßddr_t
 
ti_°¨tfunc
;

269 
pßddr_t
 
ti_°kba£
;

270 
ti_°ksize
;

271 
pßddr_t
 
ti_ro_¨ó
;

272 
ti_ro_size
;

273 
td_thr_°©e_e
 
ti_°©e
;

274 
ti_db_su•íded
;

275 
td_thr_ty≥_e
 
ti_ty≥
;

277 
öçå_t
 
ti_pc
;

278 
öçå_t
 
ti_•
;

279 
ti_Êags
;

280 
ti_¥i
;

281 
lwpid_t
 
ti_lid
;

282 
sig£t_t
 
ti_sigmask
;

283 
ti_åa˚me
;

285 
ti_¥ìm±Êag
;

286 
ti_púecÊag
;

287 
sig£t_t
 
ti_≥ndög
;

288 
td_thr_evíts_t
 
ti_evíts
;

289 } 
	ttd_thröfo_t
;

296 
td_îr_e
 
	`td_öô
 ();

299 
td_îr_e
 
	`td_log
 ();

302 c⁄° **
	`td_symbﬁ_li°
 ();

305 
td_îr_e
 
	`td_è_√w
 (
ps_¥och™dÀ
 *
__ps
, 
td_thøgít_t
 **
__è
);

308 
td_îr_e
 
	`td_è_dñëe
 (
td_thøgít_t
 *
__è
);

311 
td_îr_e
 
	`td_è_gë_¡hªads
 (c⁄° 
td_thøgít_t
 *
__è
, *
__≈
);

315 
td_îr_e
 
	`td_è_gë_ph
 (c⁄° 
td_thøgít_t
 *
__è
,

316 
ps_¥och™dÀ
 **
__ph
);

320 
td_îr_e
 
	`td_è_m≠_id2thr
 (c⁄° 
td_thøgít_t
 *
__è
, 
±hªad_t
 
__±
,

321 
td_thrh™dÀ_t
 *
__th
);

325 
td_îr_e
 
	`td_è_m≠_lwp2thr
 (c⁄° 
td_thøgít_t
 *
__è
, 
lwpid_t
 
__lwpid
,

326 
td_thrh™dÀ_t
 *
__th
);

331 
td_îr_e
 
	`td_è_thr_ôî
 (c⁄° 
td_thøgít_t
 *
__è
,

332 
td_thr_ôî_f
 *
__ˇŒback
, *
__cbd©a_p
,

333 
td_thr_°©e_e
 
__°©e
, 
__ti_¥i
,

334 
sig£t_t
 *
__ti_sigmask_p
,

335 
__ti_u£r_Êags
);

338 
td_îr_e
 
	`td_è_tsd_ôî
 (c⁄° 
td_thøgít_t
 *
__è
, 
td_key_ôî_f
 *
__ki
,

339 *
__p
);

343 
td_îr_e
 
	`td_è_evít_addr
 (c⁄° 
td_thøgít_t
 *
__è
,

344 
td_evít_e
 
__evít
, 
td_nŸify_t
 *
__±r
);

347 
td_îr_e
 
	`td_è_£t_evít
 (c⁄° 
td_thøgít_t
 *
__è
,

348 
td_thr_evíts_t
 *
__evít
);

351 
td_îr_e
 
	`td_è_˛ór_evít
 (c⁄° 
td_thøgít_t
 *
__è
,

352 
td_thr_evíts_t
 *
__evít
);

355 
td_îr_e
 
	`td_è_evít_gëmsg
 (c⁄° 
td_thøgít_t
 *
__è
,

356 
td_evít_msg_t
 *
__msg
);

360 
td_îr_e
 
	`td_è_£tc⁄cuºícy
 (c⁄° 
td_thøgít_t
 *
__è
, 
__Àvñ
);

364 
td_îr_e
 
	`td_è_íabÀ_°©s
 (c⁄° 
td_thøgít_t
 *
__è
, 
__íabÀ
);

367 
td_îr_e
 
	`td_è_ª£t_°©s
 (c⁄° 
td_thøgít_t
 *
__è
);

370 
td_îr_e
 
	`td_è_gë_°©s
 (c⁄° 
td_thøgít_t
 *
__è
,

371 
td_è_°©s_t
 *
__°©•
);

375 
td_îr_e
 
	`td_thr_vÆid©e
 (c⁄° 
td_thrh™dÀ_t
 *
__th
);

378 
td_îr_e
 
	`td_thr_gë_öfo
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

379 
td_thröfo_t
 *
__öf›
);

382 
td_îr_e
 
	`td_thr_gëÂªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

383 
¥Âªg£t_t
 *
__ªg£t
);

386 
td_îr_e
 
	`td_thr_gëgªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

387 
¥gªg£t_t
 
__gªgs
);

390 
td_îr_e
 
	`td_thr_gëxªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
, *
__xªgs
);

393 
td_îr_e
 
	`td_thr_gëxªgsize
 (c⁄° 
td_thrh™dÀ_t
 *
__th
, *
__sizï
);

396 
td_îr_e
 
	`td_thr_£tÂªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

397 c⁄° 
¥Âªg£t_t
 *
__Âªgs
);

400 
td_îr_e
 
	`td_thr_£tgªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

401 
¥gªg£t_t
 
__gªgs
);

404 
td_îr_e
 
	`td_thr_£txªgs
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

405 c⁄° *
__addr
);

409 
td_îr_e
 
	`td_thr_ésba£
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

410 
__modid
,

411 
pßddr_t
 *
__ba£
);

414 
td_îr_e
 
	`td_thr_és_gë_addr
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

415 
pßddr_t
 
__m≠_addªss
, 
size_t
 
__off£t
,

416 
pßddr_t
 *
__addªss
);

420 
td_îr_e
 
	`td_thr_evít_íabÀ
 (c⁄° 
td_thrh™dÀ_t
 *
__th
, 
__evít
);

423 
td_îr_e
 
	`td_thr_£t_evít
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

424 
td_thr_evíts_t
 *
__evít
);

427 
td_îr_e
 
	`td_thr_˛ór_evít
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

428 
td_thr_evíts_t
 *
__evít
);

431 
td_îr_e
 
	`td_thr_evít_gëmsg
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

432 
td_evít_msg_t
 *
__msg
);

436 
td_îr_e
 
	`td_thr_£çrio
 (c⁄° 
td_thrh™dÀ_t
 *
__th
, 
__¥io
);

440 
td_îr_e
 
	`td_thr_£tsig≥ndög
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

441 
__n
, c⁄° 
sig£t_t
 *
__ss
);

444 
td_îr_e
 
	`td_thr_sig£tmask
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

445 c⁄° 
sig£t_t
 *
__ss
);

449 
td_îr_e
 
	`td_thr_tsd
 (c⁄° 
td_thrh™dÀ_t
 *
__th
,

450 c⁄° 
thªad_key_t
 
__tk
, **
__d©a
);

454 
td_îr_e
 
	`td_thr_dbsu•íd
 (c⁄° 
td_thrh™dÀ_t
 *
__th
);

457 
td_îr_e
 
	`td_thr_dbªsume
 (c⁄° 
td_thrh™dÀ_t
 *
__th
);

	@/usr/include/tic.h

41 #i‚de‡
__TIC_H


42 
	#__TIC_H


	)

44 #ifde‡
__˝lu•lus


48 
	~<cur£s.h
>

78 
	#MAGIC
 0432

	)

80 #unde‡
BYTE


81 
	#BYTE
(
p
,
n
Ë()(’)[n])

	)

83 
	#IS_NEG1
(
p
Ë((
	`BYTE
’,0Ë=0377Ë&& (BYTE’,1Ë=0377))

	)

84 
	#IS_NEG2
(
p
Ë((
	`BYTE
’,0Ë=0376Ë&& (BYTE’,1Ë=0377))

	)

85 
	#LOW_MSB
(
p
Ë(
	`BYTE
’,0Ë+ 256*BYTE’,1))

	)

87 
	#IS_TIC_MAGIC
(
p
Ë(
	`LOW_MSB
’Ë=
MAGIC
)

	)

93 
	#MAX_NAME_SIZE
 512

	)

94 
	#MAX_ENTRY_SIZE
 4096

	)

102 #i‡
HAVE_LONG_FILE_NAMES


103 
	#MAX_ALIAS
 32

	)

105 
	#MAX_ALIAS
 14

	)

109 
	#PRIVATE_INFO
 "%s/.ãrmöfo"

	)

117 
	#MAX_DEBUG_LEVEL
 15

	)

118 
	#DEBUG_LEVEL
(
n
Ë(“Ë<< 
TRACE_SHIFT
)

	)

120 
	#£t_åa˚_Àvñ
(
n
) \

121 
_nc_åacög
 &
	`DEBUG_LEVEL
(
MAX_DEBUG_LEVEL
), \

122 
_nc_åacög
 |
	`DEBUG_LEVEL
(
n
)

	)

124 #ifde‡
TRACE


125 
	#DEBUG
(
n
, 
a
Ëi‡(
_nc_åacög
 >
	`DEBUG_LEVEL
“)Ë
_åa˚f
 
	)
a

127 
	#DEBUG
(
n
, 
a
Ë

	)

130 
NCURSES_EXPORT_VAR
(Ë
_nc_åacög
;

131 
NCURSES_EXPORT
(Ë
_nc_åa˚f
 (*, ...Ë
GCC_PRINTFLIKE
(1,2);

132 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf
 (const *);

133 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf2
 (, const *);

142 
	#BOOLEAN
 0

	)

143 
	#NUMBER
 1

	)

144 
	#STRING
 2

	)

145 
	#CANCEL
 3

	)

146 
	#NAMES
 4

	)

147 
	#UNDEF
 5

	)

149 
	#NO_PUSHBACK
 -1

	)

157 
	stokí


159 *
	gtk_«me
;

160 
	gtk_vÆnumbî
;

161 *
	gtk_vÆ°rög
;

164 
NCURSES_EXPORT_VAR
(
tokí
Ë
_nc_cuº_tokí
;

170 
	stöfo_fkeys
 {

171 
	goff£t
;

172 
chty≥
 
	gcode
;

175 #if 
BROKEN_LINKER


177 
	#_nc_töfo_fkeys
 
	`_nc_töfo_fkeysf
()

	)

178 
NCURSES_EXPORT
(c⁄° 
töfo_fkeys
 *Ë
_nc_töfo_fkeysf
 ();

182 
NCURSES_EXPORT_VAR
(c⁄° 
töfo_fkeys
Ë
_nc_töfo_fkeys
[];

186 
	tHashVÆue
;

194 
	s«me_èbÀ_íåy


196 c⁄° *
	g¡e_«me
;

197 
	g¡e_ty≥
;

198 
HashVÆue
 
	g¡e_ödex
;

199 
HashVÆue
 
	g¡e_lök
;

207 
	gèbÀ_size
;

208 c⁄° 
HashVÆue
 *
	gèbÀ_d©a
;

209 
HashVÆue
 (*
hash_of
)(const *);

210 (*
	gcom∑ª_«mes
)(const *, const *);

211 } 
	tHashD©a
;

213 
	sÆüs


215 c⁄° *
	g‰om
;

216 c⁄° *
	gto
;

217 c⁄° *
	gsour˚
;

220 
NCURSES_EXPORT
(c⁄° 
«me_èbÀ_íåy
 *Ë
_nc_gë_èbÀ
 (
boﬁ
);

221 
NCURSES_EXPORT
(c⁄° 
HashD©a
 *Ë
_nc_gë_hash_öfo
 (
boﬁ
);

222 
NCURSES_EXPORT
(c⁄° 
HashVÆue
 *Ë
_nc_gë_hash_èbÀ
 (
boﬁ
);

223 
NCURSES_EXPORT
(c⁄° 
Æüs
 *Ë
_nc_gë_Æüs_èbÀ
 (
boﬁ
);

225 
	#NOTFOUND
 ((
«me_èbÀ_íåy
 *Ë0)

	)

228 
	#ABSENT_BOOLEAN
 ((sig√d )-1Ë

	)

229 
	#ABSENT_NUMERIC
 (-1)

	)

230 
	#ABSENT_STRING
 (*)0

	)

233 
	#CANCELLED_BOOLEAN
 ((sig√d )-2Ë

	)

234 
	#CANCELLED_NUMERIC
 (-2)

	)

235 
	#CANCELLED_STRING
 (*)(-1)

	)

237 
	#VALID_BOOLEAN
(
s
Ë(()(sË<1Ë

	)

238 
	#VALID_NUMERIC
(
s
Ë((sË>0)

	)

239 
	#VALID_STRING
(
s
Ë((sË!
CANCELLED_STRING
 && (sË!
ABSENT_STRING
)

	)

242 
	#MAX_TERMCAP_LENGTH
 1023

	)

245 
	#MAX_TERMINFO_LENGTH
 4096

	)

247 #i‚de‡
TERMINFO


248 
	#TERMINFO
 "/u§/sh¨e/ãrmöfo"

	)

252 
NCURSES_EXPORT
(Ë
_nc_∑thœ°
 (const *);

253 
NCURSES_EXPORT
(
boﬁ
Ë
_nc_is_abs_∑th
 (const *);

254 
NCURSES_EXPORT
(
boﬁ
Ë
_nc_is_dú_∑th
 (const *);

255 
NCURSES_EXPORT
(
boﬁ
Ë
_nc_is_fûe_∑th
 (const *);

256 
NCURSES_EXPORT
(*Ë
_nc_ba£«me
 (*);

257 
NCURSES_EXPORT
(*Ë
_nc_roŸ«me
 (*);

260 
NCURSES_EXPORT
(
«me_èbÀ_íåy
 c⁄° *Ë
_nc_föd_íåy


261 (c⁄° *, c⁄° 
HashVÆue
 *);

262 
NCURSES_EXPORT
(
«me_èbÀ_íåy
 c⁄° *Ë
_nc_föd_ty≥_íåy


263 (c⁄° *, , 
boﬁ
);

266 
NCURSES_EXPORT
(Ë
_nc_gë_tokí
 (
boﬁ
);

267 
NCURSES_EXPORT
(Ë
_nc_∑nic_mode
 ();

268 
NCURSES_EXPORT
(Ë
_nc_push_tokí
 ();

269 
NCURSES_EXPORT
(Ë
_nc_ª£t_öput
 (
FILE
 *, *);

270 
NCURSES_EXPORT_VAR
(Ë
_nc_cuº_cﬁ
;

271 
NCURSES_EXPORT_VAR
(Ë
_nc_cuº_löe
;

272 
NCURSES_EXPORT_VAR
(Ë
_nc_sy¡ax
;

273 
NCURSES_EXPORT_VAR
(Ë
_nc_commít_íd
;

274 
NCURSES_EXPORT_VAR
(Ë
_nc_commít_°¨t
;

275 
NCURSES_EXPORT_VAR
(Ë
_nc_cuº_fûe_pos
;

276 
NCURSES_EXPORT_VAR
(Ë
_nc_°¨t_löe
;

277 
	#SYN_TERMINFO
 0

	)

278 
	#SYN_TERMCAP
 1

	)

281 
NCURSES_EXPORT
(c⁄° *Ë
_nc_gë_sour˚
 ();

282 
NCURSES_EXPORT
(Ë
_nc_îr_ab‹t
 (c⁄° *c⁄°,...Ë
GCC_PRINTFLIKE
(1,2Ë
GCC_NORETURN
;

283 
NCURSES_EXPORT
(Ë
_nc_gë_ty≥
 (*
«me
);

284 
NCURSES_EXPORT
(Ë
_nc_£t_sour˚
 (const *const);

285 
NCURSES_EXPORT
(Ë
_nc_£t_ty≥
 (const *const);

286 
NCURSES_EXPORT
(Ë
_nc_sy£º_ab‹t
 (c⁄° *c⁄°,...Ë
GCC_PRINTFLIKE
(1,2Ë
GCC_NORETURN
;

287 
NCURSES_EXPORT
(Ë
_nc_w¨nög
 (c⁄° *c⁄°,...Ë
GCC_PRINTFLIKE
(1,2);

288 
NCURSES_EXPORT_VAR
(
boﬁ
Ë
_nc_suµªss_w¨nögs
;

291 
NCURSES_EXPORT
(*Ë
_nc_tic_ex∑nd
 (c⁄° *, 
boﬁ
, );

294 
NCURSES_EXPORT
(Ë
_nc_å™s_°rög
 (*, *);

297 
NCURSES_EXPORT
(*Ë
_nc_ˇ±oöfo
 (const *, const *, const);

298 
NCURSES_EXPORT
(*Ë
_nc_öfŸoˇp
 (const *, const *, const);

301 
NCURSES_EXPORT
(*Ë
_nc_home_ãrmöfo
 ();

304 
	#NUM_PARM
 9

	)

306 
NCURSES_EXPORT_VAR
(Ë
_nc_ç¨m_îr
;

308 
NCURSES_EXPORT
(Ë
_nc_ç¨m_™Æyze
(const *, **, *);

311 
NCURSES_EXPORT_VAR
(Ë
_nc_nuŒs_£¡
;

314 c⁄° * 
_nc_¥og«me
;

318 
	gdbdTIC
 = 0,

319 #i‡
USE_DATABASE


320 
	gdbdEnvOn˚
,

321 
	gdbdHome
,

322 
	gdbdEnvLi°
,

323 
	gdbdCfgLi°
,

324 
	gdbdCfgOn˚
,

326 #i‡
USE_TERMCAP


327 
	gdbdEnvOn˚2
,

328 
	gdbdEnvLi°2
,

329 
	gdbdCfgLi°2
,

331 
	gdbdLAST


332 } 
	tDBDIRS
;

334 
NCURSES_EXPORT
(c⁄° *Ë
_nc_√xt_db
(
DBDIRS
 *, *);

335 
NCURSES_EXPORT
(c⁄° *Ë
_nc_tic_dú
 (const *);

336 
NCURSES_EXPORT
(Ë
_nc_fú°_db
(
DBDIRS
 *, *);

337 
NCURSES_EXPORT
(Ë
_nc_œ°_db
();

340 
NCURSES_EXPORT
(Ë
_nc_tic_wrôãn
 ();

342 #ifde‡
__˝lu•lus


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/ttyent.h

32 #i‚def 
_TTYENT_H


33 
	#_TTYENT_H
 1

	)

35 
	~<„©uªs.h
>

37 
	#_PATH_TTYS
 "/ëc/âys"

	)

39 
	#_TTYS_OFF
 "off"

	)

40 
	#_TTYS_ON
 "⁄"

	)

41 
	#_TTYS_SECURE
 "£cuª"

	)

42 
	#_TTYS_WINDOW
 "wödow"

	)

44 
	sâyít
 {

45 *
	mty_«me
;

46 *
	mty_gëty
;

47 *
	mty_ty≥
;

48 
	#TTY_ON
 0x01

	)

49 
	#TTY_SECURE
 0x02

	)

50 
	mty_°©us
;

51 *
	mty_wödow
;

52 *
	mty_commít
;

56 
__BEGIN_DECLS


58 
âyít
 *
	$gëâyít
 (Ë
__THROW
;

59 
âyít
 *
	$gëây«m
 (
__c⁄°
 *
__ây
Ë
__THROW
;

60 
	$£âtyít
 (Ë
__THROW
;

61 
	$ídâyít
 (Ë
__THROW
;

63 
__END_DECLS


	@/usr/include/ucontext.h

21 #i‚de‡
_UCONTEXT_H


22 
	#_UCONTEXT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<sys/uc⁄ãxt.h
>

29 
__BEGIN_DECLS


32 
	$gëc⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

35 
	$£tc⁄ãxt
 (
__c⁄°
 
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

39 
	$sw≠c⁄ãxt
 (
uc⁄ãxt_t
 *
__ª°ri˘
 
__ou˝
,

40 
__c⁄°
 
uc⁄ãxt_t
 *
__ª°ri˘
 
__u˝
Ë
__THROWNL
;

48 
	`makec⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
, (*
__func
) (),

49 
__¨gc
, ...Ë
__THROW
;

51 
__END_DECLS


	@/usr/include/ulimit.h

19 #i‚de‡
_ULIMIT_H


20 
	#_ULIMIT_H
 1

	)

22 
	~<„©uªs.h
>

28 
	mUL_GETFSIZE
 = 1,

30 
	#UL_GETFSIZE
 
UL_GETFSIZE


	)

31 
	mUL_SETFSIZE
,

33 
	#UL_SETFSIZE
 
UL_SETFSIZE


	)

34 
	m__UL_GETMAXBRK
,

36 
	m__UL_GETOPENMAX


41 
__BEGIN_DECLS


44 
	$ulimô
 (
__cmd
, ...Ë
__THROW
;

46 
__END_DECLS


	@/usr/include/unctrl.h

44 #i‚de‡
NCURSES_UNCTRL_H_ö˛


45 
	#NCURSES_UNCTRL_H_ö˛
 1

	)

47 #unde‡
NCURSES_VERSION


48 
	#NCURSES_VERSION
 "5.9"

	)

50 #ifde‡
__˝lu•lus


54 
	~<cur£s.h
>

56 #unde‡
un˘æ


57 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
un˘æ
 (
chty≥
);

60 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
un˘æ
Ë(
SCREEN
*, 
chty≥
);

63 #ifde‡
__˝lu•lus


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/ustat.h

1 
	~<sys/u°©.h
>

	@/usr/include/utime.h

23 #i‚def 
_UTIME_H


24 
	#_UTIME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

34 
	~<time.h
>

38 
	sutimbuf


40 
__time_t
 
	ma˘ime
;

41 
__time_t
 
	mmodtime
;

46 
	$utime
 (
__c⁄°
 *
__fûe
,

47 
__c⁄°
 
utimbuf
 *
__fûe_times
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1));

50 
__END_DECLS


	@/usr/include/utmp.h

19 #i‚def 
_UTMP_H


20 
	#_UTMP_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

27 
	g__BEGIN_DECLS


30 
	~<bôs/utmp.h
>

33 
	#UTMP_FILE
 
_PATH_UTMP


	)

34 
	#UTMP_FILENAME
 
_PATH_UTMP


	)

35 
	#WTMP_FILE
 
_PATH_WTMP


	)

36 
	#WTMP_FILENAME
 
_PATH_WTMP


	)

42 
	$logö_ây
 (
__fd
Ë
__THROW
;

46 
	$logö
 (
__c⁄°
 
utmp
 *
__íåy
Ë
__THROW
;

49 
	$logout
 (
__c⁄°
 *
__ut_löe
Ë
__THROW
;

52 
	$logwtmp
 (
__c⁄°
 *
__ut_löe
, __c⁄° *
__ut_«me
,

53 
__c⁄°
 *
__ut_ho°
Ë
__THROW
;

56 
	$updwtmp
 (
__c⁄°
 *
__wtmp_fûe
, __c⁄° 
utmp
 *
__utmp
)

57 
__THROW
;

60 
	$utm≤ame
 (
__c⁄°
 *
__fûe
Ë
__THROW
;

63 
utmp
 *
	$gëuã¡
 (Ë
__THROW
;

66 
	$£tuã¡
 (Ë
__THROW
;

69 
	$íduã¡
 (Ë
__THROW
;

73 
utmp
 *
	$gëutid
 (
__c⁄°
 
utmp
 *
__id
Ë
__THROW
;

77 
utmp
 *
	$gëuéöe
 (
__c⁄°
 
utmp
 *
__löe
Ë
__THROW
;

80 
utmp
 *
	$putuéöe
 (
__c⁄°
 
utmp
 *
__utmp_±r
Ë
__THROW
;

83 #ifdef 
__USE_MISC


85 
	$gëuã¡_r
 (
utmp
 *
__buf„r
, utm∞**
__ªsu…
Ë
__THROW
;

87 
	$gëutid_r
 (
__c⁄°
 
utmp
 *
__id
, utm∞*
__buf„r
,

88 
utmp
 **
__ªsu…
Ë
__THROW
;

90 
	$gëuéöe_r
 (
__c⁄°
 
utmp
 *
__löe
,

91 
utmp
 *
__buf„r
, utm∞**
__ªsu…
Ë
__THROW
;

95 
__END_DECLS


	@/usr/include/utmpx.h

19 #i‚def 
_UTMPX_H


20 
	#_UTMPX_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/time.h
>

26 #i‚de‡
__pid_t_deföed


27 
__pid_t
 
	tpid_t
;

28 
	#__pid_t_deföed


	)

32 
	~<bôs/utmpx.h
>

34 #ifde‡
__USE_GNU


36 
	#UTMPX_FILE
 
_PATH_UTMPX


	)

37 
	#UTMPX_FILENAME
 
_PATH_UTMPX


	)

38 
	#WTMPX_FILE
 
_PATH_WTMPX


	)

39 
	#WTMPX_FILENAME
 
_PATH_WTMPX


	)

43 #ifde‡
__USE_GNU


44 
	gutmp
;

48 
__BEGIN_DECLS


54 
£tutxít
 ();

60 
ídutxít
 ();

66 
utmpx
 *
gëutxít
 ();

72 
utmpx
 *
gëutxid
 (
__c⁄°
 utmpx *
__id
);

78 
utmpx
 *
gëutxlöe
 (
__c⁄°
 utmpx *
__löe
);

84 
utmpx
 *
pututxlöe
 (
__c⁄°
 utmpx *
__utmpx
);

87 #ifde‡
__USE_GNU


94 
utmpx«me
 (
__c⁄°
 *
__fûe
);

102 
updwtmpx
 (
__c⁄°
 *
__wtmpx_fûe
,

103 
__c⁄°
 
utmpx
 *
__utmpx
);

112 
gëutmp
 (
__c⁄°
 
utmpx
 *
__utmpx
,

113 
utmp
 *
__utmp
);

121 
gëutmpx
 (
__c⁄°
 
utmp
 *
__utmp
,

122 
utmpx
 *
__utmpx
);

125 
	g__END_DECLS


	@/usr/include/values.h

23 #i‚def 
_VALUES_H


24 
	#_VALUES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<limôs.h
>

30 
	#_TYPEBITS
(
ty≥
Ë( (ty≥Ë* 
CHAR_BIT
)

	)

32 
	#CHARBITS
 
	`_TYPEBITS
 ()

	)

33 
	#SHORTBITS
 
	`_TYPEBITS
 ()

	)

34 
	#INTBITS
 
	`_TYPEBITS
 ()

	)

35 
	#LONGBITS
 
	`_TYPEBITS
 ()

	)

36 
	#PTRBITS
 
	`_TYPEBITS
 (*)

	)

37 
	#DOUBLEBITS
 
	`_TYPEBITS
 ()

	)

38 
	#FLOATBITS
 
	`_TYPEBITS
 ()

	)

40 
	#MINSHORT
 
SHRT_MIN


	)

41 
	#MININT
 
INT_MIN


	)

42 
	#MINLONG
 
LONG_MIN


	)

44 
	#MAXSHORT
 
SHRT_MAX


	)

45 
	#MAXINT
 
INT_MAX


	)

46 
	#MAXLONG
 
LONG_MAX


	)

48 
	#HIBITS
 
MINSHORT


	)

49 
	#HIBITL
 
MINLONG


	)

52 
	~<Êﬂt.h
>

54 
	#MAXDOUBLE
 
DBL_MAX


	)

55 
	#MAXFLOAT
 
FLT_MAX


	)

56 
	#MINDOUBLE
 
DBL_MIN


	)

57 
	#MINFLOAT
 
FLT_MIN


	)

58 
	#DMINEXP
 
DBL_MIN_EXP


	)

59 
	#FMINEXP
 
FLT_MIN_EXP


	)

60 
	#DMAXEXP
 
DBL_MAX_EXP


	)

61 
	#FMAXEXP
 
FLT_MAX_EXP


	)

64 #ifde‡
__USE_MISC


66 
	#BITSPERBYTE
 
CHAR_BIT


	)

	@/usr/include/wait.h

1 
	~<sys/waô.h
>

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/wordexp.h

19 #i‚def 
_WORDEXP_H


20 
	#_WORDEXP_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
__BEGIN_DECLS


31 
	mWRDE_DOOFFS
 = (1 << 0),

32 
	mWRDE_APPEND
 = (1 << 1),

33 
	mWRDE_NOCMD
 = (1 << 2),

34 
	mWRDE_REUSE
 = (1 << 3),

35 
	mWRDE_SHOWERR
 = (1 << 4),

36 
	mWRDE_UNDEF
 = (1 << 5),

37 
	m__WRDE_FLAGS
 = (
WRDE_DOOFFS
 | 
WRDE_APPEND
 | 
WRDE_NOCMD
 |

38 
WRDE_REUSE
 | 
WRDE_SHOWERR
 | 
WRDE_UNDEF
)

44 
size_t
 
	mwe_w‹dc
;

45 **
	mwe_w‹dv
;

46 
size_t
 
	mwe_offs
;

47 } 
	tw‹dexp_t
;

52 #ifde‡
__USE_XOPEN


53 
	mWRDE_NOSYS
 = -1,

55 
	mWRDE_NOSPACE
 = 1,

56 
	mWRDE_BADCHAR
,

57 
	mWRDE_BADVAL
,

58 
	mWRDE_CMDSUB
,

59 
	mWRDE_SYNTAX


63 
w‹dexp
 (
__c⁄°
 *
__ª°ri˘
 
__w‹ds
,

64 
w‹dexp_t
 *
__ª°ri˘
 
__pw‹dexp
, 
__Êags
);

67 
	$w‹d‰ì
 (
w‹dexp_t
 *
__w‹dexp
Ë
__THROW
;

69 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


20 
	#_di°_code
 
z__di°_code


	)

21 
	#_Àngth_code
 
z__Àngth_code


	)

22 
	#_å_Æign
 
z__å_Æign


	)

23 
	#_å_Êush_block
 
z__å_Êush_block


	)

24 
	#_å_öô
 
z__å_öô


	)

25 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

26 
	#_å_èŒy
 
z__å_èŒy


	)

27 
	#adÀr32
 
z_adÀr32


	)

28 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

29 
	#com¥ess
 
z_com¥ess


	)

30 
	#com¥ess2
 
z_com¥ess2


	)

31 
	#com¥essBound
 
z_com¥essBound


	)

32 
	#¸c32
 
z_¸c32


	)

33 
	#¸c32_comböe
 
z_¸c32_comböe


	)

34 
	#deÊ©e
 
z_deÊ©e


	)

35 
	#deÊ©eBound
 
z_deÊ©eBound


	)

36 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

37 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

38 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

39 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

40 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

41 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

42 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

43 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

44 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

45 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

46 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

47 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

48 
	#gz˛óªº
 
z_gz˛óªº


	)

49 
	#gz˛o£
 
z_gz˛o£


	)

50 
	#gzdúe˘
 
z_gzdúe˘


	)

51 
	#gzd›í
 
z_gzd›í


	)

52 
	#gzeof
 
z_gzeof


	)

53 
	#gzîr‹
 
z_gzîr‹


	)

54 
	#gzÊush
 
z_gzÊush


	)

55 
	#gzgëc
 
z_gzgëc


	)

56 
	#gzgës
 
z_gzgës


	)

57 
	#gz›í
 
z_gz›í


	)

58 
	#gz¥ötf
 
z_gz¥ötf


	)

59 
	#gzputc
 
z_gzputc


	)

60 
	#gzputs
 
z_gzputs


	)

61 
	#gzªad
 
z_gzªad


	)

62 
	#gzªwöd
 
z_gzªwöd


	)

63 
	#gz£ek
 
z_gz£ek


	)

64 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

65 
	#gzãŒ
 
z_gzãŒ


	)

66 
	#gzungëc
 
z_gzungëc


	)

67 
	#gzwrôe
 
z_gzwrôe


	)

68 
	#öÊ©e
 
z_öÊ©e


	)

69 
	#öÊ©eBack
 
z_öÊ©eBack


	)

70 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

71 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

72 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

73 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

74 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

75 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

76 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

77 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

78 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

79 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

80 
	#öÊ©eSync
 
z_öÊ©eSync


	)

81 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

82 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

83 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

84 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

85 
	#uncom¥ess
 
z_uncom¥ess


	)

86 
	#zEº‹
 
z_zEº‹


	)

87 
	#z_îrmsg
 
z_z_îrmsg


	)

88 
	#zˇŒoc
 
z_zˇŒoc


	)

89 
	#zc‰ì
 
z_zc‰ì


	)

90 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

91 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

94 
	#Byã
 
z_Byã


	)

95 
	#Byãf
 
z_Byãf


	)

96 
	#Æloc_func
 
z_Æloc_func


	)

97 
	#ch¨f
 
z_ch¨f


	)

98 
	#‰ì_func
 
z_‰ì_func


	)

99 
	#gzFûe
 
z_gzFûe


	)

100 
	#gz_hódî
 
z_gz_hódî


	)

101 
	#gz_hódîp
 
z_gz_hódîp


	)

102 
	#ö_func
 
z_ö_func


	)

103 
	#ötf
 
z_ötf


	)

104 
	#out_func
 
z_out_func


	)

105 
	#uI¡
 
z_uI¡


	)

106 
	#uI¡f
 
z_uI¡f


	)

107 
	#uL⁄g
 
z_uL⁄g


	)

108 
	#uL⁄gf
 
z_uL⁄gf


	)

109 
	#voidp
 
z_voidp


	)

110 
	#voidp
 
z_voidp


	)

111 
	#voidpc
 
z_voidpc


	)

112 
	#voidpc
 
z_voidpc


	)

113 
	#voidpf
 
z_voidpf


	)

114 
	#voidpf
 
z_voidpf


	)

115 
	#z_°ªam
 
z_z_°ªam


	)

116 
	#z_°ªamp
 
z_z_°ªamp


	)

119 
	#gz_hódî_s
 
z_gz_hódî_s


	)

120 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

121 
	#z_°ªam_s
 
z_z_°ªam_s


	)

125 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

126 
	#MSDOS


	)

128 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

129 
	#OS2


	)

131 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

132 
	#WINDOWS


	)

134 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

135 #i‚de‡
WIN32


136 
	#WIN32


	)

139 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

140 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

141 #i‚de‡
SYS16BIT


142 
	#SYS16BIT


	)

151 #ifde‡
SYS16BIT


152 
	#MAXSEG_64K


	)

154 #ifde‡
MSDOS


155 
	#UNALIGNED_OK


	)

158 #ifde‡
__STDC_VERSION__


159 #i‚de‡
STDC


160 
	#STDC


	)

162 #i‡
__STDC_VERSION__
 >= 199901L

163 #i‚de‡
STDC99


164 
	#STDC99


	)

168 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

169 
	#STDC


	)

171 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

172 
	#STDC


	)

174 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

175 
	#STDC


	)

177 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

178 
	#STDC


	)

181 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

182 
	#STDC


	)

185 #i‚de‡
STDC


187 c⁄°

	)

192 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

193 
	#NO_DUMMY_DECL


	)

197 #i‚de‡
MAX_MEM_LEVEL


198 #ifde‡
MAXSEG_64K


199 
	#MAX_MEM_LEVEL
 8

	)

201 
	#MAX_MEM_LEVEL
 9

	)

210 #i‚de‡
MAX_WBITS


211 
	#MAX_WBITS
 15

	)

229 #i‚de‡
OF


230 #ifde‡
STDC


231 
	#OF
(
¨gs
Ë
	)
args

233 
	#OF
(
¨gs
Ë()

	)

243 #ifde‡
SYS16BIT


244 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

246 
	#SMALL_MEDIUM


	)

247 #ifde‡
_MSC_VER


248 
	#FAR
 
_Ár


	)

250 
	#FAR
 
Ár


	)

253 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

255 
	#SMALL_MEDIUM


	)

256 #ifde‡
__BORLANDC__


257 
	#FAR
 
_Ár


	)

259 
	#FAR
 
Ár


	)

264 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

268 #ifde‡
ZLIB_DLL


269 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

270 #ifde‡
ZLIB_INTERNAL


271 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

273 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

281 #ifde‡
ZLIB_WINAPI


282 #ifde‡
FAR


283 #unde‡
FAR


285 
	~<wödows.h
>

288 
	#ZEXPORT
 
WINAPI


	)

289 #ifde‡
WIN32


290 
	#ZEXPORTVA
 
WINAPIV


	)

292 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

297 #i‡
deföed
 (
__BEOS__
)

298 #ifde‡
ZLIB_DLL


299 #ifde‡
ZLIB_INTERNAL


300 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

301 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

303 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

304 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

309 #ifde‡
HAVE_VISIBILITY_PRAGMA


310 
	#ZEXTERN
 
	`__©åibuã__
((
	`visibûôy
 ("deÁu…"))Ë

	)

313 #i‚de‡
ZEXTERN


314 
	#ZEXTERN
 

	)

316 #i‚de‡
ZEXPORT


317 
	#ZEXPORT


	)

319 #i‚de‡
ZEXPORTVA


320 
	#ZEXPORTVA


	)

323 #i‚de‡
FAR


324 
	#FAR


	)

327 #i‡!
deföed
(
__MACTYPES__
)

328 
	tByã
;

330 
	tuI¡
;

331 
	tuL⁄g
;

333 #ifde‡
SMALL_MEDIUM


335 
	#Byãf
 
Byã
 
FAR


	)

337 
Byã
 
	tFAR
 
	tByãf
;

339 
	tFAR
 
	tch¨f
;

340 
	tFAR
 
	tötf
;

341 
uI¡
 
	tFAR
 
	tuI¡f
;

342 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

344 #ifde‡
STDC


345 c⁄° *
	tvoidpc
;

346 
	tFAR
 *
	tvoidpf
;

347 *
	tvoidp
;

349 
Byã
 c⁄° *
	tvoidpc
;

350 
Byã
 
	tFAR
 *
	tvoidpf
;

351 
Byã
 *
	tvoidp
;

354 
	~"zlibdefs.h
"

356 #ifde‡
_LARGEFILE64_SOURCE


357 
	~<sys/ty≥s.h
>

360 #i‚de‡
SEEK_SET


361 
	#SEEK_SET
 0

	)

362 
	#SEEK_CUR
 1

	)

363 
	#SEEK_END
 2

	)

365 #i‚de‡
z_off_t


366 
	#z_off_t
 

	)

369 #i‡
deföed
(
__OS400__
)

370 
	#NO_v¢¥ötf


	)

373 #i‡
deföed
(
__MVS__
)

374 
	#NO_v¢¥ötf


	)

378 #i‡
deföed
(
__MVS__
)

379 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

380 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

381 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

382 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

383 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

384 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

385 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

386 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

387 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

388 #¥agm®
m≠
(
com¥essBound
,"CMBND")

389 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

390 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

391 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.3.4"

	)

41 
	#ZLIB_VERNUM
 0x1234

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 3

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

165 
	#Z_NO_FLUSH
 0

	)

166 
	#Z_PARTIAL_FLUSH
 1

	)

167 
	#Z_SYNC_FLUSH
 2

	)

168 
	#Z_FULL_FLUSH
 3

	)

169 
	#Z_FINISH
 4

	)

170 
	#Z_BLOCK
 5

	)

171 
	#Z_TREES
 6

	)

174 
	#Z_OK
 0

	)

175 
	#Z_STREAM_END
 1

	)

176 
	#Z_NEED_DICT
 2

	)

177 
	#Z_ERRNO
 (-1)

	)

178 
	#Z_STREAM_ERROR
 (-2)

	)

179 
	#Z_DATA_ERROR
 (-3)

	)

180 
	#Z_MEM_ERROR
 (-4)

	)

181 
	#Z_BUF_ERROR
 (-5)

	)

182 
	#Z_VERSION_ERROR
 (-6)

	)

187 
	#Z_NO_COMPRESSION
 0

	)

188 
	#Z_BEST_SPEED
 1

	)

189 
	#Z_BEST_COMPRESSION
 9

	)

190 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

193 
	#Z_FILTERED
 1

	)

194 
	#Z_HUFFMAN_ONLY
 2

	)

195 
	#Z_RLE
 3

	)

196 
	#Z_FIXED
 4

	)

197 
	#Z_DEFAULT_STRATEGY
 0

	)

200 
	#Z_BINARY
 0

	)

201 
	#Z_TEXT
 1

	)

202 
	#Z_ASCII
 
Z_TEXT


	)

203 
	#Z_UNKNOWN
 2

	)

206 
	#Z_DEFLATED
 8

	)

209 
	#Z_NULL
 0

	)

211 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

351 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

390 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

498 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

574 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

575 c⁄° 
Byãf
 *
di˘i⁄¨y
,

576 
uI¡
 
di˘Lígth
));

613 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

614 
z_°ªamp
 
sour˚
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

642 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

643 
Àvñ
,

644 
°øãgy
));

663 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

664 
good_Àngth
,

665 
max_œzy
,

666 
ni˚_Àngth
,

667 
max_chaö
));

680 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

681 
uL⁄g
 
sour˚Lí
));

690 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

691 
bôs
,

692 
vÆue
));

706 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

707 
gz_hódîp
 
hód
));

777 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

778 c⁄° 
Byãf
 *
di˘i⁄¨y
,

779 
uI¡
 
di˘Lígth
));

799 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

814 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

815 
z_°ªamp
 
sour˚
));

830 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

840 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

841 
wödowBôs
));

852 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

853 
bôs
,

854 
vÆue
));

873 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

901 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

902 
gz_hódîp
 
hód
));

963 (*
ö_func
Ë
	tOF
((
	tFAR
 *, FAR * FAR *));

964 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

966 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

967 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

968 
out_func
 
out
, 
FAR
 *
out_desc
));

1035 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1043 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1095 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1096 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1110 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1111 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1112 
Àvñ
));

1126 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1133 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1134 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1152 
voidp
 
	tgzFûe
;

1172 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1185 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1193 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1201 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1202 
voidpc
 
buf
, 
Àn
));

1209 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1222 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1229 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1238 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1244 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1250 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1260 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1289 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1306 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1312 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1318 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1326 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1338 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1353 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1379 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1411 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1412 c⁄° *
vîsi⁄
, 
°ªam_size
));

1413 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1414 c⁄° *
vîsi⁄
, 
°ªam_size
));

1415 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1416 
wödowBôs
, 
memLevñ
,

1417 
°øãgy
, c⁄° *
vîsi⁄
,

1418 
°ªam_size
));

1419 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1420 c⁄° *
vîsi⁄
, 
°ªam_size
));

1421 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1422 
FAR
 *
wödow
,

1423 c⁄° *
vîsi⁄
,

1424 
°ªam_size
));

1425 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1426 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1427 
	#öÊ©eInô
(
°rm
) \

1428 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1429 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1430 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1431 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1432 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1433 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1434 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1435 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1436 
ZLIB_VERSION
, (
z_°ªam
))

	)

1438 #i‡
deföed
(
_LARGEFILE64_SOURCE
)

1439 
	#z_off64_t
 
off64_t


	)

1441 #i‡
_FILE_OFFSET_BITS
 == 64

1442 
	#z_off64_t
 
off_t


	)

1446 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë|| 
_FILE_OFFSET_BITS
 == 64

1447 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1448 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1449 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1450 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1451 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1454 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& 
_FILE_OFFSET_BITS
 == 64

1455 
	#gz›í
 
gz›í64


	)

1456 
	#gz£ek
 
gz£ek64


	)

1457 
	#gzãŒ
 
gzãŒ64


	)

1458 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1459 
	#¸c32_comböe
 
¸c32_comböe64


	)

1460 #i‚de‡
_LARGEFILE64_SOURCE


1461 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1462 
ZEXTERN
 
off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, off_t, ));

1463 
ZEXTERN
 
off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1464 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off_t
));

1465 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off_t
));

1468 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1469 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1470 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1471 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1472 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1475 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1476 
	söã∫Æ_°©e
 {
dummy
;};

1479 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1480 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1481 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1482 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1484 #ifde‡
__˝lu•lus


	@/usr/include/zlibdefs.h

6 
	~<sys/ty≥s.h
>

7 
	~<uni°d.h
>

8 #ifde‡
VMS


9 
	~<unixio.h
>

11 #i‚de‡
z_off_t


12 
	#z_off_t
 
off_t


	)

	@/usr/include/arpa/nameser.h

52 #i‚de‡
_ARPA_NAMESER_H_


53 
	#_ARPA_NAMESER_H_


	)

57 
	#BIND_4_COMPAT


	)

59 
	~<sys/∑øm.h
>

60 #i‡(!
deföed
(
BSD
)) || (BSD < 199306)

61 
	~<sys/bôy≥s.h
>

63 
	~<sys/ty≥s.h
>

65 
	~<sys/cdefs.h
>

75 
	#__NAMESER
 19991006

	)

79 
	#NS_PACKETSZ
 512

	)

80 
	#NS_MAXDNAME
 1025

	)

81 
	#NS_MAXMSG
 65535

	)

82 
	#NS_MAXCDNAME
 255

	)

83 
	#NS_MAXLABEL
 63

	)

84 
	#NS_HFIXEDSZ
 12

	)

85 
	#NS_QFIXEDSZ
 4

	)

86 
	#NS_RRFIXEDSZ
 10

	)

87 
	#NS_INT32SZ
 4

	)

88 
	#NS_INT16SZ
 2

	)

89 
	#NS_INT8SZ
 1

	)

90 
	#NS_INADDRSZ
 4

	)

91 
	#NS_IN6ADDRSZ
 16

	)

92 
	#NS_CMPRSFLGS
 0xc0

	)

93 
	#NS_DEFAULTPORT
 53

	)

98 
	e__ns_£˘
 {

99 
	mns_s_qd
 = 0,

100 
	mns_s_zn
 = 0,

101 
	mns_s_™
 = 1,

102 
	mns_s_¥
 = 1,

103 
	mns_s_ns
 = 2,

104 
	mns_s_ud
 = 2,

105 
	mns_s_¨
 = 3,

106 
	mns_s_max
 = 4

107 } 
	tns_£˘
;

114 
	s__ns_msg
 {

115 c⁄° 
u_ch¨
 *
	m_msg
, *
	m_eom
;

116 
u_öt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

117 c⁄° 
u_ch¨
 *
	m_£˘i⁄s
[
ns_s_max
];

118 
ns_£˘
 
	m_£˘
;

119 
	m_ºnum
;

120 c⁄° 
u_ch¨
 *
	m_msg_±r
;

121 } 
	tns_msg
;

124 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

125 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

129 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

130 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

131 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

132 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

133 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

138 
	s__ns_º
 {

139 
	m«me
[
NS_MAXDNAME
];

140 
u_öt16_t
 
	mty≥
;

141 
u_öt16_t
 
	mº_˛ass
;

142 
u_öt32_t
 
	mâl
;

143 
u_öt16_t
 
	mrdÀngth
;

144 c⁄° 
u_ch¨
 * 
	mrd©a
;

145 } 
	tns_º
;

148 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

149 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

150 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

151 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

152 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

153 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

160 
	e__ns_Êag
 {

161 
	mns_f_qr
,

162 
	mns_f_›code
,

163 
	mns_f_Ø
,

164 
	mns_f_tc
,

165 
	mns_f_rd
,

166 
	mns_f_ø
,

167 
	mns_f_z
,

168 
	mns_f_ad
,

169 
	mns_f_cd
,

170 
	mns_f_rcode
,

171 
	mns_f_max


172 } 
	tns_Êag
;

177 
	e__ns_›code
 {

178 
	mns_o_quîy
 = 0,

179 
	mns_o_iquîy
 = 1,

180 
	mns_o_°©us
 = 2,

182 
	mns_o_nŸify
 = 4,

183 
	mns_o_upd©e
 = 5,

184 
	mns_o_max
 = 6

185 } 
	tns_›code
;

190 
	e__ns_rcode
 {

191 
	mns_r_n€º‹
 = 0,

192 
	mns_r_f‹mîr
 = 1,

193 
	mns_r_£rvÁû
 = 2,

194 
	mns_r_nxdomaö
 = 3,

195 
	mns_r_nŸim∂
 = 4,

196 
	mns_r_ªfu£d
 = 5,

198 
	mns_r_yxdomaö
 = 6,

199 
	mns_r_yxº£t
 = 7,

200 
	mns_r_nxº£t
 = 8,

201 
	mns_r_nŸauth
 = 9,

202 
	mns_r_nŸz⁄e
 = 10,

203 
	mns_r_max
 = 11,

205 
	mns_r_badvîs
 = 16,

207 
	mns_r_badsig
 = 16,

208 
	mns_r_badkey
 = 17,

209 
	mns_r_badtime
 = 18

210 } 
	tns_rcode
;

213 
	e__ns_upd©e_›î©i⁄
 {

214 
	mns_u›_dñëe
 = 0,

215 
	mns_u›_add
 = 1,

216 
	mns_u›_max
 = 2

217 } 
	tns_upd©e_›î©i⁄
;

222 
	sns_tsig_key
 {

223 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

224 *
	md©a
;

225 
	mÀn
;

227 
ns_tsig_key
 
	tns_tsig_key
;

232 
	sns_t˝_tsig_°©e
 {

233 
	mcou¡î
;

234 
d°_key
 *
	mkey
;

235 *
	m˘x
;

236 
	msig
[
NS_PACKETSZ
];

237 
	msigÀn
;

239 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

241 
	#NS_TSIG_FUDGE
 300

	)

242 
	#NS_TSIG_TCP_COUNT
 100

	)

243 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

245 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

246 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

247 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

252 
	e__ns_ty≥
 {

253 
	mns_t_övÆid
 = 0,

254 
	mns_t_a
 = 1,

255 
	mns_t_ns
 = 2,

256 
	mns_t_md
 = 3,

257 
	mns_t_mf
 = 4,

258 
	mns_t_˙ame
 = 5,

259 
	mns_t_sﬂ
 = 6,

260 
	mns_t_mb
 = 7,

261 
	mns_t_mg
 = 8,

262 
	mns_t_mr
 = 9,

263 
	mns_t_nuŒ
 = 10,

264 
	mns_t_wks
 = 11,

265 
	mns_t_±r
 = 12,

266 
	mns_t_höfo
 = 13,

267 
	mns_t_möfo
 = 14,

268 
	mns_t_mx
 = 15,

269 
	mns_t_txt
 = 16,

270 
	mns_t_Ω
 = 17,

271 
	mns_t_afsdb
 = 18,

272 
	mns_t_x25
 = 19,

273 
	mns_t_isdn
 = 20,

274 
	mns_t_π
 = 21,

275 
	mns_t_nßp
 = 22,

276 
	mns_t_nßp_±r
 = 23,

277 
	mns_t_sig
 = 24,

278 
	mns_t_key
 = 25,

279 
	mns_t_px
 = 26,

280 
	mns_t_gpos
 = 27,

281 
	mns_t_ØØ
 = 28,

282 
	mns_t_loc
 = 29,

283 
	mns_t_nxt
 = 30,

284 
	mns_t_eid
 = 31,

285 
	mns_t_nimloc
 = 32,

286 
	mns_t_§v
 = 33,

287 
	mns_t_©ma
 = 34,

288 
	mns_t_«±r
 = 35,

289 
	mns_t_kx
 = 36,

290 
	mns_t_˚π
 = 37,

291 
	mns_t_a6
 = 38,

292 
	mns_t_d«me
 = 39,

293 
	mns_t_sök
 = 40,

294 
	mns_t_›t
 = 41,

295 
	mns_t_≠l
 = 42,

296 
	mns_t_tkey
 = 249,

297 
	mns_t_tsig
 = 250,

298 
	mns_t_ix‰
 = 251,

299 
	mns_t_ax‰
 = 252,

300 
	mns_t_maûb
 = 253,

301 
	mns_t_maûa
 = 254,

302 
	mns_t_™y
 = 255,

303 
	mns_t_zx‰
 = 256,

304 
	mns_t_max
 = 65536

305 } 
	tns_ty≥
;

308 
	#ns_t_qt_p
(
t
Ë(
	`ns_t_x‰_p
—Ë|| (tË=
ns_t_™y
 || \

309 (
t
Ë=
ns_t_maûb
 || (tË=
ns_t_maûa
)

	)

311 
	#ns_t_mº_p
(
t
Ë(—Ë=
ns_t_tsig
 || (tË=
ns_t_›t
)

	)

313 
	#ns_t_º_p
(
t
Ë(!
	`ns_t_qt_p
—Ë&& !
	`ns_t_mº_p
—))

	)

314 
	#ns_t_udp_p
(
t
Ë(—Ë!
ns_t_ax‰
 && (tË!
ns_t_zx‰
)

	)

315 
	#ns_t_x‰_p
(
t
Ë(—Ë=
ns_t_ax‰
 || (tË=
ns_t_ix‰
 || \

316 (
t
Ë=
ns_t_zx‰
)

	)

321 
	e__ns_˛ass
 {

322 
	mns_c_övÆid
 = 0,

323 
	mns_c_ö
 = 1,

324 
	mns_c_2
 = 2,

325 
	mns_c_chaos
 = 3,

326 
	mns_c_hs
 = 4,

328 
	mns_c_n⁄e
 = 254,

329 
	mns_c_™y
 = 255,

330 
	mns_c_max
 = 65536

331 } 
	tns_˛ass
;

335 
	e__ns_key_ty≥s
 {

336 
	mns_kt_rß
 = 1,

337 
	mns_kt_dh
 = 2,

338 
	mns_kt_dß
 = 3,

339 
	mns_kt_¥iv©e
 = 254

340 } 
	tns_key_ty≥s
;

342 
	e__ns_˚π_ty≥s
 {

343 
	m˚π_t_pkix
 = 1,

344 
	m˚π_t_•ki
 = 2,

345 
	m˚π_t_pgp
 = 3,

346 
	m˚π_t_uæ
 = 253,

347 
	m˚π_t_oid
 = 254

348 } 
	tns_˚π_ty≥s
;

351 
	#NS_KEY_TYPEMASK
 0xC000

	)

352 
	#NS_KEY_TYPE_AUTH_CONF
 0x0000

	)

353 
	#NS_KEY_TYPE_CONF_ONLY
 0x8000

	)

354 
	#NS_KEY_TYPE_AUTH_ONLY
 0x4000

	)

355 
	#NS_KEY_TYPE_NO_KEY
 0xC000

	)

357 
	#NS_KEY_NO_AUTH
 0x8000

	)

358 
	#NS_KEY_NO_CONF
 0x4000

	)

359 
	#NS_KEY_RESERVED2
 0x2000

	)

360 
	#NS_KEY_EXTENDED_FLAGS
 0x1000

	)

361 
	#NS_KEY_RESERVED4
 0x0800

	)

362 
	#NS_KEY_RESERVED5
 0x0400

	)

363 
	#NS_KEY_NAME_TYPE
 0x0300

	)

364 
	#NS_KEY_NAME_USER
 0x0000

	)

365 
	#NS_KEY_NAME_ENTITY
 0x0200

	)

366 
	#NS_KEY_NAME_ZONE
 0x0100

	)

367 
	#NS_KEY_NAME_RESERVED
 0x0300

	)

368 
	#NS_KEY_RESERVED8
 0x0080

	)

369 
	#NS_KEY_RESERVED9
 0x0040

	)

370 
	#NS_KEY_RESERVED10
 0x0020

	)

371 
	#NS_KEY_RESERVED11
 0x0010

	)

372 
	#NS_KEY_SIGNATORYMASK
 0x000F

	)

373 
	#NS_KEY_RESERVED_BITMASK
 ( 
NS_KEY_RESERVED2
 | \

374 
NS_KEY_RESERVED4
 | \

375 
NS_KEY_RESERVED5
 | \

376 
NS_KEY_RESERVED8
 | \

377 
NS_KEY_RESERVED9
 | \

378 
NS_KEY_RESERVED10
 | \

379 
NS_KEY_RESERVED11
 )

	)

380 
	#NS_KEY_RESERVED_BITMASK2
 0xFFFF

	)

382 
	#NS_ALG_MD5RSA
 1

	)

383 
	#NS_ALG_DH
 2

	)

384 
	#NS_ALG_DSA
 3

	)

385 
	#NS_ALG_DSS
 
NS_ALG_DSA


	)

386 
	#NS_ALG_EXPIRE_ONLY
 253

	)

387 
	#NS_ALG_PRIVATE_OID
 254

	)

390 
	#NS_KEY_PROT_TLS
 1

	)

391 
	#NS_KEY_PROT_EMAIL
 2

	)

392 
	#NS_KEY_PROT_DNSSEC
 3

	)

393 
	#NS_KEY_PROT_IPSEC
 4

	)

394 
	#NS_KEY_PROT_ANY
 255

	)

397 
	#NS_MD5RSA_MIN_BITS
 512

	)

398 
	#NS_MD5RSA_MAX_BITS
 4096

	)

400 
	#NS_MD5RSA_MAX_BYTES
 ((
NS_MD5RSA_MAX_BITS
+7/8)*2+3)

	)

402 
	#NS_MD5RSA_MAX_BASE64
 (((
NS_MD5RSA_MAX_BYTES
+2)/3)*4)

	)

403 
	#NS_MD5RSA_MIN_SIZE
 ((
NS_MD5RSA_MIN_BITS
+7)/8)

	)

404 
	#NS_MD5RSA_MAX_SIZE
 ((
NS_MD5RSA_MAX_BITS
+7)/8)

	)

406 
	#NS_DSA_SIG_SIZE
 41

	)

407 
	#NS_DSA_MIN_SIZE
 213

	)

408 
	#NS_DSA_MAX_BYTES
 405

	)

411 
	#NS_SIG_TYPE
 0

	)

412 
	#NS_SIG_ALG
 2

	)

413 
	#NS_SIG_LABELS
 3

	)

414 
	#NS_SIG_OTTL
 4

	)

415 
	#NS_SIG_EXPIR
 8

	)

416 
	#NS_SIG_SIGNED
 12

	)

417 
	#NS_SIG_FOOT
 16

	)

418 
	#NS_SIG_SIGNER
 18

	)

420 
	#NS_NXT_BITS
 8

	)

421 
	#NS_NXT_BIT_SET
–
n
,
p
Ë’[“)/
NS_NXT_BITS
] |(0x80>>(“)%NS_NXT_BITS)))

	)

422 
	#NS_NXT_BIT_CLEAR
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] &~(0x80>>(“)%NS_NXT_BITS)))

	)

423 
	#NS_NXT_BIT_ISSET
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] & (0x80>>(“)%NS_NXT_BITS)))

	)

424 
	#NS_NXT_MAX
 127

	)

429 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

430 
	#NS_OPT_NSID
 3

	)

435 
	#NS_GET16
(
s
, 
˝
) do { \

436 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

437 (
s
Ë((
u_öt16_t
)
t_˝
[0] << 8) \

438 | ((
u_öt16_t
)
t_˝
[1]) \

440 (
˝
Ë+
NS_INT16SZ
; \

441 } 0)

	)

443 
	#NS_GET32
(
l
, 
˝
) do { \

444 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

445 (
l
Ë((
u_öt32_t
)
t_˝
[0] << 24) \

446 | ((
u_öt32_t
)
t_˝
[1] << 16) \

447 | ((
u_öt32_t
)
t_˝
[2] << 8) \

448 | ((
u_öt32_t
)
t_˝
[3]) \

450 (
˝
Ë+
NS_INT32SZ
; \

451 } 0)

	)

453 
	#NS_PUT16
(
s
, 
˝
) do { \

454 
u_öt16_t
 
t_s
 = (u_öt16_t)(
s
); \

455 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

456 *
t_˝
++ = 
t_s
 >> 8; \

457 *
t_˝
 = 
t_s
; \

458 (
˝
Ë+
NS_INT16SZ
; \

459 } 0)

	)

461 
	#NS_PUT32
(
l
, 
˝
) do { \

462 
u_öt32_t
 
t_l
 = (u_öt32_t)(
l
); \

463 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

464 *
t_˝
++ = 
t_l
 >> 24; \

465 *
t_˝
++ = 
t_l
 >> 16; \

466 *
t_˝
++ = 
t_l
 >> 8; \

467 *
t_˝
 = 
t_l
; \

468 (
˝
Ë+
NS_INT32SZ
; \

469 } 0)

	)

471 
__BEGIN_DECLS


472 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

473 
u_öt
 
	$ns_gë16
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

474 
u_l⁄g
 
	$ns_gë32
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

475 
	$ns_put16
 (
u_öt
, 
u_ch¨
 *Ë
__THROW
;

476 
	$ns_put32
 (
u_l⁄g
, 
u_ch¨
 *Ë
__THROW
;

477 
	$ns_öô∑r£
 (c⁄° 
u_ch¨
 *, , 
ns_msg
 *Ë
__THROW
;

478 
	$ns_skùº
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
ns_£˘
, )

479 
__THROW
;

480 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

481 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

482 c⁄° *, c⁄° *, *, 
size_t
)

483 
__THROW
;

484 
	$ns_•röårf
 (c⁄° 
u_ch¨
 *, 
size_t
, const *,

485 
ns_˛ass
, 
ns_ty≥
, 
u_l⁄g
, c⁄° 
u_ch¨
 *,

486 
size_t
, const *, const *,

487 *, 
size_t
Ë
__THROW
;

488 
	$ns_f‹m©_âl
 (
u_l⁄g
, *, 
size_t
Ë
__THROW
;

489 
	$ns_∑r£_âl
 (c⁄° *, 
u_l⁄g
 *Ë
__THROW
;

490 
u_öt32_t
 
	$ns_d©ëo£cs
 (c⁄° *, *Ë
__THROW
;

491 
	$ns_«me_¡ﬁ
 (c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

492 
	$ns_«me_¡›
 (c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

493 
	$ns_«me_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

494 
	$ns_«me_u≈ack
 (c⁄° 
u_ch¨
 *, const u_char *,

495 c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

496 
	$ns_«me_∑ck
 (c⁄° 
u_ch¨
 *, u_char *, ,

497 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

498 
	$ns_«me_uncom¥ess
 (c⁄° 
u_ch¨
 *, const u_char *,

499 c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

500 
	$ns_«me_com¥ess
 (c⁄° *, 
u_ch¨
 *, 
size_t
,

501 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

502 
	$ns_«me_skù
 (c⁄° 
u_ch¨
 **, c⁄° u_ch¨ *Ë
__THROW
;

503 
	$ns_«me_rﬁlback
 (c⁄° 
u_ch¨
 *, const u_char **,

504 c⁄° 
u_ch¨
 **Ë
__THROW
;

505 
	$ns_sign
 (
u_ch¨
 *, *, , , *,

506 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
Ë
__THROW
;

507 
	$ns_sign2
 (
u_ch¨
 *, *, , , *,

508 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
,

509 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

510 
	$ns_sign_t˝
 (
u_ch¨
 *, *, , ,

511 
ns_t˝_tsig_°©e
 *, Ë
__THROW
;

512 
	$ns_sign_t˝2
 (
u_ch¨
 *, *, , ,

513 
ns_t˝_tsig_°©e
 *, ,

514 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

515 
	$ns_sign_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

516 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

517 
u_ch¨
 *
	$ns_föd_tsig
 (
u_ch¨
 *, u_ch¨ *Ë
__THROW
;

518 
	$ns_vîify
 (
u_ch¨
 *, *, *, const u_char *, ,

519 
u_ch¨
 *, *, 
time_t
 *, Ë
__THROW
;

520 
	$ns_vîify_t˝
 (
u_ch¨
 *, *, 
ns_t˝_tsig_°©e
 *, )

521 
__THROW
;

522 
	$ns_vîify_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

523 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

524 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

525 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

526 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

527 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW
;

528 
__END_DECLS


530 #ifde‡
BIND_4_COMPAT


531 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/arpa/nameser_compat.h

34 #i‚de‡
_ARPA_NAMESER_COMPAT_


35 
	#_ARPA_NAMESER_COMPAT_


	)

37 
	#__BIND
 19950621

	)

39 
	~<ídün.h
>

49 
	mid
 :16;

50 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


52 
	mqr
: 1;

53 
	m›code
: 4;

54 
	mØ
: 1;

55 
	mtc
: 1;

56 
	mrd
: 1;

58 
	mø
: 1;

59 
	munu£d
 :1;

60 
	mad
: 1;

61 
	mcd
: 1;

62 
	mrcode
 :4;

64 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN
 || BYTE_ORDER =
PDP_ENDIAN


66 
	mrd
 :1;

67 
	mtc
 :1;

68 
	mØ
 :1;

69 
	m›code
 :4;

70 
	mqr
 :1;

72 
	mrcode
 :4;

73 
	mcd
: 1;

74 
	mad
: 1;

75 
	munu£d
 :1;

76 
	mø
 :1;

79 
	mqdcou¡
 :16;

80 
	m™cou¡
 :16;

81 
	mnscou¡
 :16;

82 
	m¨cou¡
 :16;

83 } 
	tHEADER
;

85 
	#PACKETSZ
 
NS_PACKETSZ


	)

86 
	#MAXDNAME
 
NS_MAXDNAME


	)

87 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

88 
	#MAXLABEL
 
NS_MAXLABEL


	)

89 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

90 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

91 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

92 
	#INT32SZ
 
NS_INT32SZ


	)

93 
	#INT16SZ
 
NS_INT16SZ


	)

94 
	#INT8SZ
 
NS_INT8SZ


	)

95 
	#INADDRSZ
 
NS_INADDRSZ


	)

96 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

97 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

98 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

100 
	#S_ZONE
 
ns_s_zn


	)

101 
	#S_PREREQ
 
ns_s_¥


	)

102 
	#S_UPDATE
 
ns_s_ud


	)

103 
	#S_ADDT
 
ns_s_¨


	)

105 
	#QUERY
 
ns_o_quîy


	)

106 
	#IQUERY
 
ns_o_iquîy


	)

107 
	#STATUS
 
ns_o_°©us


	)

108 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

109 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

111 
	#NOERROR
 
ns_r_n€º‹


	)

112 
	#FORMERR
 
ns_r_f‹mîr


	)

113 
	#SERVFAIL
 
ns_r_£rvÁû


	)

114 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

115 
	#NOTIMP
 
ns_r_nŸim∂


	)

116 
	#REFUSED
 
ns_r_ªfu£d


	)

117 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

118 
	#YXRRSET
 
ns_r_yxº£t


	)

119 
	#NXRRSET
 
ns_r_nxº£t


	)

120 
	#NOTAUTH
 
ns_r_nŸauth


	)

121 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

127 
	#DELETE
 
ns_u›_dñëe


	)

128 
	#ADD
 
ns_u›_add


	)

130 
	#T_A
 
ns_t_a


	)

131 
	#T_NS
 
ns_t_ns


	)

132 
	#T_MD
 
ns_t_md


	)

133 
	#T_MF
 
ns_t_mf


	)

134 
	#T_CNAME
 
ns_t_˙ame


	)

135 
	#T_SOA
 
ns_t_sﬂ


	)

136 
	#T_MB
 
ns_t_mb


	)

137 
	#T_MG
 
ns_t_mg


	)

138 
	#T_MR
 
ns_t_mr


	)

139 
	#T_NULL
 
ns_t_nuŒ


	)

140 
	#T_WKS
 
ns_t_wks


	)

141 
	#T_PTR
 
ns_t_±r


	)

142 
	#T_HINFO
 
ns_t_höfo


	)

143 
	#T_MINFO
 
ns_t_möfo


	)

144 
	#T_MX
 
ns_t_mx


	)

145 
	#T_TXT
 
ns_t_txt


	)

146 
	#T_RP
 
ns_t_Ω


	)

147 
	#T_AFSDB
 
ns_t_afsdb


	)

148 
	#T_X25
 
ns_t_x25


	)

149 
	#T_ISDN
 
ns_t_isdn


	)

150 
	#T_RT
 
ns_t_π


	)

151 
	#T_NSAP
 
ns_t_nßp


	)

152 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

153 
	#T_SIG
 
ns_t_sig


	)

154 
	#T_KEY
 
ns_t_key


	)

155 
	#T_PX
 
ns_t_px


	)

156 
	#T_GPOS
 
ns_t_gpos


	)

157 
	#T_AAAA
 
ns_t_ØØ


	)

158 
	#T_LOC
 
ns_t_loc


	)

159 
	#T_NXT
 
ns_t_nxt


	)

160 
	#T_EID
 
ns_t_eid


	)

161 
	#T_NIMLOC
 
ns_t_nimloc


	)

162 
	#T_SRV
 
ns_t_§v


	)

163 
	#T_ATMA
 
ns_t_©ma


	)

164 
	#T_NAPTR
 
ns_t_«±r


	)

165 
	#T_A6
 
ns_t_a6


	)

166 
	#T_DNAME
 
ns_t_d«me


	)

167 
	#T_TSIG
 
ns_t_tsig


	)

168 
	#T_IXFR
 
ns_t_ix‰


	)

169 
	#T_AXFR
 
ns_t_ax‰


	)

170 
	#T_MAILB
 
ns_t_maûb


	)

171 
	#T_MAILA
 
ns_t_maûa


	)

172 
	#T_ANY
 
ns_t_™y


	)

174 
	#C_IN
 
ns_c_ö


	)

175 
	#C_CHAOS
 
ns_c_chaos


	)

176 
	#C_HS
 
ns_c_hs


	)

178 
	#C_NONE
 
ns_c_n⁄e


	)

179 
	#C_ANY
 
ns_c_™y


	)

181 
	#GETSHORT
 
NS_GET16


	)

182 
	#GETLONG
 
NS_GET32


	)

183 
	#PUTSHORT
 
NS_PUT16


	)

184 
	#PUTLONG
 
NS_PUT32


	)

	@
1
.
1
/usr/include
152
3400
/usr/include/FlexLexer.h
/usr/include/_G_config.h
/usr/include/a.out.h
/usr/include/aio.h
/usr/include/aliases.h
/usr/include/alloca.h
/usr/include/ar.h
/usr/include/argp.h
/usr/include/argz.h
/usr/include/assert.h
/usr/include/autosprintf.h
/usr/include/byteswap.h
/usr/include/complex.h
/usr/include/cpio.h
/usr/include/crypt.h
/usr/include/ctype.h
/usr/include/curses.h
/usr/include/cursesapp.h
/usr/include/cursesf.h
/usr/include/cursesm.h
/usr/include/cursesp.h
/usr/include/cursesw.h
/usr/include/cursslk.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/elf.h
/usr/include/endian.h
/usr/include/envz.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/error.h
/usr/include/eti.h
/usr/include/etip.h
/usr/include/execinfo.h
/usr/include/expat.h
/usr/include/expat_config.h
/usr/include/expat_external.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/fenv.h
/usr/include/fmtmsg.h
/usr/include/fnmatch.h
/usr/include/form.h
/usr/include/fstab.h
/usr/include/ft2build.h
/usr/include/fts.h
/usr/include/ftw.h
/usr/include/gconv.h
/usr/include/getopt.h
/usr/include/gettext-po.h
/usr/include/glob.h
/usr/include/gnu-versions.h
/usr/include/grp.h
/usr/include/gshadow.h
/usr/include/iconv.h
/usr/include/ieee754.h
/usr/include/ifaddrs.h
/usr/include/inttypes.h
/usr/include/langinfo.h
/usr/include/lastlog.h
/usr/include/libgen.h
/usr/include/libintl.h
/usr/include/libio.h
/usr/include/limits.h
/usr/include/link.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/mcheck.h
/usr/include/memory.h
/usr/include/menu.h
/usr/include/mntent.h
/usr/include/monetary.h
/usr/include/mqueue.h
/usr/include/nc_tparm.h
/usr/include/ncurses_dll.h
/usr/include/netdb.h
/usr/include/nl_types.h
/usr/include/nss.h
/usr/include/obstack.h
/usr/include/panel.h
/usr/include/paths.h
/usr/include/pcre.h
/usr/include/pcre_scanner.h
/usr/include/pcre_stringpiece.h
/usr/include/pcrecpp.h
/usr/include/pcrecpparg.h
/usr/include/pcreposix.h
/usr/include/poll.h
/usr/include/printf.h
/usr/include/pthread.h
/usr/include/pty.h
/usr/include/pwd.h
/usr/include/re_comp.h
/usr/include/regex.h
/usr/include/regexp.h
/usr/include/resolv.h
/usr/include/sched.h
/usr/include/search.h
/usr/include/semaphore.h
/usr/include/setjmp.h
/usr/include/sgtty.h
/usr/include/shadow.h
/usr/include/signal.h
/usr/include/spawn.h
/usr/include/sqlite3.h
/usr/include/sqlite3ext.h
/usr/include/stab.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdio_ext.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/stropts.h
/usr/include/sudo_plugin.h
/usr/include/syscall.h
/usr/include/sysexits.h
/usr/include/syslog.h
/usr/include/tags
/usr/include/tar.h
/usr/include/term.h
/usr/include/term_entry.h
/usr/include/termcap.h
/usr/include/termio.h
/usr/include/termios.h
/usr/include/tgmath.h
/usr/include/thread_db.h
/usr/include/tic.h
/usr/include/time.h
/usr/include/ttyent.h
/usr/include/ucontext.h
/usr/include/ulimit.h
/usr/include/unctrl.h
/usr/include/unistd.h
/usr/include/ustat.h
/usr/include/utime.h
/usr/include/utmp.h
/usr/include/utmpx.h
/usr/include/values.h
/usr/include/wait.h
/usr/include/wchar.h
/usr/include/wctype.h
/usr/include/wordexp.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/zlib.h
/usr/include/zlibdefs.h
/usr/include/arpa/nameser.h
/usr/include/netinet/in.h
/usr/include/rpc/netdb.h
/usr/include/arpa/nameser_compat.h
