1. by Bruce Fields
GDB Tricks

When you encounter an OOPS, you'll get a Call trace like:

Call Trace:

[<ffffffff8110a3ef>] kfree+0x63/0xfc
[<ffffffffa011e18e>] nfs_free_parsed_mount_data+0x24/0xc1 [nfs]
[<ffffffffa0121743>] nfs_fs_mount+0x5ac/0x61c [nfs]
[<ffffffff81116a8d>] mount_fs+0x69/0x158
[<ffffffff810ea5ad>] ? __alloc_percpu+0x10/0x12
[<ffffffff8112b8a8>] vfs_kern_mount+0x65/0xc4
[<ffffffff8112bf07>] do_kern_mount+0x4d/0xdf
[<ffffffff8112d6b7>] do_mount+0x64b/0x6af
[<ffffffff8112cfd0>] ? copy_mount_options+0xcb/0x12e
[<ffffffff8112d81e>] sys_mount+0x88/0xc2
[<ffffffff81426be9>] system_call_fastpath+0x16/0x1b

There is a simple way to translate a <symbol>/<offset> to a line number:

    run gdb passing the correct kernel module (.ko) as the only argument
    or  run gdb passing the vmlinux as the only argument.
    use the "l * (<symbol>+<offset>)" command 


$ gdb obj/fs/nfs/nfs.ko 

...

(gdb) l * (nfs_free_parsed_mount_data+0x24)
0x918e is in nfs_free_parsed_mount_data (/home/dros/build/src/fs/nfs/super.c:924).
919	
920	static void nfs_free_parsed_mount_data(struct nfs_parsed_mount_data *data)
921	{
922		if (data) {
923			kfree(data->client_address);
924			kfree(data->mount_server.hostname);
925			kfree(data->nfs_server.export_path);
926			kfree(data->nfs_server.hostname);
927			kfree(data->fscache_uniq);
928			security_free_mnt_opts(&data->lsm_opts);


2. crash
crash> bt -F
PID: 385    TASK: ffff8802300ff1c0  CPU: 0   COMMAND: "kworker/0:1H"
    [exception RIP: xfs_dir3_block_read_verify+47]
    RIP: ffffffffa01b434f  RSP: ffff88022f59fdb0  RFLAGS: 00010246
    RAX: 0000000000000000  RBX: ffff8800448be100  RCX: dead000000200200
    RDX: ffffffffa01ef260  RSI: 0d00000000000000  RDI: ffff8800448be100
    RBP: ffff88022f59fdd8   R8: ffff8800448be1a8   R9: dffe75d0be0be1a0
    R10: dffe75d0be0be1a0  R11: 0000000000000400  R12: ffff8800448be100
    R13: ffff880237214280  R14: ffff88023721c200  R15: 0000000000000020
    CS: 0010  SS: 0018
...
crash> gdb list *xfs_dir3_block_read_verify+47
0xffffffffa01b43ef is in xfs_dir3_block_read_verify (fs/xfs/xfs_sb.h:630).
625     /*
626      * V5 superblock specific feature checks
627      */
628     static inline int xfs_sb_version_hascrc(xfs_sb_t *sbp)
629     {
630             return XFS_SB_VERSION_NUM(sbp) == XFS_SB_VERSION_5;
631     }
632
crash> dis xfs_dir3_block_read_verify+47
0xffffffffa01b434f <xfs_dir3_block_read_verify+47>:     movzwl 0x7c(%rax),%eax
sh> p *((struct xfs_buf *) 0xffff8800448be100)
...
  b_target = 0xffff88012fa3b440,
...
  b_ops = 0xffffffffa01ef250 <xfs_dir3_block_buf_ops>
}
crash> p *((struct xfs_buf *) 0xffff8800448be100)->b_target
$75 = {
  bt_dev = 2,
  bt_bdev = 0x0,
  bt_bdi = 0x0,
  bt_mount = 0x0,
  bt_meta_sectorsize = 0,
  bt_meta_sectormask = 0,
  bt_logical_sectorsize = 137438953471,
  bt_logical_sectormask = 137438953471,
  bt_shrinker = {
    shrink = 0x1fffffffff,
    seeks = 0,
    batch = 0,
    list = {
      next = 0x0,
      prev = 0x0
    },
    nr_in_batch = {
      counter = 0
    }
  },
  bt_lru = {
    next = 0xffff880180fce880,
    prev = 0xffffffff8193a2a0 <root_user>
  },
  bt_lru_lock = {
    {
      rlock = {
        raw_lock = {
          {
            head_tail = 2173936416,
            tickets = {
              head = 41760,
              tail = 33171
            }
          }
        }
      }
    }
  },
  bt_lru_nr = 4294967295
}


3. code

https://bugzilla.redhat.com/show_bug.cgi?id=995189#c3

I think I found the location. I took the code of:

49 81 c1 00 00 10 00 49 89 c2 49 81 e2 00 00 f0 ff 4d 0f b1 10 4d 89 c8 4c 89 c8 49 81 e0 00 00 f0 ff 4c 0f b1 07 49 8b 44 24 30 <48> c7 40 08 00 00 00 00 48 89 c8 f0 4c 0f b1 63 30 48 39 c1 74

Replaced "<48>" with "48", then ran it through:

echo 49 81 c1 00 00 10 00 49 89 c2 49 81 e2 00 00 f0 ff 4d 0f b1 10 4d 89 c8 4c 89 c8 49 81 e0 00 00 f0 ff 4c 0f b1 07 49 8b 44 24 30 <48> c7 40 08 00 00 00 00 48 89 c8 f0 4c 0f b1 63 30 48 39 c1 74 | perl -e '$a=<>; chomp $a; @b = split / /,$a; $t = ""; foreach $y (@b) { $y = hex $y; $t = "C".$t; } $bin = pack $t, @b; print $bin;' > /tmp/binary

Then I did:

objdump -D -b binary -mi386 -Mx86-64 /tmp/binary

Which gave me:

00000000 <.data>:
   0:   49 81 c1 00 00 10 00    add    $0x100000,%r9
   7:   49 89 c2                mov    %rax,%r10
   a:   49 81 e2 00 00 f0 ff    and    $0xfffffffffff00000,%r10
  11:   4d 0f b1 10             cmpxchg %r10,(%r8)
  15:   4d 89 c8                mov    %r9,%r8
  18:   4c 89 c8                mov    %r9,%rax
  1b:   49 81 e0 00 00 f0 ff    and    $0xfffffffffff00000,%r8
  22:   4c 0f b1 07             cmpxchg %r8,(%rdi)
  26:   49 8b 44 24 30          mov    0x30(%r12),%rax
  2b:   48 c7 40 08 00 00 00    movq   $0x0,0x8(%rax) <<<- bug here
  32:   00 
  33:   48 89 c8                mov    %rcx,%rax
  36:   f0 4c 0f b1 63 30       lock cmpxchg %r12,0x30(%rbx)
  3c:   48 39 c1                cmp    %rax,%rcx
  3f:   74                      .byte 0x74

This seems to be the location of rb_tail_page_update():

		(void)local_cmpxchg(&next_page->write, old_write, val);
		(void)local_cmpxchg(&next_page->entries, old_entries, eval);

		/*
		 * No need to worry about races with clearing out the commit.
		 * it only can increment when a commit takes place. But that
		 * only happens in the outer most nested commit.
		 */
		local_set(&next_page->page->commit, 0);

"commit" is at the 8 byte offset of page. So it seems that somehow next_page->page became NULL?

What were you doing at the time of tracing? Were you reading the buffers too? Running trace-cmd?

4. DEBUG_INFO
The normal built vmlinux has the symbol and offset info. This option
just give you extra debug info, like line numbers.
"but for most kernel developers, DEBUG_INFO really just bloats things
and makes the build much *much* slower, for very little gain. Sure,
you get line numbers, but let's face it, it's not that hard to just do
"x/20i <address>" and trying to match it up with the generated code
instead. And since "just match it up" model works with user-reported
oopses of random kernels, you had better be able and willing to do
that *anyway*.

If most of the oopses you decode are on your own machine with your own
kernel, you might want to try to learn to be more careful when writing
code. And I'm not even kidding.   -- Linus"

with DEBUG_INFO:
[zx@ZX linux]$ gdb vmlinux
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-64.el7
<snip>
Reading symbols from /home/zx/git/linux/vmlinux...done.
(gdb) list schedule+0x45
Function "schedule+0x45" not defined.
(gdb) list *schedule+0x45
0xffffffff819ab025 is in schedule (kernel/sched/core.c:2845).
warning: Source file is more recent than executable.
2840	asmlinkage __visible void __sched schedule(void)
2841	{
2842		struct task_struct *tsk = current;
2843	
2844		sched_submit_work(tsk);
2845		__schedule();
2846	}
2847	EXPORT_SYMBOL(schedule);
2848	
2849	#ifdef CONFIG_CONTEXT_TRACKING
(gdb) x/3i schedule+0x45
   0xffffffff819ab025 <schedule+69>:	(bad)  
   0xffffffff819ab026 <schedule+70>:	jmp    0xffffffff819ab027 <schedule+71>
   0xffffffff819ab028 <schedule+72>:	decl   -0x7d(%rax)
(gdb) 


5. x86 registers
==Segment registers
	CS  code segment
	DS  data segment
	SS  stack segment
	ES/FS/GS  data segment

==General-purpose registers
	These eight registers are available for storing operands and pointers.
	EAX — Accumulator for operands and results data
	EBX — Pointer to data in the DS segment
	ECX — Counter for string and loop operations
	EDX — I/O pointer
	ESI — Pointer to data in the segment pointed to by the DS register;
		source pointer for string operations
	EDI — Pointer to data (or destination) in the segment pointed to by
		the ES register; destination pointer for string operations
	ESP — Stack pointer (in the SS segment)
	EBP — Pointer to data on the stack (in the SS segment)

	64-bit operand size : RAX, RBX, RCX, RDX, RDI, RSI, RBP, RSP, R8-R15

==EFLAGS (program status and control) register
	The EFLAGS register report on the status of the program
	being executed and allows limited (application-program level)
	control of the processor.

==EIP (instruction pointer) register
	The EIP register contains a 32-bit pointer to the *next* instruction
	to be executed.


6. find function arguments in vmcore
help bt from crash:

  In order to examine each stack frame's contents use the bt -f option.
  From the extra frame data that is displayed, the arguments passed to each
  function can be determined.  Re-examining the PID 1592 trace above:
 
    crash> bt -f 1592
    PID: 1592   TASK: c0cec000  CPU: 3   COMMAND: "httpd"
<snip> 
     #2 [c0cedf58] pipe_read at c015317f
        [RA: c0148be8  SP: c0cedf5c  FP: c0cedf7c  SIZE: 36]
        c0cedf5c: ef70a040  c0cec000  00000000  00000000  
        c0cedf6c: 00000001  f27ae680  ffffffea  c0cedfbc  
        c0cedf7c: c0148be8  
     #3 [c0cedf7c] sys_read at c0148be6
        [RA: c0107413  SP: c0cedf80  FP: c0cedfc0  SIZE: 68]
        c0cedf80: f27ae680  bffed4a3  00000001  f27ae6a0  
        c0cedf90: 40160370  24000000  4019ba28  00000000  
        c0cedfa0: 00000000  fffffffe  bffba207  fffffffe  
        c0cedfb0: c0cec000  00000001  bffed4a3  bffed488  
        c0cedfc0: c0107413  
     #4 [c0cedfc0] system_call at c010740c
<snip> 
 
    Typically the arguments passed to a function will be the last values
    that were pushed onto the stack by the next higher-numbered function, i.e.,
    the lowest stack addresses in the frame above the called function's
    stack frame.  That can be verified by disassembling the calling function.
    For example, the arguments passed from sys_read() to pipe_read() above
    are the file pointer, the user buffer address, the count, and a pointer
    to the file structure's f_pos field.  Looking at the frame #3 data for
    sys_read(), the last four items pushed onto the stack (lowest addresses)
    are f27ae680, bffed4a3, 00000001, and f27ae6a0 -- which are the 4 arguments
    above, in that order.  Note that the first (highest address) stack content
    in frame #2 data for pipe_read() is c0148be8, which is the return address
    back to sys_read(). 

So get the struct file * value:
crash>p *((struct file *) 0xf27ae680)

--
ppc64 seems like has different direction on stack growing,

investigation of ppc generic/269 panic issue:
	kernel BUG at fs/ext4/inode.c:1375!

static void ext4_da_page_release_reservation(struct page *page,
                                             unsigned int offset,
                                             unsigned int length)
{
        unsigned int stop = offset + length;
        BUG_ON(stop > PAGE_CACHE_SIZE || stop < length);
<snip>



crash> bt -FF output:
#
#static void ext4_da_invalidatepage(struct page *page, unsigned int offset,
#                                   unsigned int length)
#
 #5 [c0000001a3d17990] .ext4_da_invalidatepage at d000000002aba9e4 [ext4]
 [Link Register ]  [c0000001a3d17990] .truncate_inode_pages_range at c00000000023b8d0
    c0000001a3d17990: c0000001a3d17a80 ext4_xattr_cache+21592 
    c0000001a3d179a0: .path_init+540   0000000000010002 
    c0000001a3d179b0: 0000000100001fb6 c0000001a3d17bb0 
    c0000001a3d179c0: c0000001a3d17a40 c0000001a3d17bb0 
    c0000001a3d179d0: .complete_walk+116 f0000000004ecc08 
    c0000001a3d179e0: c0000001a3d17a80 00003fffd57be5db 
    c0000001a3d179f0: .find_lock_page+180 names_cachep     
    c0000001a3d17a00: 0000000000000000 0000000000008000 
    c0000001a3d17a10: 0000000000008000 0000000000007000 
    c0000001a3d17a20: 0000000000000002 0000000000000001 
    c0000001a3d17a30: 0000000000000018 0000000000017000 
    c0000001a3d17a40: 0000000000018000 [c00000017f609728:ext4_inode_cache] 
    c0000001a3d17a50: 0000000000000001 000000000000058a 
    c0000001a3d17a60: 0000000000000000 0000000000000000 
    c0000001a3d17a70: c0000001a3d14000 f0000000004ecc08 

#
#void truncate_inode_pages_range(struct address_space *mapping,
#                                loff_t lstart, loff_t lend)

 #6 [c0000001a3d17a80] .truncate_inode_pages_range at c00000000023b8d0  (unreliable)
    c0000001a3d17a80: c0000001a3d17c70 440024247f6095d8 
    c0000001a3d17a90: .truncate_inode_pages_range+2080 00003fffd57b8578 
    c0000001a3d17aa0: c0000001a3d17ba0 init_thread_union+9920 
    c0000001a3d17ab0: c0000001a3d17b40 28222442d57be5db 
    c0000001a3d17ac0: c0000001a3d17bc0 00003fffd57be5db 
    c0000001a3d17ad0: 000000021000bd08 0000000000000000 
    c0000001a3d17ae0: 0000000000000000 00003fffd57be5db 
    c0000001a3d17af0: 0000000000000000 0000000000000000 
    c0000001a3d17b00: 0000000000000000 ffffffffffffff9c 
    c0000001a3d17b10: 0000000000000000 0000000000000000 
    c0000001a3d17b20: ffffffffffffffff 000000001000d260 
    c0000001a3d17b30: 0000000000000000 0000000010020128
    c0000001a3d17b40: c0000001a3d17be0 00003fffd57be5db 
    c0000001a3d17b50: 000000001000bd08 0000000010020128 
    c0000001a3d17b60: 0000000000000000 00003fffd57be5db 
    c0000001a3d17b70: c0000001a3d17bf0 00003fffd57be5db 
    c0000001a3d17b80: .mntput+80       0000000000000090 
    c0000001a3d17b90: c0000001a3d17c80 00003fffd57b86a8 
    c0000001a3d17ba0: c0000001a3d17c10 0000000000000090 
    c0000001a3d17bb0: c0000001a3d17c70 00000000100214e8 
    c0000001a3d17bc0: [c0000001a1e5f000:kmalloc-1024] [c0000001a1e5f248:kmalloc-1024] 
    c0000001a3d17bd0: c0000001a3d17c60 [c0000001a1e5f260:kmalloc-1024] 
    c0000001a3d17be0: 0000000000018000 0000000000016fff 
    c0000001a3d17bf0: c0000001a3d17c70 0000000000000403 
    c0000001a3d17c00: 000000000001771d [c00000017f609680:ext4_inode_cache] 
    c0000001a3d17c10: 0000000000000fff 0000000000000001 
    c0000001a3d17c20: 0000000000000018 0000000000017000 
    c0000001a3d17c30: 0000000000018000 [c00000017f6095d8:ext4_inode_cache] 
    c0000001a3d17c40: [c0000000295ae800:kmalloc-256] 000000000000058a 
    c0000001a3d17c50: 0000000000000000 0000000000017193 
    c0000001a3d17c60: [c00000017f609578:ext4_inode_cache] 000000000001771d 
#
#long ext4_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
#
 #7 [c0000001a3d17c70] .ext4_fallocate at d000000002af9060 [ext4]
    c0000001a3d17c70: c0000001a3d17d70 c0000001a3d17db0 
    c0000001a3d17c80: .ext4_fallocate+1360 [c0000001a1bee270:kmalloc-1024] 
    c0000001a3d17c90: 0000000000000001 ext4_xattr_cache+21592 
    c0000001a3d17ca0: c0000001a3d17d70 0000000000000000 
    c0000001a3d17cb0: .__sb_start_write+116 0000000000001000 
    c0000001a3d17cc0: c0000001a3d17d90 0000000054d027eb 
    c0000001a3d17cd0: 000000002e22cd83 0000000054d027f1 
    c0000001a3d17ce0: c0000001a3d17d70 00000000100213c8 
    c0000001a3d17cf0: 00000000100213c0 000000001000d260 
    c0000001a3d17d00: 0000000000000000 0000000010020128 
    c0000001a3d17d10: 0000000000000000 00003fffd57be5db 
    c0000001a3d17d20: 000000001000bd08 0000000051eb851f
    c0000001a3d17d30: 000000001dcd6500 0000000000000000 
    c0000001a3d17d40: 000000000000058a 0000000000017193 
    c0000001a3d17d50: [c00000017f6095d8:ext4_inode_cache] 0000000000000000 
    c0000001a3d17d60: [c0000000295ae800:kmalloc-256] 0000000000000010 
 #8 [c0000001a3d17d70] .sys_fallocate at c0000000002d3c80
    c0000001a3d17d70: c0000001a3d17e30 2400242800000000 
    c0000001a3d17d80: .sys_fallocate+368 c0000001a3d17ea0



7. disassemble in crash

crash> dis -l sys_readlinkat+46
/usr/src/debug/kernel-3.10.0-324.el7/linux-3.10.0-324.el7.x86_64/fs/stat.c: 301
0xffffffff811e3e7e <sys_readlinkat+46>: movl   $0x0,-0x44(%rbp)
crash> l *sys_readlinkat+46
0xffffffff811e3e7e is in SyS_readlinkat (fs/stat.c:301).
296     SYSCALL_DEFINE4(readlinkat, int, dfd, const char __user *, pathname,
297                     char __user *, buf, int, bufsiz)
298     {
299             struct path path;
300             int error;
301             int empty = 0;
302             unsigned int lookup_flags = LOOKUP_EMPTY;
303     
304             if (bufsiz <= 0)
305                     return -EINVAL;
crash> 

movl   $0x0,-0x44(%rbp) ==> copy 0 to address(value(rbp)-0x44)
