fs/nfs/inode.c
	module(init_nfs_fs) --> register_nfs_fs --> regster_fetm(&nfs4_fs_type)
						    regster_fletm(&nfs_fs_type)

struct file_system_type nfs_fs_type / nfs4_fs_type = {
        .owner          = THIS_MODULE,
        .name           = "nfs", / "nfs4",
        .mount          = nfs_fs_mount,       <-------------------------- POINT
        .kill_sb        = nfs_kill_super,
        .fs_flags       = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
};


fs/namespace.c
	mount syscall --> do_mount --> do_new_mount --> XXX

	---------------------------------------------------------------
	mount -t nfs4  localhost:/root /nfsmnt
			||
			\/
	SYSCALL_DEFINE5(mount, char __user *, dev_name, char __user *, dir_name,
                char __user *, type, unsigned long, flags, void __user *, data)
			||
			\/
	jprobe: dev_name = localhost:/root, dir_name = /nfsmnt, type = nfs4,
	flags = 0x0, data = addr=::1,clientaddr=::1
	---------------------------------------------------------------

	IN do_mount, done mountpoint dir_name lookup, flags transformation,
	separate per-mountpoint flags to mnt_flags, clear useless flags:

	flags &= ~(MS_NOSUID | MS_NOEXEC | MS_NODEV | MS_ACTIVE | MS_BORN |
                   MS_NOATIME | MS_NODIRATIME | MS_RELATIME| MS_KERNMOUNT |
                   MS_STRICTATIME);	

	and CALL:
	do_new_mount(&path, type_page, flags, mnt_flags, dev_name, data_page);

	IN do_new_mount, call get_fs_type to get nfs type registered in
	filesystems list,
	then CALL:
	vfs_kern_mount(struct file_system_type *type, int flags,
			const char *name, void *data)
	and call do_add_mount if success.

	XXX --> vfs_kern_mount --> mount_fs --> type->mount ==> nfs_fs_mount

	IN mount_fs, CALL:
		root = type->mount(type, flags, name, data);
	so comes nfs_fs_mount.


fs/nfs/super.c






Then vfs_kern_mount call registered function nfs4_get_sb do most of the work.
nfs4_get_sb --> nfs4_try_mount --> nfs_do_root_mount
Then  goes to nfs4_remote_get_sb --> nfs4_create_server --> nfs4_init_server --> nfs4_set_client 


Back to nfs4_try_mount, after nfs_do_root_mount, calls nfs_follow_remote_path --> vfs_path_lookup --> path_walk --> .. -> do_lookup --> follow_managed --> follow_automount --> dentry->d_op->d_automount
