1/
	tar xf Downloads/linux.gz -C test/
2/
	[zx@ZX run0113]$ cat tt
	nfs nfs nfs
	[zx@ZX run0113]$ grep -c nfs tt
	1
	[zx@ZX run0113]$ grep -o nfs tt
	nfs
	nfs
	nfs
	[zx@ZX run0113]$ grep nfs tt
	nfs nfs nfs


3/
trap [-lp] [[arg] sigspec ...]
              The  command  arg is to be read and executed when the shell receives signal(s) sigspec.  
		If arg is absent (and there is a single sigspec) or-, each specified signal is reset to its original disposition (the value it had upon entrance to the shell).  
		If arg is the null string the signal specified by each sigspec is ignored by the shell and by the commands it invokes.
		If arg is not present and -p has been supplied, then the trap commands associated with each sigspec are displayed.
		If no arguments are supplied or if only -p is  given,  trap  prints  the
              
              	If a sigspec is EXIT (0) the command arg is executed on exit from the shell.
		If a sigspec is DEBUG, the command arg is executed before every simple command, for, case, select command, every arithmetic for command, and before the first command  executes  in a shell function.
		If a sigspec is RETURN, the command arg is executed each time a shell function or a script executed with the . or source builtins finishes executing.

              	If a sigspec is ERR, the command arg is executed whenever a simple command has a non-zero exit status, subject to the following conditions.
              		The ERR trap is not executed if the failed command is part of the command list immediately following a while or until keyword, 
			part of the test in an if statement, part of a command executed in a && or || list, or if the command's return value is being 
			inverted via !.  These are the same conditions obeyed by the errexit option.

              Signals ignored upon entry to the shell cannot be trapped, reset or listed.  Trapped signals that are not being ignored are reset  to  their
              original  values in a subshell or subshell environment when one is created.  The return status is false if any sigspec is invalid; otherwise
              trap returns true.


4/
awk '/zzz/{match(s, r, M); print M[1]}'
	match function, returns the position in s where regular express r occurs, or 0 if not occured.
	If array M is specified, it is cleared and its 0th element contains the portion of s matched the entire RE r, its
	1st to nth elements contains portions of s matches corresponding parenthesized sub RE in r.



5/
(gdb)set follow-fork-mode <parent|child>


6/
screen # creat screen
C-a c  # creat new window in screen
C-a C-a# change screen windows
C-a d  # dettach from screen
#log out
screen -ls # list exist screen
screen -r "$id"   # restore into screen

7/
${parameter#word}
${parameter##word}
              Remove matching prefix pattern.

[zx@ZX ~]$ va=las9102
[zx@ZX ~]$ echo ${va#las}
9102

${parameter%word}
${parameter%%word}
              Remove matching suffix pattern.

[zx@ZX ~]$ va=44%
[zx@ZX ~]$ echo $va
44%
[zx@ZX ~]$ echo ${va%\%}
44



8/
${parameter/pattern/string}
              Pattern substitution.  The pattern is expanded to produce a pat-
              tern just as in pathname expansion.  Parameter is  expanded  and
              the  longest match of pattern against its value is replaced with
              string.  If pattern begins with /, all matches  of  pattern  are
              replaced   with  string.   Normally  only  the  first  match  is
              replaced.  If pattern begins with #, it must match at the begin-
              ning of the expanded value of parameter.  If pattern begins with
              %, it must match at the end of the expanded value of  parameter.
              If string is null, matches of pattern are deleted and the / fol-
              lowing pattern may be omitted.  If parameter is @ or *, the sub-
              stitution  operation  is applied to each positional parameter in
              turn, and the expansion is the resultant list.  If parameter  is
              an  array  variable  subscripted  with  @ or *, the substitution
              operation is applied to each member of the array  in  turn,  and
              the expansion is the resultant list.

[root@hp-dl160g8-01 ~]# a=`cat /etc/redhat-release `
[root@hp-dl160g8-01 ~]# echo ${a//[a-z()6.]/}
4

9/
if list; then list; [ elif list; then list; ] ... [ else list; ] fi
              The  if  list is executed.  If its exit status is zero, the then list is executed.


10/
vim search case insensitive
/\cPattern


11/
tshark
	tshark -w /tmp/out -i em1
	tshark -r /tmp/out -O NFS

12/
   Compound Commands
       A compound command is one of the following:

       (list) list  is  executed  in  a  subshell  environment.

       { list; }
              list  is simply executed in the current shell environment.  list must be terminated with a newline or semicolon.  This
              is known as a group command.they must be separated from list by whitespace or another shell metacharacter.

       ((expression))
              The expression is evaluated according to the rules described below under ARITHMETIC EVALUATION.  If the value  of  the
              expression  is  non-zero, the return status is 0; otherwise the return status is 1.  This is exactly equivalent to let
              "expression".

       [[ expression ]]
		An additional binary operator, =~, is available, regular exporession match

       for (( expr1 ; expr2 ; expr3 )) ; do list ; done
		expr1/2/3 are arithmatic expressions , like c-language for loop

13/
associate array
	declare -A ar; ar[a]=1; ar[c]=2;

14/
acl set all privileges, ignoring other mod bits

15/
HERE doc/string: to be used as input to cmd
[zx@ZX notes]$ cat > /tmp/2 <<ZX   # an EOF word implies end of reading
> 2
> ZX
[zx@ZX notes]$ cat /tmp/2
2
[zx@ZX notes]$ tee <<<asd          # single word as stdin of cmd
asd
[zx@ZX notes]$ tee <<asd
> 123
> asd
123
[zx@ZX notes]$ 


16/
multiple fs in awk:  ':' '.' ' '
	awk -F[:.\ ] '{xxx}'

17/
gcore PID  # to generate core dump file manually
gdb /path/to/binary /path/to/core
#bt
#frame <frame-number>   # select frame
#info locals            # print local variables
#print <variable>


18/
There are three quoting mechanisms: the escape character, single quotes, and double quotes.

       A  non-quoted backslash (\) is the escape character.
	If a \<newline> pair appears, and the backslash is not itself quoted, the \<newline> is treated as a line continuation.

       Enclosing  characters  in  single  quotes preserves the literal value of each character within the quotes.  A single quote may not occur
       between single quotes, even when preceded by a backslash.

       Enclosing characters in double quotes preserves the literal value of all characters within the quotes, with the exception of
			$,  `,  \, and,  when  history  expansion  is enabled, !.
       The characters $ and ` retain their special meaning within double quotes.
       The backslash retains its special meaning only when followed by one of the following characters: $, `, ", \, or <newline>.
       A double quote may be quoted within double quotes by preceding it with a backslash.

       Tilda expantion ~ does not retain its special meaning in any form of quoting..

19/
   Tilde Expansion  *UNQUOTED*
       If a word begins with an UNQUOTED tilde character (`~'), all of the characters preceding the first unquoted slash (or all characters,  if  there  is  no  unquoted
       slash)  are  considered  a  tilde-prefix.   If  none  of the characters in the tilde-prefix are quoted, the characters in the tilde-prefix following the tilde are
       treated as a possible login name.  If this login name is the null string, the tilde is replaced with the value of the shell parameter HOME.  If HOME is unset, the
       home directory of the user executing the shell is substituted instead.  Otherwise, the tilde-prefix is replaced with the home directory associated with the speci‚Äê
       fied login name.

20/
[[ $line =~ regex ]]
	this does not need the whole line match the regex pattern, a substring matching is enough.
	
	regex(7) , two types of Regular Expressions:
		old one, ed
		new one, egrep
	Obsolete ("basic") regular expressions differ in several respects.
		'|', '+', and '?' are ordinary characters and there is no equivalent for  their  functionality.
		The delimiters for bounds are "\{" and "\}", with '{' and '}' by themselves ordinary characters.
		The parentheses for nested subexpressions are "\(" and "\)", with '(' and ')' by themselves ordinary characters.
		'^' is  an  ordinary  character except  at  the beginning of the RE or(!) the beginning of a parenthesized subexpression
		'$' is an ordinary character except at the end of the RE or(!) the end of a parenthesized subexpression
		'*' is an ordinary character if it appears at the beginning of the RE or the beginning of a parenthesized subexpression

21/
printf '=%.0s' {1..100}

How this works:
Bash expands {1..100} so the command becomes:
printf '=%.0s' 1 2 3 4 ... 100

I've set printf's format to =%.0s which means that it will always print a single = no matter
what argument it is given. Therefore it prints 100 =s.

22/
((expression))
   The expression is evaluated according to the rules described below under ARITHMETIC EVALUATION.  If the value of  the  expression
   is non-zero, the return status is 0; otherwise the return status is 1.  This is exactly equivalent to let "expression".

sh-4.2$ a=1
sh-4.2$ b$a=2
sh: b1=2: command not found
sh-4.2$ ((b$a=2))
sh-4.2$ echo $b$a
1
sh-4.2$ echo ${b$a}
sh: ${b$a}: bad substitution
sh-4.2$ echo $((b$a))
2
sh-4.2$ ((b$a=asd))                <------------------ only for arithmetic calculation
sh-4.2$ echo $((b$a))
0
sh-4.2$ ((b$a=/dev/d))
sh: ((: b1=/dev/d: syntax error: operand expected (error token is "/dev/d")
sh-4.2$ ((b$a=\/dev\/d))
sh: ((: b1=/dev/d: syntax error: operand expected (error token is "/dev/d")
sh-4.2$ ((b$a=\\/dev\/d))
sh: ((: b1=\/dev/d: syntax error: operand expected (error token is "\/dev/d")
sh-4.2$ 


23/ 

read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p prompt] [-t timeout] [-u fd] [name ...]
              One  line is read from the standard input, or from the file descriptor fd supplied as an argument to the -u option, and the first
              word is assigned to the first name, the second word to the second name, and so on, with leftover words and their intervening sep‚Äê
              arators  assigned  to  the  last  name.   If there are fewer words read from the input stream than names, the remaining names are
              assigned empty values.  The characters in IFS are used to split the line into words.

IFS    The  Internal Field Separator that is used for word splitting after expansion and to split lines into words with the read builtin
              command.  The default value is ``<space><tab><newline>''.

# cat /tmp/gftmp-1445328584
ext4:ext4/005 result: FAIL
# while IFS=' ' read -r line last || [ -n "$line" ] ; do echo 1$line ; echo 2$last;  done < /tmp/gftmp-1445328584
1ext4 ext4/005
2result  FAIL
# while IFS='' read -r line last || [ -n "$line" ] ; do echo 1$line ; echo 2$last;  done < /tmp/gftmp-1445328584
1ext4 ext4/005 result  FAIL
2


24/

awk '{$1=$1;print}'

or shorter:       awk '{$1=$1};1'

Would trim leading and trailing space or tab characters and also squeeze sequences of tabs and spaces into a single space.

That works because when you assign something to one of the fields, awk rebuilds the whole record (as printed by print)
by joining all fields ($1, ..., $NF) with OFS (space by default).

awk '{$1=$1};1' contains 2 awk pattern-action pairs:
{$1=$1} is an action, execed on every record coz there is an null pattern.
'1' equals '1{print $0}' ,  pattern 1 always true, so defaul action print everytime.

25/

clean() {
	echo clean
}
trap "clean;" 0 1   # 0 is necessary to exec clean
exit 1  # although exit on error, still a normal exit to this whole program, terminated by signal 0

26/

in gdb, press C-x 2 to enter TUI mode, put into a split source and disassembly
display, where you can see assembly instructions of C instructions.

use: p $r29  can print value in register, which may be optimized by gdb.


27/

combination of IO redirection and Process Substitution

       Process  substitution is supported on systems that support named pipes (FIFOs) or
       the /dev/fd method of naming open files.  It takes the form of <(list) or >(list).
       The process list is run with its input or output connected to a FIFO or some file
       in /dev/fd.

       When available, process substitution is performed simultaneously with parameter
       and variable expansion, command substitution, and arithmetic expansion.

bash -x tt.sh > >(tee .log) 2>&1
bash -x tt.sh &> >(tee .log)
bash -x tt.sh > >(tee .log)

to avoid
bash -x tt.sh | tee .log   which will LOSE the return value of tt.sh
